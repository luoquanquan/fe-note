[{"title":"HTTP协议原理+实践","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86-%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP/HTTP%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86+%E5%AE%9E%E8%B7%B5/","content":"<p>课程链接: <a href=\"https://coding.imooc.com/class/225.html\">https://coding.imooc.com/class/225.html</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-04-20-55-42.png\" alt=\"2020-03-04-20-55-42\"></p>\n<h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>HTTP (HyperText Transfer Protocol): 超文本传输协议, 它是建立在 TCP&#x2F;IP 协议之上的应用层规范. 是互联网上应用最广泛的一种网络协议.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"HTTP-5-层网络模型\"><a href=\"#HTTP-5-层网络模型\" class=\"headerlink\" title=\"HTTP 5 层网络模型\"></a>HTTP 5 层网络模型</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-04-20-46-44.png\" alt=\"2020-03-04-20-46-44\"></p>\n<p>各个层级概述</p>\n<ul>\n<li>物理层, 主要作用是定义物理设备如何连接和传输数据</li>\n<li>数据链路层, 在通信实体间建立数据链路链接</li>\n<li>网络层, 为数据在节点之间传输创建逻辑链路</li>\n<li>传输层, 用于向用户提供端到端(end to end)的服务. 传输层向上层屏蔽了下层数据通信的细节. 例如, 包体过大时的分包问题.</li>\n<li>应用层, 为软件提供服务, 构建与 TCP 协议之上, 向应用软件屏蔽了网络传输相关的细节</li>\n</ul>\n<h3 id=\"HTTP-的发展历史\"><a href=\"#HTTP-的发展历史\" class=\"headerlink\" title=\"HTTP 的发展历史\"></a>HTTP 的发展历史</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-04-20-58-06.png\" alt=\"2020-03-04-20-58-06\"></p>\n<h4 id=\"HTTP-x2F-0-9\"><a href=\"#HTTP-x2F-0-9\" class=\"headerlink\" title=\"HTTP &#x2F; 0.9\"></a>HTTP &#x2F; 0.9</h4><p>发布于 1991 年, 该版本极其简单.</p>\n<ul>\n<li>只有一个命令 GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务端内容发送完成之后就关闭 TCP 链接</li>\n</ul>\n<h4 id=\"HTTP-x2F-1-0\"><a href=\"#HTTP-x2F-1-0\" class=\"headerlink\" title=\"HTTP &#x2F; 1.0\"></a>HTTP &#x2F; 1.0</h4><ul>\n<li>任何格式的内容都可以发送, 使得互联网不仅能传递文字还能传输图片 &#x2F; 视频 &#x2F; 二进制文件, 为互联网的大发展奠定了基础</li>\n<li>增加了 POST &#x2F; PUT &#x2F; HEADER 等命令</li>\n<li>增加了 status code 和 header 相关内容.</li>\n<li>增加了多字符集的支持, 多部分发送(multi-part), 权限(authorization), 缓存(cache), 内容编码(content encoding)等</li>\n</ul>\n<p>HTTP &#x2F; 1.0 的缺点, 就是每个 TCP 链接只能发送一个请求. 数据发送完毕就会断开 TCP 链接, 如果需要请求其他资源就需要重新创建 TCP 链接</p>\n<h4 id=\"HTTP-x2F-1-1\"><a href=\"#HTTP-x2F-1-1\" class=\"headerlink\" title=\"HTTP &#x2F; 1.1\"></a>HTTP &#x2F; 1.1</h4><ul>\n<li>持久链接, 设置 TCP 链接在数据发送完成后默认不关闭, 可以被后续的请求复用. 解决了 1.0 版本中的问题. 客户端或者服务端发现对方一段时间没有活动就可以主动关闭链接. 规范的做法是, 客户端在最后一个请求时发送<code>Connection: close</code> 明确通知服务器关闭 TCP 链接</li>\n<li>增加了管道机制, 可以在一个 TCP 链接里发送多个 http 请求, 但是在 1.1 版本中虽然可以在同一个 TCP 链接里发送多个 http 请求, 但是服务器对于进来的请求时按照顺序进行数据返回的. 如果前一个请求等待时间非常长, 而后一个请求处理得比较快. 这个时候后一个请求不能先发送, 而是要等第一个请求数据全部发送完成之后, 才能进行发送. 即是串行的.</li>\n<li>增加了 HOST 头, 有了 HOST 之后就可以在一台服务器(物理机)上同时跑多个 web 服务, 提升了物理机的利用率</li>\n</ul>\n<h4 id=\"HTTP-x2F-2\"><a href=\"#HTTP-x2F-2\" class=\"headerlink\" title=\"HTTP &#x2F; 2\"></a>HTTP &#x2F; 2</h4><ul>\n<li>所有数据都以二进制传输, 在 HTTP&#x2F;1.1 里面大部分的数据传输是通过字符串, 所以数据的分片方式是不太一样的. 在 HTTP&#x2F;2 里面所有的数据都是以帧进行传输的</li>\n<li>同一个连接里面发送多个请求时, 服务器端不再需要按照顺序来返回处理后的数据. 而是可以在返回第一个请求里面数据的时候, 同时返回第二个请求里面的数据. 这样的并行传输能够更大限度地提高 web 应用的传输效率</li>\n<li>新增头信息压缩, 有效减少带宽使用</li>\n<li>新增推送等功能, HTTP&#x2F;2之前, 只能由客户端发送数据, 服务器端返回数据. 客户端是主动方, 服务器端永远是被动方. 在 HTTP&#x2F;2 里面有了 “推送” 的概念, 也就是说服务器端可以主动向客户端发起一些数据传输</li>\n<li>HTTP&#x2F;2 其实主要就是改善了 HTTP&#x2F;1.1 里面造成性能低下的一些问题</li>\n</ul>\n<p>推送功能实例, 一个web页面加载时会要求一些html, css, js等文件, css和js文件是以链接的形式在 html 文本里面显示的, 只有通过浏览器解析了 html 里面的内容之后, 才能根据链接里面包含的URL地址去请求对应的 css 和 js 文件.<br>在HTTP&#x2F;2之前, 这个传输过程会包含顺序问题, 需要先请求到 html 的文件, 通过浏览器运行解析这个 html 文件之后, 才能去发送 css 的请求和 js 的请求.<br>HTTP&#x2F;2 中有了推送功能之后, 在请求 html 的同时, 服务器端可以主动把 html 里面所引用到的 css 和 js 文件推送到客户端, 这样html, css 和 js 的发送就是并行的而不是串行的</p>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-04-21-47-22.png\" alt=\"2020-03-04-21-47-22\"></p>\n<h3 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h3><ul>\n<li>public, 请求发送过程中的任何一个环节(如, 代理服务器)都可以缓存请求的内容</li>\n<li>private, 只有发起请求的浏览器能够缓存请求的内容</li>\n<li>no-cache, 可以存储请求的内容, 但是缓存的内容是否可用需要向服务器发请求查询. no-cache的响应实际是可以存储在本地缓存中的, 只是在与原始服务器进行新鲜度再验证之前, 缓存不能将其提供给客户端使用</li>\n<li>no-store, 禁用缓存, 禁止本地和代理服务器缓存请求的文件</li>\n<li>max-age &#x3D; <second> 缓存到期时间</li>\n<li>s-maxage &#x3D; <second> 代理服务器上缓存的内容过期时间</li>\n<li>max-stale &#x3D; <second> 即使缓存已经过了有效期, 但是仍然可以使用缓存(浏览器中用不到)</li>\n<li>must-revalidate, 缓存必须在使用之前验证旧资源的状态, 并且不可使用过期资源. 表示如果页面过期, 则去服务器进行获取</li>\n<li>proxy-revalidate, 与must-revalidate作用相同, 但它仅适用于共享缓存(例如代理), 并被私有缓存忽略</li>\n<li>no-transform, 静止代理服务器修改请求信息</li>\n</ul>\n<h3 id=\"其他内容\"><a href=\"#其他内容\" class=\"headerlink\" title=\"其他内容\"></a>其他内容</h3><ul>\n<li>数据协商 Accept &#x2F; Content-Type 这些</li>\n<li>Redirect (301 from disk cache, 302, 307 &#x2F; POST)</li>\n<li>CSP(content security policy)</li>\n</ul>\n<h2 id=\"实战部分\"><a href=\"#实战部分\" class=\"headerlink\" title=\"实战部分\"></a>实战部分</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后 <code>nginx</code> 的位置在 <code>/usr/local/etc/nginx</code> 目录下.</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>nginx</code> 命令没有报错说明安装启动成功, 验证方式为浏览器直接访问 <a href=\"http://localhost/\">localhost</a> 查看是否成功展示 <code>nginx</code> 欢迎页面</p>\n<!-- more -->\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><blockquote>\n<p>正式线上配置的 nginx 需要配置 DNS 来把域名指向我们的服务器 IP. 由于本地开发, 直接修改 hosts 即可</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">12.0.0.1 quanquan.com</span><br></pre></td></tr></table></figure>\n\n<p>PS: 每次修改配置文件以后都要执行 <code>nginx -s reload</code> 重启 <code>nginx</code></p>\n<h3 id=\"导入额外配置文件\"><a href=\"#导入额外配置文件\" class=\"headerlink\" title=\"导入额外配置文件\"></a>导入额外配置文件</h3><p>安装 <code>nginx</code> 成功后, 其配置文件的默认配置文件为 <code>/usr/local/etc/nginx/nginx.conf</code> 文件,<br>打开配置文件, 取消 <code>include servers/*;</code> 这一行前边的注释, 就可以随意在 <code>servers</code> 目录下创建配置文件了. 本次笔记中只创建 <code>test.conf</code> 配置文件</p>\n<h3 id=\"配置一个简单的代理服务器\"><a href=\"#配置一个简单的代理服务器\" class=\"headerlink\" title=\"配置一个简单的代理服务器\"></a>配置一个简单的代理服务器</h3><p>编写 nginx 配置文件如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 <code>server</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(request.<span class=\"property\">headers</span>);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&lt;h1&gt;Hello world&lt;h1&gt;&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3333</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;the server is running~&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>服务文件中, 对于所有的请求直接返回了 <code>&lt;h1&gt;Hello world&lt;h1&gt;</code>, 并且打印了请求的头信息, 可以看到以上的代理服务虽然能够成功代理到业务服务但是打印的 HOST 头信息, 变成了代理服务请求的 HOST: 127.0.0.1:3333</p>\n<h3 id=\"修正-HOST-头信息\"><a href=\"#修正-HOST-头信息\" class=\"headerlink\" title=\"修正 HOST 头信息\"></a>修正 HOST 头信息</h3><p>把 location 块修改为以下内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3333;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置代理缓存服务器\"><a href=\"#配置代理缓存服务器\" class=\"headerlink\" title=\"配置代理缓存服务器\"></a>配置代理缓存服务器</h3><p>第一步, 指定缓存信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_cache_path /Users/quanquanluo/nginx_cache levels=1:2 keys_zone=cache:10m max_size=10g inactive=60m use_temp_path=off;</span><br></pre></td></tr></table></figure>\n<p>在此步骤中我们指定了, nginx 缓存的目录重启 nginx 之后会在指定的缓存目录创建一个</p>\n<p>第二步, 把 location 块修改为以下内容即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_cache my_cache;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3333;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>第三步, 升级 <code>server.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">sleep</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(), <span class=\"number\">2e3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;./test.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">async</span> (request, response) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url&#125; = request</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">        response.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&lt;h1&gt;Hello world&lt;h1&gt;&lt;img src=&quot;/test.jpg&quot; /&gt;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/test.jpg&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">sleep</span>()</span><br><span class=\"line\">        response.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;image/jpeg&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Cache-Control&#x27;</span>: <span class=\"string\">&#x27;max-age=5, s-maxage=10&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        response.<span class=\"title function_\">end</span>(img)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3333</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;the server is running~&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第四步, 通过 Vary 字段可以指定只有某个请求头一致的时候才能使用缓存</p>\n<p>示例,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;image/jpeg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cache-Control&#x27;</span>: <span class=\"string\">&#x27;max-age=5, s-maxage=10&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Vary</span>: <span class=\"string\">&#x27;User-Agent&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上配置指定了只有请求头 <code>User-Agent</code> 一致的时候才能使用缓存. 这个的使用场景就是为相同的终端提供一致的缓存信息</p>\n<h3 id=\"在本地配置-https-服务\"><a href=\"#在本地配置-https-服务\" class=\"headerlink\" title=\"在本地配置 https 服务\"></a>在本地配置 https 服务</h3><p>第一步, 生成证书.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privkey.pem -out localhost-cert.pem</span><br></pre></td></tr></table></figure>\n<p>执行该步骤后, 会在当前目录创建 <code>localhost-privkey.pem</code> <code>localhost-cert.pem</code> 两个文件</p>\n<p>第二步, 修改配置爱文件中的 server 块</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>    path to /localhost-privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>        path to /localhost-cert.pem;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新版的 chrome 中, 自建的证书, 没有了不安全页面的继续访问入口. 所以有了下一步</p>\n<p>第三步, 安装并信任刚刚创建的证书</p>\n<ul>\n<li>在 finder 中找到生成的 localhost-cert.pem 文件并双击</li>\n<li>在钥匙串登录类别中找到创建证书时候输入的证书名字, 我写的是 CN</li>\n<li>双击刚刚安装的证书弹出以下图片, 按照图示设置</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-05-15-58-30.png\" alt=\"2020-03-05-15-58-30\"></p>\n<p>至此, 再通过 https 访问 <code>quanquan.com</code> 弹出的不安全页面就可以通过高级, 选择仍要前往了. 本地配置 https 环境完成</p>\n<h3 id=\"访问-http-自动跳转到-https\"><a href=\"#访问-http-自动跳转到-https\" class=\"headerlink\" title=\"访问 http 自动跳转到 https\"></a>访问 http 自动跳转到 https</h3><p>在配置文件中添加以下配置即可</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> [::]:<span class=\"number\">80</span> default_server;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\">  <span class=\"attribute\">return</span> <span class=\"number\">302</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"升级-http2\"><a href=\"#升级-http2\" class=\"headerlink\" title=\"升级 http2\"></a>升级 http2</h3><p>就这么一句</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">443</span> http2 ssl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开启-http2-Server-Push\"><a href=\"#开启-http2-Server-Push\" class=\"headerlink\" title=\"开启 http2 Server-Push\"></a>开启 http2 Server-Push</h3><p>第一步, nginx 配置文件 <code>server</code> 块中添加 <code>http2_push_preload on;</code><br>第二步, 升级服务代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Link&#x27;</span>: <span class=\"string\">&#x27;&lt;/test.jpg&gt;; rel=preload; as=image&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&lt;h1&gt;Hello world&lt;h1&gt;&lt;img src=&quot;/test.jpg&quot; /&gt;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>以上代码的意思是当浏览器访问 <code>/</code> 路径时, 主动向浏览器推送 test.jpg</p>\n<p>由于, 自签名的证书构建的 https 会被浏览器标记为不安全的服务, 所以浏览器上看不到效果…</p>\n<p>但是这个语法是没有问题的~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.cnblogs.com/kevingrace/p/10459429.html\">Nginx下关于缓存控制字段cache-control的配置说明</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\">Cache-Control</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/03/http2_server_push.html\">HTTP&#x2F;2 服务器推送（Server Push）教程</a></li>\n<li><a href=\"https://www.cnblogs.com/wujiaolong/p/5172e1f7e9924644172b64cb2c41fc58.html\">HTTP、HTTP2.0、SPDY、HTTPS 你应该知道的一些事</a></li>\n</ul>\n","categories":["学习笔记","HTTP协议原理+实践"],"tags":["HTTP"]},{"title":"1. 课程介绍","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/1.%20%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=1\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=1</a></p>\n<p>教学视频链接 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF\">https://www.bilibili.com/video/BV1Vt411X7JF</a></p>\n<p>笔记参考 <a href=\"https://blog.nowcoder.net/n/30cbdb37108b4d93b3a5a93b8226ae31\">https://blog.nowcoder.net/n/30cbdb37108b4d93b3a5a93b8226ae31</a></p>\n<p>笔记中有截图使用了老师视频截图或者参考博客截图, 不会用于商业用途. 如有侵权请联系我删除. <a href=\"mailto:&#x6c;&#x75;&#111;&#x5f;&#x71;&#x75;&#97;&#110;&#x71;&#117;&#97;&#x6e;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6c;&#x75;&#111;&#x5f;&#x71;&#x75;&#97;&#110;&#x71;&#117;&#97;&#x6e;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"2. 比特币中的密码学原理","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/2.%20%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=2\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=2</a></p>\n<h2 id=\"比特币中用到了加密学中两个功能\"><a href=\"#比特币中用到了加密学中两个功能\" class=\"headerlink\" title=\"比特币中用到了加密学中两个功能\"></a>比特币中用到了加密学中两个功能</h2><ul>\n<li>哈希</li>\n<li>签名</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"密码学中的哈希函数-cryptographic-hash-function-的两个性质\"><a href=\"#密码学中的哈希函数-cryptographic-hash-function-的两个性质\" class=\"headerlink\" title=\"密码学中的哈希函数(cryptographic hash function) 的两个性质\"></a>密码学中的哈希函数(cryptographic hash function) 的两个性质</h2><h3 id=\"collision-哈希碰撞-resistance\"><a href=\"#collision-哈希碰撞-resistance\" class=\"headerlink\" title=\"collision(哈希碰撞) resistance\"></a>collision(哈希碰撞) resistance</h3><p>假设用不等的输入 x !&#x3D; y 但是得到了相同的输出 H(x) &#x3D;&#x3D;&#x3D; H(y) 就认为发生了哈希碰撞. 根据<a href=\"https://baike.baidu.com/item/%E9%B8%BD%E7%AC%BC/8489865\">鸽笼原理</a>哈希碰撞不可避免. 然而给出 x 很难找到可以与之碰撞的 y 除非蛮力求解 (brute-force).</p>\n<p><em>该性质的作用</em>: 对于一条信息 message 求 digest</p>\n<p>eg: m 的哈希值是 H(m) &#x3D; digest, 很难做到只修改 m 而使得 digest 的值不变</p>\n<p>哈希碰撞无法人为制造, 无法验证, 是根据实践经验得来的</p>\n<h3 id=\"hiding\"><a href=\"#hiding\" class=\"headerlink\" title=\"hiding\"></a>hiding</h3><p>哈希函数的计算过程是单向的, 不可逆的. 从 H(x) 不能推导出 x, hiding 性质的前提是输入空间足够大(避免彩虹表), 分布比较均匀. 如果输入空间不够大一般在 x 后面拼接一个随机数 nonce 再取哈希 H(x||nonce) 以此来保证输入空间</p>\n<p><em>该性质的作用</em>: 和 collision resistance 一起, 用来实现 digital commitment(或 digital equivalent of a sealed envelope)</p>\n<p>sealed envelope:</p>\n<ul>\n<li>假设某人可以在彩票发售期间预测中奖号码</li>\n<li>为了避免他发布的预测内容影响到大家对彩票的购买, 他可以将预测的结果 lottery 进行一次哈希得到 H(lottery) 并发布.</li>\n<li>根据 hiding 特性人们只知道了他预测结果的哈希但是不能知道实际的预测结果</li>\n<li>彩票开奖时间再公布他预测的 lottery, 根据 collision resistance 特性 lottery 是不可篡改的否则无法通过校验</li>\n</ul>\n<h2 id=\"puzzle-friendly\"><a href=\"#puzzle-friendly\" class=\"headerlink\" title=\"puzzle friendly\"></a>puzzle friendly</h2><p>除了上述密码学中常用到的两个特性外, 比特币加密算法中还有一个常见的特性 puzzle friendly. 哈希值的计算事先是不可预测的, 对于一个需要 k 个 0 开头的结果你是无法预知哪个值更容易得到这个结果的需要调整输入一个一个尝试.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221129235112.png\" alt=\"20221129235112\"></p>\n<p>挖矿的过程实际上就是找一个随机数 nonce 和区块头里的其他信息合在一起作为输入得出的哈希值要小于等于某个指定的目标阈值的过程 H(block header) ≤ target. block header 即块头, 其内部有很多域其中一个域是我们可以设置的随机数 nonce. 不断的尝试 nonce 使得 H(block header) 获得的哈希值落到指定的范围之内即挖矿成功.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221130000113.png\" alt=\"20221130000113\"></p>\n<p>puzzle friendly 是指挖矿过程中没有捷径, 为了使得输出的值落在指定的范围内只能一个一个输入去试. 这个过程也可以作为工作量证明(proof of work)的依据. 然而一旦你挖出了矿, 其他人想要验证你挖矿的结果就很容易. 只需要做一次哈希证明 H(block header) ≤ target 即可.</p>\n<p>挖矿很难, 验证很容易. (difficult to solve, but easy to verify)</p>\n<p>比特币中用的哈希函数叫作 SHA-256(secure hash algorithm) 以上三个性质它都是满足的</p>\n<h2 id=\"比特币开户\"><a href=\"#比特币开户\" class=\"headerlink\" title=\"比特币开户\"></a>比特币开户</h2><p>在本地创建一套公私钥对(public key, private key)即可完成开户.</p>\n<p>公私钥匙对是来自于非对称的加密技术(asymmetric encryption algorithm), 其出现主要解决了对称加密过程中秘钥分发困难易被窃取的问题.</p>\n<p>两人之间信息的交流可以利用密钥(encryption key), A将信息加密后发给B,B收到后用密钥解密,因为加密和解密用的是同一个密钥, 所以叫对称加密. 前提是有渠道可以安全地把密钥分发给通讯的双方. 因此对称加密的缺点就是密钥的分发不方便,因为在网络上很容易被窃听. 非对称密钥是用一对密钥而不是一个,加密用公钥,解密用私钥,加密和解密用的都是接收方的公钥和私钥. 公钥是不用保密的,私钥要保密但是私钥只要保存在本地就行,不用传给对方. 公钥相当于银行账号,别人转账只要知道公钥就行,私钥相当于账户密码,知道私钥可以把账户上钱转走. 公钥和私钥是用来签名.</p>\n<p>加密: encryption(接收方公钥, 原文) &#x3D;&gt; 密文<br>解密: decryption(接收方私钥, 密文) &#x3D;&gt; 原文</p>\n<p>假如 A 想向 B 转 10 个比特币, A把交易放在区块链上, 别人怎么知道这笔交易是A发起的呢?这就需要A要用自己的私钥给交易签名, 其他人收到这笔交易后, 要用A的公钥去验证签名. 签名用私钥, 验证用公钥, 用的仍然是同一个人的. 创建账户产生相同公私钥的可能性微乎其微, 所以大量创建账户来窃取其他人账户是不可行的.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://baike.baidu.com/item/%E9%B8%BD%E7%AC%BC\">鸽笼原理</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%BD%A9%E8%99%B9%E8%A1%A8\">彩虹表</a></li>\n<li><a href=\"https://baike.baidu.com/item/sha256\">SHA-256</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">对称加密</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">非对称加密</a></li>\n</ul>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"3. 比特币的数据结构","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/3.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=3\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=3</a></p>\n<h2 id=\"哈希指针-hash-pointers\"><a href=\"#哈希指针-hash-pointers\" class=\"headerlink\" title=\"哈希指针(hash pointers)\"></a>哈希指针(hash pointers)</h2><p>普通的指针存储的是某个结构体在内存中的起始位置, 哈希指针除了保存结构体的起始地址还要保存结构体的哈希值. 通过哈希指针不仅能找到结构体的位置同时还能检测出结构体的内容是否被篡改过, 因为保存了其哈希值.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221130095633.png\" alt=\"20221130095633\"></p>\n<h2 id=\"区块链和普通的链表的区别\"><a href=\"#区块链和普通的链表的区别\" class=\"headerlink\" title=\"区块链和普通的链表的区别\"></a>区块链和普通的链表的区别</h2><ul>\n<li><p>用哈希指针代替了普通指针(Block chain is a linked list using hash pointers)</p>\n<p>  区块链的第一个区块叫作创世区块(genesis block)最后一个区块是最近产生的区块(most recent block) 每一个区块都包含了指向前一区块的哈希指针</p>\n<p>  <img src=\"https://handle-note-img.niubishanshan.top/20221201113513.png\" alt=\"20221201113513\"></p>\n<p>  一个区块的哈希指针是通过对前边区块的内容(包括hash pointer) 取哈希值产生的. 通过这种数据结构可以实现 tamper-evident log. 也就是说如果有人改变了一个区块的内容其后方区块的哈希指针就需要发生变化并且子子孙孙无穷尽. 并最终导致 most recent block 也发生变化…</p>\n</li>\n<li><p>普通链表可以改变任意一个元素, 对链表中其他元素是没有影响的. 而区块链是牵一发而动全身, 因为只需要保存最后一个哈希值, 就可以判断区块链有没有改变在哪里改变了.</p>\n<p>  基于此特性, 区块链中的一些节点可以只保存一部分节点就能保证其不可变性. 如果当前节点需要使用之前的区块可以向其他节点索取. 当提供区块的节点为恶意节点时会给你一个假的节点. 此时可以依据当前节点已经保存的 hash 值做一次对比来判断对方给的节点是否和本地存的 hash 一致即可.</p>\n<p>  <img src=\"https://handle-note-img.niubishanshan.top/20221201114911.png\" alt=\"20221201114911\"></p>\n</li>\n</ul>\n<h2 id=\"Merkle-tree-默克尔树\"><a href=\"#Merkle-tree-默克尔树\" class=\"headerlink\" title=\"Merkle tree(默克尔树)\"></a>Merkle tree(默克尔树)</h2><p>binary tree</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221201115302.png\" alt=\"20221201115302\"></p>\n<p>如上图, 最下边的一层是数据块(data blocks), 上面三层内部节点都是哈希指针(hash pointer). 其中第一层的节点成为根节点, 基于根节点取的哈希即为根哈希(root hash). 该数据结构的好处<strong>只要记住根哈希值, 就能检测出对树中任何部位的修改</strong></p>\n<p>比特币中各个区块之间用哈希指针连接在一起, 每个区块包含的交易又组成一个 Merkle tree 的形式. 其中最下边一行 data blocks 实际上就是一个一个的交易. 每个区块分为两个部分: block header 和 block body, 块头里面有根哈希值, 每个区块所包含的所有交易组成的 merkle tree 的根哈希值存在于区块的块头里面, 块头里没有交易的具体内容, 只有一个根哈希值. 交易内容都存在块体里.</p>\n<p>Merkle tree 的作用: 提供 Merkle proof</p>\n<h2 id=\"比特币中的节点\"><a href=\"#比特币中的节点\" class=\"headerlink\" title=\"比特币中的节点\"></a>比特币中的节点</h2><ul>\n<li>全节点 - 保存整个区块的内容 (block header + block body)</li>\n<li>轻节点 - 只保存区块头</li>\n</ul>\n<p>如何向一个轻节点证明某个交易是写入区块链的?</p>\n<p>找到交易所在的位置(最底行的其中一个区块), 这时该区块一直往上到根节点的路径就叫merkle proof.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221201144329.png\" alt=\"20221201144329\"></p>\n<p>上面一行是小型的区块链, 该图展现的是一个区块的 merkle tree, 最下面一行是包含的交易. 假设某个轻节点想知道图中黄色的交易, 是否包含在了 merkle tree 里面. 该轻节点没有包含交易列表, 没有这颗 merkle tree 的具体内容, 只有一个根哈希值. 这时轻节点向一个全节点发出请求, 请求证明黄色的交易被包含在这颗merkle tree里面的 merkle proof. 全节点收到这个请求之后, 只需要将图中标为红色的这三个哈希值发给轻节点即可. 有了这些哈希值之后, 轻节点可以在本地计算出图中标为绿色三个哈希值. 首先算出黄色交易的哈希值, 即它正上方的那个绿的哈希值, 然后跟旁边红色的哈希值拼接起来, 可以算出上层节点绿色的哈希值. 然后再拼接, 再算出上层绿色哈希值, 再拼接, 就可以算出整棵树的根哈希值. 轻节点把这个根哈希值和block header里的根哈希值比较一下, 就能知道黄色的交易是否在这颗 merkle tree 里</p>\n<p>全节点在 merkle proof 中提供的哈希值就是黄色交易所在节点到根节点的哈希值. 轻节点接收到整个 merkle proof 之后只需要从上向下验证沿途的哈希值都是正确的即可.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221201145252.png\" alt=\"20221201145252\"></p>\n<p>❓如果最下边一行的黄色交易被篡改它的 hash 值发生了变化后是否可以通过调整旁边的哈希值实现两者生成的哈希值和篡改前一致呢?</p>\n<p>答案是不可以的, 这相当于在<strong>人为创造哈希碰撞</strong>. 根据 collision resistance 性质. 午饭通过认为方式创造出哈希碰撞.</p>\n<p>merkle proof 可以证明 merkle tree 里面包含了某个交易, 所以这种证明又叫proof of membership或 proof of inclusion.</p>\n<p>对于一个轻节点来说, 验证一个 merkle proof 假设最底层有n个交易, 则 merkle proof 复杂程度是 θ(log(n))</p>\n<p>❓如何证明 Merkle tree 中没有包含某个交易? 即 proof of non-membership.</p>\n<p>把整棵树传给轻节点, 让其验证整棵树都是合法的. 每一层哈希都是正确的. 然后再从树的叶子节点中查找是否有给定的交易. 如果给定的交易存在于叶子节点中则说明包含该交易否则不包含. 该方法的复杂度为 θ(n)</p>\n<p>如果对树的所有叶子节点(交易内容)取一次哈希, 按照哈希值从小到大排列. 再把要校验的交易取一次哈希. 然后就有了一点二分查找的意思了. 排好序的叫作 sorted merkle tree. 比特币中没有用到这种排好序的 merkle tree, 因为比特币中不需要做不存在证明.</p>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"5. 比特币系统的实现","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/5.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=5\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=5</a></p>\n<p>区块链是一个去中心化的账本, 比特币采用了基于交易的账本模式(transaction-based ledger). 然而, 系统中并无显示记录账户包含比特币数, 实际上其需要通过交易记录进行推算. 在比特币系统中, 全节点需要维护一个名为 <strong>UTXO</strong>(Unspent Transaction Output尚未被花掉的交易输出)的数据结构. 用于记录比特币系统中尚未倍花出去的比特币的情况.</p>\n<p>UTXO 的运行过程如下示例</p>\n<ul>\n<li>A 有 8 个 BTC, 他给 B 转了 5 个, 给 C 转了 3 个. 此时 B 的 5 个和 C 的 3 个 BTC 都在 UTXO 中</li>\n<li>B 将自己的 5 个 BTC 转给了别人, 此时他的 BTC 会从 UTXO 中移除</li>\n<li>由于 C 始终没有花出自己的 BTC 所以他的 3 个 BTC一直存在于 UTXO 中</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102194529.png\" alt=\"20230102194529\"></p>\n<p>UTXO 中每个元素 (也就是还没有花的BTC) 要给出输出这个元素的交易的哈希值以及该元素是交易中的第几个输出. 同理, 通过这两个信息便可以定位到 UTXO 中的元素, 方便用户转账交易中到 UTXO 中查询所转 BTC 的合法性.</p>\n<h2 id=\"为什么要维护-UTXO\"><a href=\"#为什么要维护-UTXO\" class=\"headerlink\" title=\"为什么要维护 UTXO\"></a>为什么要维护 UTXO</h2><p>全节点要参与区块的构建, 构建区块过程中需要校验交易的合法性. 所以全节点都在内存中(快速校验)维护了 UTXO 集合. 判断一笔交易是否合法, 直接查一下交易想要花费的 BTC 是否在 UTXO 集合中, 如果想要花掉的 BTC 在 UTXO 集合中根本不存在则说明两种情况:</p>\n<ul>\n<li>这个 BTC 根本不存在</li>\n<li>这个 BTC 已经被花费过</li>\n</ul>\n<p>上述两种情况种的任何一种情况, 交易都为非法交易. 基于上述逻辑可以高效的检测出 double spending(双花攻击).</p>\n<h2 id=\"UTXO-工作流程\"><a href=\"#UTXO-工作流程\" class=\"headerlink\" title=\"UTXO 工作流程\"></a>UTXO 工作流程</h2><blockquote>\n<p>每笔交易都会消耗 UTXO 集合中的输出, 同时也会产生新的输出.</p>\n</blockquote>\n<p>例如, 上例中 A -&gt; B: 5 BTC, B -&gt; D: 5 BTC. 虽然 B 的 BTC 已经从 UTXO 移除了, 但是 D 的 BTC 加入到了集合中.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102200409.png\" alt=\"20230102200409\"></p>\n<p>如果有人收到了一笔 BTC 转账, 但是一直不花那么这笔转账的 BTC 会一直存在于 UTXO 中.</p>\n<h2 id=\"交易费\"><a href=\"#交易费\" class=\"headerlink\" title=\"交易费\"></a>交易费</h2><p>每个交易都会有输入也会有输出, 往往交易的输出之和要小于输入之和. 这里的部分差额就作为获取记账权的节点帮你记账所要收取的手续费. 这笔手续费作为矿工住了铸币交易之外的收益. 目前交易费的收入远远小于出块奖励. 但是根据比特币系统的规则, 以后的出块奖励会越来越少, 所以交易费可能会占越来越大的比重.</p>\n<h2 id=\"出块奖励\"><a href=\"#出块奖励\" class=\"headerlink\" title=\"出块奖励\"></a>出块奖励</h2><p>比特币系统中, 每产生 21 万个区块 BTC 出块奖励就会减半. 大约为每 4 年出块奖励就会减半.</p>\n<p>比特币是基于交易的模式, 与之对应还有一种基于账户的模式(以太坊). 基于账户的模式要求, 系统中显式的记录账户的余额. 也就是说可以直接查询当前账户有多少钱.</p>\n<p>比特币隐私保护性好, 但是每次转账时要说明币的来源 (UTXO) 来防止双花. 而基于账户的模式则天然规避了这个问题. 转账就是一个(或多个)账户的余额减小, 另外一个(或多个)账户余额增加的过程.</p>\n<h2 id=\"BTC-具体区块信息\"><a href=\"#BTC-具体区块信息\" class=\"headerlink\" title=\"BTC 具体区块信息\"></a>BTC 具体区块信息</h2><p>区块浏览器<a href=\"https://www.blockchain.com/explorer/blocks/btc/529709\">地址</a></p>\n<p>对应的中文版本<a href=\"https://blockchair.com/zh/bitcoin/block/529709\">地址</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102214913.png\" alt=\"20230102214913\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102220553.png\" alt=\"20230102220553\"></p>\n<h2 id=\"什么是挖矿\"><a href=\"#什么是挖矿\" class=\"headerlink\" title=\"什么是挖矿\"></a>什么是挖矿</h2><p>如上图所示, 区块哈希和前一区块的哈希都是一串 0 开头的. 挖矿的本身就是尝试各种 nonce, 使得产生的区块哈希值小于目标值, 这个目标值表示成 16 进制的话也是前边一串 0.</p>\n<p>根据 BTC 源码, nonce 是一个 32 位的无符号整形数据. 在挖矿过程中矿机通过不断地调整 nonce 进行. nonce 的取值最多为 2 ** 32 个. 但是不一定把这些可能性的 case 都尝试一遍就一定能找到合适的结果. 那咋办呢?</p>\n<h2 id=\"调整-Merkle-Tree-root-hash\"><a href=\"#调整-Merkle-Tree-root-hash\" class=\"headerlink\" title=\"调整 Merkle Tree root hash\"></a>调整 Merkle Tree root hash</h2><p><img src=\"https://handle-note-img.niubishanshan.top/20230102221607.png\" alt=\"20230102221607\"></p>\n<p>如上图, 如果仅仅通过调整 nonce 不够用时. 可以通过调整 Merkle Tree 的根哈希实现. 但是原则上讲打包的交易和顺序确定了, 跟哈希值就确定了. 看上去就无法修改了.</p>\n<p>其实, 旷工除了打包普通的交易之外. 每次发布区块的区块奖励实际上是构造了一笔铸币交易(coinBase), 而铸币交易也要打包到当前区块中. 下图是铸币交易的描述</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102221921.png\" alt=\"20230102221921\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102221932.png\" alt=\"20230102221932\"></p>\n<p>铸币交易中有个 coinBase 域, 可以写入任何内容. 那么矿工就可以通过修改写入 coinBase 域的内容实现 Merkle Tree root hash 的调整. 从而计算出满足挖矿需求的 hash</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623105925.png\" alt=\"20240623105925\"></p>\n<p>如图所示, 修改 tx 的 coinBase 域, 交易的哈希值发生变化. 该变化会沿着默克尔树往上转移, 并最终影响到 Merkle Root 的根哈希. 在实际的挖矿中包含两层循环. 外层循环调整 coinBase 域 (可以规定只将其中前x个字节作为另一个nonce) 算出 block header 中根哈希值后, 内层循环再调整nonce.</p>\n<h2 id=\"普通转账交易\"><a href=\"#普通转账交易\" class=\"headerlink\" title=\"普通转账交易\"></a>普通转账交易</h2><p><img src=\"https://handle-note-img.niubishanshan.top/20240623110316.png\" alt=\"20240623110316\"></p>\n<p>交易合法性的验证: 将前一笔交易的输出脚本和当前交易的输入脚本拼接之后执行. 如果可以正常执行且没有报错说明交易合法 ~</p>\n<h2 id=\"挖矿过程的概率分析\"><a href=\"#挖矿过程的概率分析\" class=\"headerlink\" title=\"挖矿过程的概率分析\"></a>挖矿过程的概率分析</h2><p>挖矿的本质是不断尝试各种 nonce 来求解 puzzle, 每次尝试都是一次伯努利实验. 类似于抛硬币, 正反面朝上的概率分别为 p 和 1 - p. 一次伯努利实验中成功的概率极小, 失败的概率极大. 挖矿的过程就是进行多次伯努利实验且每次随机. 这些伯努利实验构成了一系列独立的伯努利实验. 然而由于伯努利实验本身没有记忆性. 这一次的成功和失败并不会影响下一次实验的结果. 就像买彩票, 你很多次不中奖并不影响你下次中奖的概率.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623111821.png\" alt=\"20240623111821\"></p>\n<blockquote>\n<p>比特币系统的平均出块时间为 10min, 由比特币系统设计. 通过调整挖矿难度实现出块时间在 10min 左右. 比方说当前比特币系统中矿工较多, 全网算力比较大, 那么就调高难度. 如果当前比特币系统中矿工较少, 算力变小则调低挖矿难度. 比特币系统调整挖矿难度的时机是每出块 2016 个时. 系统查看目前的 2016 个块的出块时间(理论上是 20160 分钟, 也就是两周). 如果总时常小于两周, 说明当前算力大于预期需要调高难度. 反之调低.</p>\n</blockquote>\n<p>由于指数分布的无记忆性, 对于比特币系统来说. 就算当前已经过去了 10min 还是没有矿工挖到区块, 那么所有矿工仍然需要平均等待 10min. 就像北京小汽车摇号, 你本次没有摇到下次并不代表你马上就要摇到. 同理将来你需要挖多长时间和你已经挖了多长时间没有关系(progress free).</p>\n<p>progress free: 比如一个矿工的算力是另外一个矿工的 10 倍, 由于 progress free 的特性, 算力强的矿工尝试 nonce 的数度是后者的十倍也就是说他获得记账权的概率是后者的 10 倍, 如果不是 progress free 的话, 算力强的矿工过去尝试了更多的 nonce 那么以后他获得记账权的概率就会增大. 造成不成比例的记账权优势.</p>\n<h2 id=\"比特币总量计算\"><a href=\"#比特币总量计算\" class=\"headerlink\" title=\"比特币总量计算\"></a>比特币总量计算</h2><blockquote>\n<p>每 21 万个比特币, 出块奖励就会减半. 比特币的稀缺性是人为造成的</p>\n</blockquote>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623120557.png\" alt=\"20240623120557\"></p>\n<p>根据上图中的规则, 最终可以发行的比特币只有 2100万枚. 挖矿求解 puzzle 的本身是没有意义的, 但是挖矿的过程对于维护比特币系统的安全性是至关重要的.</p>\n<p>只要大部分算力是掌握在诚实的节点手上的话, 便能确保比特币系统的稳定性.</p>\n<p>随着出块奖励的降低, 手续费在促进矿工挖矿的占比将越来越大 ~</p>\n<h2 id=\"比特币的安全性分析\"><a href=\"#比特币的安全性分析\" class=\"headerlink\" title=\"比特币的安全性分析\"></a>比特币的安全性分析</h2><blockquote>\n<p>多数算力掌握在诚实的节点中, 能否保证不良交易记录不被写入到区块链?</p>\n<p>实际上算力低的节点并不是完全不能获得记账权, 他们获取记账权的概率相对于算力高的节点更低而已. 因此, 即使是算力较低的恶意节点也有概率能够获取到记账权.</p>\n</blockquote>\n<h3 id=\"能否“偷币”\"><a href=\"#能否“偷币”\" class=\"headerlink\" title=\"能否“偷币”\"></a>能否“偷币”</h3><p>恶意节点能不能把别人的币转给自己?</p>\n<p>不能, 因为恶意节点无法获取到他人的私钥, 故无法伪造出别人的签名. 如果恶意节点强行在区块中写入该交易. 大多数诚实的节点验证该区块不合法后并不会认可该区块. 并继续沿着该区块的父级区块继续挖矿. 随着时间的推移拥有大算力的诚实节点将会沿着老的父级区块形成新的“最长合法链”. 恶意节点发布的区块将成为孤块而被抛弃. 对于攻击者来说, 既没有得到比特币也没有得到区块奖励. 白白浪费电 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623122457.png\" alt=\"20240623122457\"></p>\n<h3 id=\"能否把自己花过的钱在花一遍\"><a href=\"#能否把自己花过的钱在花一遍\" class=\"headerlink\" title=\"能否把自己花过的钱在花一遍\"></a>能否把自己花过的钱在花一遍</h3><blockquote>\n<p>我能否把转给你的 BTC 再转给自己?</p>\n</blockquote>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623122912.png\" alt=\"20240623122912\"></p>\n<p>如图, 在上方区块中 M 把 BTC 转给了 A, 但是在下方的区块中 M 又把转给 A 的 BTC 转给了自己的小号. 同时由于 M 掌握了记账权, 实现了转给 A 的交易的回滚. 然而, 如果攻击者想要回滚的区块不是当前区块链的最后一个区块, 攻击的难度会更大 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623123412.png\" alt=\"20240623123412\"></p>\n<p>如图, 如果 M 想要回滚给 A 的转账, 不仅需要修改 <code>M - A</code> 这个区块, 还需要回滚后续的几个区块来构造出新的“最长合法链”, 否者多数诚实节点不会认可其发布的 <code>M - M</code> 节点.</p>\n<p>因此, 一种简单的防范恶意节点的方式便是多等几个区块的确认, 比特币系统中, 如果交易经过了 6 个区块的确认(1 小时)就会被认为是不可篡改的. 也就是说, 刚刚写入区块链的内容是有可能被修改的, 经过一段时间之后被篡改的概率就会大幅下降(因为改动需要的算力成本更高了).</p>\n<h3 id=\"能否故意不打包合法交易\"><a href=\"#能否故意不打包合法交易\" class=\"headerlink\" title=\"能否故意不打包合法交易\"></a>能否故意不打包合法交易</h3><p>可以, 但是后续的区块可能会包含该交易. 实际运行过程中, 可能存在某个时间段交易数量变多一个区块放不下这么多交易的场景. 在这种场景下就会存在当前发布的交易不会被立刻打包的情况, 这个时候后续的节点会打包该交易 ~</p>\n<h3 id=\"selfish-mining\"><a href=\"#selfish-mining\" class=\"headerlink\" title=\"selfish mining\"></a>selfish mining</h3><p>提前挖到区块但是不发布, 继续挖下去. 等到要攻击的交易等了 6 次确认之后再发布, 试图回滚原来的记录. 这种情况需要恶意节点掌握了系统中半数以上(实际不止半数以上)的算力才行. 否则肯定竞争不过多数的诚实节点.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623130932.png\" alt=\"20240623130932\"></p>\n<p>如图, 某个节点挖到了一个区块之后先不广播, 而是基于自己挖出来的区块继续挖. 直到别人挖出来第一个区块时候我同时发布两个区块. 这样你还是最长的链. 然而别的矿工挖了半天白玩儿了. 然而, 想要搞这样的套路需要你掌握了足够优势的算力. 要不, 你一个人挑战全网, 有可能你还没有挖出第二个区块人家别人挖出来了. 造成你“隐藏链”不如人家公布出来的链长. 你自作聪明了 ~</p>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"4. 比特币的共识协议","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/4.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=4\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=4</a></p>\n<h2 id=\"双花攻击-double-spending-attack\"><a href=\"#双花攻击-double-spending-attack\" class=\"headerlink\" title=\"双花攻击 (double spending attack)\"></a>双花攻击 (double spending attack)</h2><p>数字货币本质上是带有签名的数据文件, 可以进行复制和备份. 也就是说, 我可以把自己的钱复制一份, 先花给一个人再把备份花给另外一个人.</p>\n<p>传统的解决双花问题的方案, 数字货币的发行由中心化机构完成. 每次发行的货币都包含一个编号, 每次支付都要经过货币发行方的认证来查询真伪. 该方法依赖第三方机构来判断数字货币的真实性来解决双花问题, 是一个典型的中心化方案. 现实生活中 Alipay Wechat 应该用的就是类似的方案. 由于他们有比较高的可信度或者有政府背书, 即可采用这种方案…</p>\n<p>然而, 有些场景下(如跨国交易). 并不存在这样可依赖的第三方机构. 此时以去中心化思想为核心的比特币便吸引了人们的注意…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数字货币的发行❓\"><a href=\"#数字货币的发行❓\" class=\"headerlink\" title=\"数字货币的发行❓\"></a>数字货币的发行❓</h2><p>数字货币由谁发行? 通过怎样的方式发行? 发行的数量和时间?</p>\n<p>在传统的货币体系中, 货币的发行由央行完成. 在去中心化的思想中各个节点平等, 没有了作为信用第三方的央行. 货币发行权的分配显得尤为重要.</p>\n<blockquote>\n<p>在比特币系统中由挖矿来决定货币发行权和发行量</p>\n</blockquote>\n<h2 id=\"怎样验证交易的有效性-解决双花攻击❓\"><a href=\"#怎样验证交易的有效性-解决双花攻击❓\" class=\"headerlink\" title=\"怎样验证交易的有效性, 解决双花攻击❓\"></a>怎样验证交易的有效性, 解决双花攻击❓</h2><p>没有了可信任的中心化第三方机构后, 比特币系统中通过全体用户共同维护一个区块链的数据结构来记录货币的使用情况保证交易的有效性.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221202103659.png\" alt=\"20221202103659\"></p>\n<p>如上图, 假定 A 获得铸币权 (Create Coin) 并且通过铸币交易(coinbase tx)发布了 10 个比特币.</p>\n<ul>\n<li>A 将 10 个比特币分别转给了 B(5 个比特币), C(5 个比特币). A 对该交易进行了签名并且指明了该交易所花比特币的来源 - 来自铸币交易</li>\n<li>B 将自己的 5 个比特币转给 C(2 个比特币), D(3 个比特币). B 对交易进行签名并且指明了该交易所花比特币的来源 - 来自第一笔交易</li>\n<li>C 将自己的比特币转给 E(7 个比特币), C 对该交易进行了签名并且指明了该交易所花比特币的来源 - 来自第一笔交易 + 第二笔交易</li>\n</ul>\n<p>图中有两种类型的指针:</p>\n<ul>\n<li>一种是链接各个区块的把各个区块串联成了一个完整的链表.</li>\n<li>还有一种是指向前面某个交易的指针, 用来说明币的来源而非凭空捏造(或复制)的. 这样就可以防止双花攻击.</li>\n</ul>\n<p>在比特币系统中, 通过执行脚本实现上述验证过程. 将当前交易输入脚本与前一个交易输出脚本(说明币的来源的交易) 拼接执行, 如果可以正确执行, 说明交易合法</p>\n<h2 id=\"区块信息\"><a href=\"#区块信息\" class=\"headerlink\" title=\"区块信息\"></a>区块信息</h2><p>节点类型:</p>\n<ul>\n<li>full node (fully validating node)</li>\n<li>light node (无法独立验证交易的合法性)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>block header(区块链宏观信息)</th>\n<th>block body</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>version(版本)</td>\n<td>交易列表</td>\n</tr>\n<tr>\n<td>Hash of previous block header(指向前一个区块指针)</td>\n<td>交易列表</td>\n</tr>\n<tr>\n<td>Merkle root hash(默克尔树根哈希值)</td>\n<td>交易列表</td>\n</tr>\n<tr>\n<td>target(挖矿难度目标阈值)</td>\n<td>交易列表</td>\n</tr>\n<tr>\n<td>nonce(随机数)</td>\n<td>交易列表</td>\n</tr>\n</tbody></table>\n<ul>\n<li>挖矿过程中求解的问题: H(block header) &lt;&#x3D; target</li>\n<li>其中前一个区块的哈希只算前一区块的块头, Merkle root hash 保证了区块体内容不会被篡改, 所以只需要记录 block header 就能保证整个区块链不会被篡改<br><img src=\"https://handle-note-img.niubishanshan.top/20221202113046.png\" alt=\"20221202113046\"></li>\n<li>区块链系统中, 轻节点只存储区块block header信息, 不参与区块链系统维护和构造, 也无法独立验证交易的合法性.</li>\n</ul>\n<h2 id=\"分布式共识-distributed-consensus\"><a href=\"#分布式共识-distributed-consensus\" class=\"headerlink\" title=\"分布式共识 (distributed consensus)\"></a>分布式共识 (distributed consensus)</h2><p>distributed hash table, 系统中很多机器共同维护一份哈希表.</p>\n<p>可不可以各个节点独立完成区块链的构建?</p>\n<p>显然是不行的, 各个节点独立打包交易形成区块链. 无法避免不同的节点生成的区块链不一致. 从分布式系统的角度考虑的话, 账本内容需要取得分布式共识. 从而保证区块链内容在不同节点上的一致性.</p>\n<h3 id=\"impossibility-result\"><a href=\"#impossibility-result\" class=\"headerlink\" title=\"impossibility result\"></a>impossibility result</h3><p><strong>FLP impossibility result</strong>: 再一个异步系统中, 网络传输延迟没有上限. 哪怕系统中只有一个成员是异常成员. 整个系统也不能达成共识.</p>\n<p><strong>CAP Theorem</strong>: Consistency 一致性, Availability 可靠性, Partition tolerance 容错性. 再任何一个分布式系统中最多只能满足其中两个性质.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221229013211.png\" alt=\"20221229013211\"></p>\n<p>分布式共识中协议 Paxos 可以保证 Consistency 若达成共识必然一致. 但是在某种特殊情况下可能无法达成共识.</p>\n<h2 id=\"比特币共识协议-Consensus-in-BitCoin\"><a href=\"#比特币共识协议-Consensus-in-BitCoin\" class=\"headerlink\" title=\"比特币共识协议 (Consensus in BitCoin)\"></a>比特币共识协议 (Consensus in BitCoin)</h2><blockquote>\n<p>假设系统中存在部分恶意节点, 但是存在的比例很小. 大多数节点都是 “好” 的节点, 这种情况下进行共识协议设置.</p>\n</blockquote>\n<h3 id=\"直接投票\"><a href=\"#直接投票\" class=\"headerlink\" title=\"直接投票\"></a>直接投票</h3><p>某个节点打包交易得到区块, 将其发给其他节点. 其他节点检查区块, 如果内容正确则投出赞成票. 如果票数过半加入区块链.</p>\n<h4 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h4><ol>\n<li>恶意节点不断打包不合法的区块, 导致一直无法达成共识, 时间全部花费在验证上交易无法完成</li>\n<li>没有强迫投票的手段, 某些节点可能恶意不投票</li>\n<li>网络延迟事先未知, 无法确定投票的实现. 影响效率</li>\n<li>membership, 如果是联盟链对于加入的成员有要求可以基于投票.但是比特币系统中任何人都可以加入, 而且创建账户非常简单. 黑客可以创建非常多的账户(公私钥对), 当数量达到比特币系统中的一半以上的时候就可以获得系统中的支配地位(女巫攻击 Sybil Attack).</li>\n</ol>\n<p>综上所述, 投票的方案是不可行的.</p>\n<h3 id=\"基于算力投票\"><a href=\"#基于算力投票\" class=\"headerlink\" title=\"基于算力投票\"></a>基于算力投票</h3><blockquote>\n<p>鉴于基于账户直接投票的方式存在上述的诸多问题, 比特币系统采用了另外一种投票的方式 - 基于算力的投票</p>\n</blockquote>\n<p>在比特币系统中, 每个节点都可以自行组装一个候选区块, 而后尝试各种 nonce 值使得 H(block header) &lt; target 这个过程就是挖矿. 当节点找到合法的 nonce 便算作是获取了<strong>记账权</strong>, 而后将该节点发布到区块链系统中. 其他节点收到候选区块后会验证区块的合法性. 如果候选区块得到了系统中多数节点的验证就会被加入到区块链中.</p>\n<p>求解 nonce 的过程是 puzzle friendly 的过程, 前一次计算的结果不会对后一次计算有任何帮助. 所以每个节点都需要通过不断地尝试 nonce 来争夺记账权. 假设有两个节点, 节点 A 的算力是 B 的 10 倍. 那么在相同时间内节点 A 就有 10 倍与 B 的可能性算出合适的 nonce. 这种理论上算力大就能更优先的获取记账权的方式被称为基于算力的投票.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102184732.png\" alt=\"20230102184732\"></p>\n<h4 id=\"可能存在的问题\"><a href=\"#可能存在的问题\" class=\"headerlink\" title=\"可能存在的问题\"></a>可能存在的问题</h4><h5 id=\"forking-attack-分叉攻击\"><a href=\"#forking-attack-分叉攻击\" class=\"headerlink\" title=\"forking attack(分叉攻击)\"></a>forking attack(分叉攻击)</h5><blockquote>\n<p>通过往区块链中间位置插入一个区块. 实现回滚某个已经发生了的交易</p>\n</blockquote>\n<p>假设一个获得记账权的节点发布了一个合法的区块, 但是它是插在中间位置的(基于hash of prev block). 如下图, A 给 B 转了 BTC, 但是 A 又转给自己相同的钱, 并且构造了新的区块回滚了转钱给 B 的交易. 但是 A -&gt; A’ 的交易并没有在<strong>最长合法链</strong>上, 所以不会被系统中的其他节点认可</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102190524.png\" alt=\"20230102190524\"></p>\n<h5 id=\"合法的区块被拒绝\"><a href=\"#合法的区块被拒绝\" class=\"headerlink\" title=\"合法的区块被拒绝\"></a>合法的区块被拒绝</h5><p>如果两个节点同时获得记账权(几乎相同的时间), 就会出现两个等长的分叉. 按照最长合法链的原则两个区块都在最长的合法链上. 不同节点会根据自己最先接收到的区块作为最新块进行下一个区块的开发. 所以区块链系统中会暂时保存分叉的情况. 随着时间的推移必然会出现某条分叉变成最长的合法链, 这样就可能导致合法的区块也被拒绝.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102191335.png\" alt=\"20230102191335\"></p>\n<h2 id=\"争夺记账权\"><a href=\"#争夺记账权\" class=\"headerlink\" title=\"争夺记账权\"></a>争夺记账权</h2><blockquote>\n<p>比特币系统引入了激励机制, 每个获取记账权的节点在区块成功上链后就会获取一份出块奖励. 除了节点打包的一堆交易之外还会添加一笔新的交易即铸币交易. 铸币交易也作为产生新的比特币的唯一途径.</p>\n</blockquote>\n<p>对于铸币交易产生的新的比特币的数量, 在比特币系统中也有明确规定. 起初每次出块奖励比特币 50 个, 字后每隔 21 万个区块出块奖励就会减半.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20230102192931.png\" alt=\"20230102192931\"></p>\n<p>除了铸币交易中获得的新 BTC 外, 节点在打包交易过程中还会取得交易的手续费(gas). 所以对于用户而言, 交易的输入是 &gt;&#x3D; 输出的. 差值就是交给节点的手续费.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://my.oschina.net/u/150175/blog/2992187\">分布式理论：深入浅出 Paxos 算法</a></li>\n</ul>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"6. 比特币网络","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/6.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%BD%91%E7%BB%9C/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=6\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=6</a></p>\n<p>比特币通过的过程:</p>\n<ul>\n<li>用户发送交易到<strong>比特币网络</strong></li>\n<li>节点收到交易后打包到区块中</li>\n<li>节点将打包的区块广播给比特币网络中的其他节点</li>\n</ul>\n<h2 id=\"比特币网络的工作原理\"><a href=\"#比特币网络的工作原理\" class=\"headerlink\" title=\"比特币网络的工作原理\"></a>比特币网络的工作原理</h2><span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623132338.png\" alt=\"20240623132338\"></p>\n<p>比特币工作于应用层, 它的下一层(网络层)是一个 P2P Overlay Network. 在比特币系统中所有的节点完全对等, 不存在超级节点(super node).</p>\n<ul>\n<li>节点想要加入比特币网络至少需要知道一个种子节点, 并通过种子节点的值它所知道的其他节点.</li>\n<li>节点想要离开比特币网络, 自行退出即可. 其他节点在一段时间之后没有收到该节点的消息就会将起删掉</li>\n<li>为了便于穿透防火墙节点之间通过 TCP 通信</li>\n</ul>\n<h2 id=\"比特币网络的设计原则\"><a href=\"#比特币网络的设计原则\" class=\"headerlink\" title=\"比特币网络的设计原则\"></a>比特币网络的设计原则</h2><p>simple, robust, but efficent</p>\n<ul>\n<li>简单</li>\n<li>鲁棒(健壮性)</li>\n<li>非高效</li>\n</ul>\n<p>每个节点会维护一个邻居节点的集合, 当节点得到消息之后会将消息广播发送给所有的邻居节点. 邻居节点的选取随机, 不会考虑物理地址和网络拓扑结构. 该网络模型具备强鲁棒性, 但是网络效率不高.</p>\n<p>在比特币系统中, 每个节点都会维护一个等待上链的交易集合. 如果节点接受到一个合法的交易就会告诉自己的邻居节点. 假设存在两个冲突交易:</p>\n<ul>\n<li>交易 1: A -&gt; B</li>\n<li>交易 2: A -&gt; C<br>假设两个交易使用了相同的 UTXO 当节点收到 A -&gt; C 的交易时, 节点会认为该交易为非法交易. 并不会加入到待处理列表.</li>\n</ul>\n<p>但是如果某个节点虽然先听到了 <code>A -&gt; B</code> 的转账, 但是又听到了 <code>A -&gt; C</code> 的交易<strong>已经上链了</strong>, 那么节点就会认为 <code>A -&gt; B</code> 的交易为非法交易, 则在等待处理的交易中移除该交易.</p>\n<blockquote>\n<p>区块越大, 网络传播的时间越长. 同时区块越小, 区块中可以包含的交易就越少</p>\n</blockquote>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"7. 比特币的挖矿难度调整","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/7.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E6%8C%96%E7%9F%BF%E9%9A%BE%E5%BA%A6%E8%B0%83%E6%95%B4/","content":"<p>本节视频 <a href=\"https://www.bilibili.com/video/BV1Vt411X7JF/?p=7\">https://www.bilibili.com/video/BV1Vt411X7JF/?p=7</a></p>\n<p>比特币挖矿的比较公式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">H</span>(block header) &lt;= target</span><br></pre></td></tr></table></figure>\n\n<p>如上边的伪代码, 挖矿的本质就是不断调整 block header 中的 nonce 值, 使得极端出来的 block header 的 hash 值小于某个给定的目标值(其中 target 就是给定的目标值, target 越小说明挖矿的难度越大). 对挖矿难度的调整等同于调整了目标空间在整个输出空间中所占比例的大小.</p>\n<p>比特币系统使用的哈希算法为 SHA 256, 整个输出空间的大小为 2 ** 256, 调整目标空间在输出空间中的比例大小是通过调整输出的哈希值前有多少个 0 实现的.</p>\n<span id=\"more\"></span>\n\n<p>挖矿难度和目标阈值成反比, 如公式:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623150024.png\" alt=\"20240623150024\"></p>\n<p>difficuty_1_target: 代表挖矿难度为 1 时的目标阈值. 是一个非常大的数.</p>\n<h2 id=\"为什么要调整比特币的挖矿难度\"><a href=\"#为什么要调整比特币的挖矿难度\" class=\"headerlink\" title=\"为什么要调整比特币的挖矿难度\"></a>为什么要调整比特币的挖矿难度</h2><p>系统算力越来越强, 若挖矿难度不做调整, 则出块时间会越来越短.</p>\n<ul>\n<li>好处, 交易可以更快速的被写入链上:<ul>\n<li>提高了系统响应速度</li>\n<li>增加了区块链效率</li>\n</ul>\n</li>\n<li>坏处, 出块时间太短:<ul>\n<li>如果出块时间只需要 1s 但是传播时间需要 10s, 会导致系统中的节点经常处于不一致的状态. 进而出现分叉</li>\n<li>分叉过多不利于系统达成共识. 造成算力分散</li>\n<li>由于算力分散, 导致黑客攻击成本降低(不再需要整个系统算力的 51%)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623150917.png\" alt=\"20240623150917\" title=\"有了多个分叉之后, 攻击变得简单\"></p>\n<p>如图, 原本只有两个分叉的时候黑客需要拥有 51% 算力才能实现交易的回滚交易. 但是如果系统由于多个分叉导致了算力分散, 那么黑客仅需要拥有大于其他分叉的算力就能实现攻击.</p>\n<h2 id=\"BTC系统如何调整挖矿难度\"><a href=\"#BTC系统如何调整挖矿难度\" class=\"headerlink\" title=\"BTC系统如何调整挖矿难度\"></a>BTC系统如何调整挖矿难度</h2><p>在比特币系统中, 每生成 2016 个区块就会调整一次难度. 所需市场大约为 20160 分钟 &#x2F; 60 &#x2F; 24 &#x3D; 14(天). 也就是说每两个星期调整一次.</p>\n<p>调整公式:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240623151702.png\" alt=\"20240623151702\"></p>\n<ul>\n<li>expected time 就是 <code>2016 * 10 = 20160(分钟)</code></li>\n<li>actual time 为最近 2016 个区块实际花费的时间</li>\n</ul>\n<p>对应的挖矿难度计算公式:<br><img src=\"https://handle-note-img.niubishanshan.top/20240623154335.png\" alt=\"20240623154335\"></p>\n<p>如果最近 2016 个区块所消耗的时间大于两周, 则 actual time &#x2F; expected time &gt; 1. taregt * 一个大于 1 的数则会变大. 由于 target 和挖矿难度成反比, 此时挖矿难度就会降低. 反之一样 ~</p>\n<p>在实际代码中, 上调和下调都有 4 倍的限制. 也就是说 actual time 的实际范围为: <code>[0.5个星期, 8个星期]</code>. 为了避免系统中的意外情况导致 target 有巨大的变动.</p>\n<h2 id=\"矿工作恶不认可难度调整\"><a href=\"#矿工作恶不认可难度调整\" class=\"headerlink\" title=\"矿工作恶不认可难度调整\"></a>矿工作恶不认可难度调整</h2><p>如果恶意节点故意不调整挖矿难度, 仍然采用低难度挖矿. 其产生的区块 block header 的 nbits 域校验就不会通过, 不会被大多数诚实节点认可. 产生的区块无效 ~</p>\n<blockquote>\n<p>target 为 256 位, nbits 为 32 位. block header 中没有直接存储 target 而是存储了占用空间更小的 nbits 来实现挖矿难度的校验</p>\n</blockquote>\n","categories":["学习笔记","区块链技术与应用"],"tags":["笔记"]},{"title":"CSRF","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/CSRF/","content":"<h2 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cross Site request forgery</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文名称\"><a href=\"#中文名称\" class=\"headerlink\" title=\"中文名称\"></a>中文名称</h2><p>跨站请求伪造</p>\n<h2 id=\"常见危害\"><a href=\"#常见危害\" class=\"headerlink\" title=\"常见危害\"></a>常见危害</h2><p>执行恶意操作(被转账, 被发垃圾评论…), 制造蠕虫…</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>利用用户已登录的身份, 在用户毫不知情的情况下, 以用户的名义执行非法操作</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-13-51-26.png\" alt=\"2020-02-15-13-51-26\"></p>\n<p>原理分析<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-13-56-37.png\" alt=\"2020-02-15-13-56-37\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-13-58-19.png\" alt=\"2020-02-15-13-58-19\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-13-59-15.png\" alt=\"2020-02-15-13-59-15\"></p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"SQL 注入","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/SQL-%E6%B3%A8%E5%85%A5/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>SQL 注入, 又叫 SQL Injection. 是一种常见的 web 安全漏洞. 是指 web 应用程序对用户输入数据的合法性没有判断或过滤不严, 攻击者可以在 web 应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句, 在管理员不知情的情况下实现非法操作, 以此来实现欺骗数据库服务器执行非授权的任意查询, 从而进一步得到相应的数据信息的攻击方式</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-02-49.png\" alt=\"2020-03-01-17-02-49\"></p>\n<h2 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h2><p><strong>数据</strong>和<strong>代码</strong>未分离, 把数据当成代码来执行了…</p>\n<h2 id=\"万能密码\"><a href=\"#万能密码\" class=\"headerlink\" title=\"万能密码\"></a>万能密码</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>正常用户登录过程<br>前端交互<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-16-51-26.png\" alt=\"2020-03-01-16-51-26\"></p>\n<p>后端处理逻辑<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-16-57-56.png\" alt=\"2020-03-01-16-57-56\"></p>\n<p>黑客的登录过程<br>前端交互<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-16-52-24.png\" alt=\"2020-03-01-16-52-24\"></p>\n<p>后端处理逻辑<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-16-59-33.png\" alt=\"2020-03-01-16-59-33\"></p>\n<p>两者对比<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-16-53-04.png\" alt=\"2020-03-01-16-53-04\"></p>\n<h3 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h3><ul>\n<li>获取用户请求参数</li>\n<li>将用户端发来的请求参数直接用于拼接 SQL</li>\n<li>执行 SQL</li>\n</ul>\n<h3 id=\"必备条件\"><a href=\"#必备条件\" class=\"headerlink\" title=\"必备条件\"></a>必备条件</h3><ul>\n<li>可以控制的输入数据</li>\n<li>服务器要执行的代码拼接了控制的数据</li>\n</ul>\n<h2 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h2><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><ul>\n<li>获取管理员 or 其他用户的用户名密码等敏感信息</li>\n<li>拖库</li>\n</ul>\n<h3 id=\"获取服务器权限\"><a href=\"#获取服务器权限\" class=\"headerlink\" title=\"获取服务器权限\"></a>获取服务器权限</h3><ul>\n<li>植入webshell, 获取服务器后门</li>\n<li>读取服务器敏感文件</li>\n<li>万能密码</li>\n<li>…</li>\n</ul>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"URL 跳转漏洞","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/url%20%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>URL 跳转漏洞, 就是利用没有验证功能的 Url 跳转能力, 将应用引导到不安全<br>的第三方区域.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-19-56-30.png\" alt=\"2020-02-15-19-56-30\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><ul>\n<li>header 跳转</li>\n<li>JavaScript 跳转</li>\n<li>Meta 标签跳转</li>\n</ul>\n<h2 id=\"防范\"><a href=\"#防范\" class=\"headerlink\" title=\"防范\"></a>防范</h2><p>跳转前要检验待跳转的 url 是否是合法的, 通过添加白名单控制</p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"命令注入","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/","content":"<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-12-07.png\" alt=\"2020-03-01-17-12-07\"></p>\n<span id=\"more\"></span>\n\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看本地网络</td>\n<td>ipconfig</td>\n</tr>\n<tr>\n<td>查看系统用户</td>\n<td>net user</td>\n</tr>\n<tr>\n<td>查看目录</td>\n<td>dir “{path}”</td>\n</tr>\n<tr>\n<td>字符串查找</td>\n<td>find ‘hello’ .&#x2F;text.txt (在 text.txt 文件中查找 hello 的行)</td>\n</tr>\n</tbody></table>\n<h3 id=\"复合命令\"><a href=\"#复合命令\" class=\"headerlink\" title=\"复合命令\"></a>复合命令</h3><p>命令拼接 <strong>&amp;</strong> 依次执行拼接的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#x27;hello&#x27; &amp; echo &#x27;world&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br></pre></td></tr></table></figure>\n\n<p>管道符 <strong>|</strong> 依次执行拼接的命令, 前边命令的输出作为后边命令的输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipconfig | find &#x27;IPv4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">各种 IPv4 的 ip 地址</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"假传圣旨-图例\"><a href=\"#假传圣旨-图例\" class=\"headerlink\" title=\"假传圣旨(图例)\"></a>假传圣旨(图例)</h3><p>正常流程<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-22-19.png\" alt=\"2020-03-01-17-22-19\"></p>\n<p>修改后的流程<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-23-43.png\" alt=\"2020-03-01-17-23-43\"></p>\n<h2 id=\"命令注入原理\"><a href=\"#命令注入原理\" class=\"headerlink\" title=\"命令注入原理\"></a>命令注入原理</h2><h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li>调用可执行系统命令的函数</li>\n<li>函数或者函数的参数可控</li>\n<li>拼接注入命令</li>\n</ul>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><ul>\n<li>客户端构造命令, 并发送到服务端</li>\n<li>服务端拼接命令并执行明林</li>\n<li>命令执行的结果返回给 web 端</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>php 代码<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-27-27.png\" alt=\"2020-03-01-17-27-27\"></p>\n<p>前端交互<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-27-59.png\" alt=\"2020-03-01-17-27-59\"></p>\n<h2 id=\"参数可控示例\"><a href=\"#参数可控示例\" class=\"headerlink\" title=\"参数可控示例\"></a>参数可控示例</h2><p>php 代码<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-29-12.png\" alt=\"2020-03-01-17-29-12\"></p>\n<p>前端交互<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-30-17.png\" alt=\"2020-03-01-17-30-17\"></p>\n<p>执行攻击的流程<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-32-05.png\" alt=\"2020-03-01-17-32-05\"></p>\n<p>执行结果<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-32-37.png\" alt=\"2020-03-01-17-32-37\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>进行命令注入攻击时, url 中的 &amp; 要进行 urlEncode. 否则会被认为是一个参数分隔符</p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"XSS","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/xss/","content":"<h2 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cross Site Script</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文名称\"><a href=\"#中文名称\" class=\"headerlink\" title=\"中文名称\"></a>中文名称</h2><p>跨站脚本</p>\n<h2 id=\"常见危害\"><a href=\"#常见危害\" class=\"headerlink\" title=\"常见危害\"></a>常见危害</h2><p>盗取用户信息, 钓鱼, 制造蠕虫…</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>黑客通过 “html 注入” 篡改网页, <strong>插入恶意脚本</strong>. 当用户浏览网页时, 实现控制用户浏览器行为的一种攻击方式.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-22-12.png\" alt=\"2020-02-15-00-22-12\"></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h3><p>访问网站, 触发 XSS</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-26-48.png\" alt=\"2020-02-15-00-26-48\"></p>\n<p>黑客入侵流程<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-27-32.png\" alt=\"2020-02-15-00-27-32\"></p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>访问携带 XSS 脚本的链接触发 XSS, XSS 代码存在于 search 串中. 后端直接返回了<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-30-09.png\" alt=\"2020-02-15-00-30-09\"></p>\n<p>代码实现<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-29-26.png\" alt=\"2020-02-15-00-29-26\"></p>\n<h3 id=\"DOM-型\"><a href=\"#DOM-型\" class=\"headerlink\" title=\"DOM 型\"></a>DOM 型</h3><p>访问携带 XSS 脚本的链接触发 XSS, XSS 代码存在于 hash 中<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-33-25.png\" alt=\"2020-02-15-00-33-25\"></p>\n<p>代码实现<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-32-16.png\" alt=\"2020-02-15-00-32-16\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-33-04.png\" alt=\"2020-02-15-00-33-04\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-41-29.png\" alt=\"2020-02-15-00-41-29\"></p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"基础知识","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"<h2 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h2><p>统一资源定位符</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-14-23-03-28.png\" alt=\"2020-02-14-23-03-28\"></p>\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>超文本传输协议 <code>Hyper Text Transfer Protocol</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-14-23-09-51.png\" alt=\"2020-02-14-23-09-51\"></p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ul>\n<li>web 通信使用的协议</li>\n<li>web 的基础</li>\n<li>最广泛</li>\n<li>…</li>\n</ul>\n<h3 id=\"报文\"><a href=\"#报文\" class=\"headerlink\" title=\"报文\"></a>报文</h3><p>GET:<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-14-23-11-25.png\" alt=\"2020-02-14-23-11-25\"></p>\n<p>POST:<br><img src=\"https://handle-note-img.niubishanshan.top/2020-02-14-23-13-52.png\" alt=\"2020-02-14-23-13-52\"></p>\n<h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><table>\n<thead>\n<tr>\n<th>请求类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>POST</td>\n<td>创建一个资源</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除指定资源</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>更新资源</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>获取资源</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>与 GET 请求类似, 区别在于 HEAD 请求只需要服务器返回 HTTP 头信息, 没有页面内容</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>咨询服务器当前情况下的可访问性</td>\n</tr>\n</tbody></table>\n<h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>告知服务器当前请求的来源(浏览器添加 js 不可修改)</p>\n<p>Referer 的用途有</p>\n<ul>\n<li>防止盗链</li>\n<li>防止 CSRF</li>\n</ul>\n<h2 id=\"钓鱼网站\"><a href=\"#钓鱼网站\" class=\"headerlink\" title=\"钓鱼网站\"></a>钓鱼网站</h2><ul>\n<li>诱惑性标题</li>\n<li>仿冒真实网站</li>\n<li>骗取用户账号</li>\n<li>骗取用户资料</li>\n</ul>\n<h2 id=\"网页篡改\"><a href=\"#网页篡改\" class=\"headerlink\" title=\"网页篡改\"></a>网页篡改</h2><p>修改网页, 这个比较常见</p>\n<h2 id=\"搜索引擎技巧\"><a href=\"#搜索引擎技巧\" class=\"headerlink\" title=\"搜索引擎技巧\"></a>搜索引擎技巧</h2><ul>\n<li>Intitle:keyword 标题中含有关键字的网页</li>\n<li>Intext:keyword 正文中含有关键词的网页</li>\n<li>Site:domain 某个域名和子域名下的所有网页</li>\n</ul>\n<h2 id=\"暗链\"><a href=\"#暗链\" class=\"headerlink\" title=\"暗链\"></a>暗链</h2><p>隐藏在网页中的链接, 不能被正常人点击. 主要目的是提升链接性, 获得在搜索引擎爬虫的曝光度</p>\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><ul>\n<li>后门, 可执行环境</li>\n<li>功能强大</li>\n<li>入侵检测系统难以发现</li>\n</ul>\n<h2 id=\"常见的攻击方式分类\"><a href=\"#常见的攻击方式分类\" class=\"headerlink\" title=\"常见的攻击方式分类\"></a>常见的攻击方式分类</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-00-12-50.png\" alt=\"2020-02-15-00-12-50\"></p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"小哥哥, React SSR 要不要了解下-实用篇","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-React-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20React%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/%E5%B0%8F%E5%93%A5%E5%93%A5,%20React%20SSR%20%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B-%E5%AE%9E%E7%94%A8%E7%AF%87/","content":"<p>作为实用篇本篇将会添加 react-router redux</p>\n<h2 id=\"加入路由畅游皇冠赌场\"><a href=\"#加入路由畅游皇冠赌场\" class=\"headerlink\" title=\"加入路由畅游皇冠赌场\"></a>加入路由畅游皇冠赌场</h2><h3 id=\"客户端渲染配置-react-router\"><a href=\"#客户端渲染配置-react-router\" class=\"headerlink\" title=\"客户端渲染配置 react-router\"></a>客户端渲染配置 react-router</h3><p>来到皇冠赌场的大家那肯定是丈二的和尚, 摸不着头脑呀. 那么路由就应运而生了, 关于路由的原理建议大家看看<a href=\"https://juejin.im/post/5d2d19ccf265da1b7f29b05f\">这篇文章</a>.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625230232.png\" alt=\"20240625230232\"></p>\n<p>如果你看了还回来了, 那说明还是我们澳门 XXXX 更加的有意思 😹.</p>\n<p>谈到赌场无非就是这老四样, 抓牌, 看牌, 洗牌, 码牌~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625230251.png\" alt=\"20240625230251\"></p>\n<p>那么我们就开始, 创建几个页面. 页面的代码结构如下图所示.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625230304.png\" alt=\"20240625230304\"></p>\n<p>为了便于各个 level 的小伙伴理解, 这里无耻的运用了拼音命名法. 代码改动在<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/8aef4f3714d83f5341c64a1956498e891356e5ac\">这里</a></p>\n<p>其次, 安装 react-router-dom 依赖, 并修改 App.jsx 和 client.js 文件, diff 在<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/9b0fb5352770139622cff9d8e04b027016ef6435\">这里</a></p>\n<p>修改后的 App.jsx 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从 react-router-dom 引入基础组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NavLink</span>, <span class=\"title class_\">Switch</span>, <span class=\"title class_\">Route</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入皇冠赌场的页面</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Home.jsx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Zhuapai</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Zhuapai.jsx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Kanpai</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Kanpai.jsx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Xipai</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Xipai.jsx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Mapai</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Mapai.jsx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;ssr-show&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>欢迎来到澳门皇冠赌场<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/Zhuapai&quot;</span>&gt;</span>抓牌<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/Kanpai&quot;</span>&gt;</span>看牌<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/Xipai&quot;</span>&gt;</span>洗牌<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/Mapai&quot;</span>&gt;</span>码牌<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/Zhuapai&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Zhuapai&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/Kanpai&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Kanpai&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/Xipai&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Xipai&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/Mapai&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Mapai&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改后的 client.js 为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从 react-router-dom 里边导入 BrowserRouter 组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/App.jsx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装一下 App 组件</span></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span>,</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;app&#x27;</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>目前为止, 路由就算是配完了. 执行 <code>npm run build:client</code> 后, 用浏览器打开 index.html 文件.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625230335.png\" alt=\"20240625230335\"></p>\n<p>成功就在眼前, 但是难免有一点小小的障碍~</p>\n<p>这个报错的大致意思就是, 本地的文件不能用 react-router, 那么我们只能把它放到一个服务器上了. 还是我们的老伙伴 — <code>live-server</code> 直接执行 <code>live-server ./dist</code></p>\n<p>浏览器打开 <code>localhost:8080</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/router.gif\" alt=\"react-router-err\"></p>\n<p>我们不难发现, 点击链接的时候浏览器地址栏有变化, 但是我们并不能体验到从发牌到码牌的一条龙”服务”…</p>\n<p>看了下 react-router 的 <a href=\"https://reacttraining.com/react-router/web/api/Route/exact-bool\">官方文档</a> 原来我们没有指定路径匹配必须得精准匹配. 那么我们加上 <code>exact</code> 属性试试咧~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/router2.gif\" alt=\"react-router\"></p>\n<p>此时的代码 <a href=\"https://github.com/luoquanquan/react-ssr-show/commit/653639940d9d5ecf66f668374727f8f9ae9de00e\">diff</a></p>\n<p>到目前为止, 我我们已经可以畅游澳门皇冠赌场了, 抓牌看牌洗牌码牌样样精通~</p>\n<h3 id=\"配置服务端渲染的-react-router\"><a href=\"#配置服务端渲染的-react-router\" class=\"headerlink\" title=\"配置服务端渲染的 react-router\"></a>配置服务端渲染的 react-router</h3><p>轻松搞定了客户端渲染的 react-router, 服务端渲染的话那就更加的简单了.</p>\n<ul>\n<li>首先肯定是要引入 react-router-dom 依赖的(ps: ssr 需要导入的是 StaticRouter)<br><img src=\"https://handle-note-img.niubishanshan.top/20240625230955.png\" alt=\"20240625230955\"></li>\n<li>创建路由上线文对象, 并获取到当前用户访问的路径 path<br><img src=\"https://handle-note-img.niubishanshan.top/20240625231005.png\" alt=\"20240625231005\"></li>\n<li>最后, 利用第一步导入的 StaticRouter 组件包裹一下之前生成的服务端渲染组件<br><img src=\"https://handle-note-img.niubishanshan.top/20240625231020.png\" alt=\"20240625231020\"></li>\n</ul>\n<p>代码<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/51181e64b06d5eeaae8920f4e09392c6d2fef241\">diff</a></p>\n<p>最后的最后, 我们执行一下 <code>node index.js</code>, 浏览器打开 <code>localhost:9999</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/router3.gif\" alt=\"react-router-ssr\"></p>\n<p>通过 gif 我们能发现, 我们的服务端渲染是货真价实的服务端渲染了. 查看源代码的 html 字符串没有任何的问题了.(如果有样式该咋办呢 🤔)</p>\n<p>细心的同学可能发现了, 我们每次点击链接的时候页面都会整体刷新. 这里就又到了那个经典的面试题<a href=\"https://juejin.im/post/5a0ea4ec6fb9a0450407725c\">前端：你要懂的单页面应用和多页面应用</a>, 我们的目的很简单, 只是需要 ssr 实现首屏的渲染, 之后就由客户端接管, 这样就结合了两者的优点. 需求是有了, 怎么实现咧~</p>\n<h1 id=\"x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D\"><a href=\"#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p><img src=\"https://handle-note-img.niubishanshan.top/20240625231143.png\" alt=\"20240625231143\"></p>\n<h1 id=\"x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-1\"><a href=\"#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-1\" class=\"headerlink\" title=\"&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p>聪明的同学已经猜到, 只要我们我们在服务端渲染的页面中也引入客户端渲染生成的 <code>bundle.js</code> 文件是不是就 OK 了呢.那我们就试试咯</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231155.png\" alt=\"20240625231155\"></p>\n<p>修改 <code>server.js</code> 引入 <code>koa-static</code> 用于托管静态文件, 文件整体 <a href=\"https://github.com/luoquanquan/react-ssr-show/commit/eef7ac6dbda66ac1ac4236dde5453d80994065e0\">diff</a> 如下:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231206.png\" alt=\"20240625231206\"></p>\n<p>废话少扯, 继续 <code>node index.js</code>, 浏览器打开 <code>localhost:9999</code> 搞起~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr.gif\" alt=\"react-router-dont-reload\"></p>\n<p>服务端渲染的路由配置, 这就完成了~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/jump.gif\" alt=\"sahua\"></p>\n<h2 id=\"配置-redux-带上身份畅玩澳门皇冠\"><a href=\"#配置-redux-带上身份畅玩澳门皇冠\" class=\"headerlink\" title=\"配置 redux, 带上身份畅玩澳门皇冠\"></a>配置 redux, 带上身份畅玩澳门皇冠</h2><h3 id=\"客户端渲染引入-redux\"><a href=\"#客户端渲染引入-redux\" class=\"headerlink\" title=\"客户端渲染引入 redux\"></a>客户端渲染引入 redux</h3><p>由于配置 redux 不是我们的重点, 所以这里就不多说了, 简单配置一个 redux 开发环境. 代码 <a href=\"https://github.com/luoquanquan/react-ssr-show/commit/7f1cb6d181cec0e9cc6903115b8fabadbfd41686\">diff</a></p>\n<p>有疑问的问题, 评论区见~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231402.png\" alt=\"20240625231402\"></p>\n<h3 id=\"ssr-引入-redux\"><a href=\"#ssr-引入-redux\" class=\"headerlink\" title=\"ssr 引入 redux\"></a>ssr 引入 redux</h3><p>修改 server.js 文件如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Koa</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;koa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;koa-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/server&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StaticRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> serve <span class=\"keyword\">from</span> <span class=\"string\">&#x27;koa-static&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 像客户端渲染一样导入 Provider 组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/App.jsx&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> createStore, &#123; init &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conf = &#123;</span><br><span class=\"line\">  <span class=\"attr\">PORT</span>: <span class=\"number\">9999</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">generateHtmlStr</span> = reactDom =&gt; <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;app&quot;&gt;<span class=\"subst\">$&#123;reactDom&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src=&quot;/dist/bundle.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; url &#125; = ctx.<span class=\"property\">req</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化一个 store</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动触发一下 init</span></span><br><span class=\"line\">  store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">init</span>());</span><br><span class=\"line\">  <span class=\"comment\">// 首先把 React 组件变成一个字符串</span></span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rNode = <span class=\"title function_\">renderToString</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 把刚刚创建的 store 作为属性传给 Provider 组件</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">StaticRouter</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;url&#125;</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;context&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">StaticRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// 然后替换 template 里边的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> domString = <span class=\"title function_\">generateHtmlStr</span>(rNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最后返回 html 字符串</span></span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = domString;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">serve</span>(path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../&#x27;</span>)));</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router.<span class=\"title function_\">routes</span>(), router.<span class=\"title function_\">allowedMethods</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(conf.<span class=\"property\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`The Server is listening on <span class=\"subst\">$&#123;conf.PORT&#125;</span> now, enjoy`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>代码 <a href=\"https://github.com/luoquanquan/react-ssr-show/commit/edf5555ca4e0ffd32877b1fcf6415e4008b24840\">diff</a> 如下:<br><img src=\"https://handle-note-img.niubishanshan.top/20240625231420.png\" alt=\"20240625231420\"></p>\n<p>还是那一套, 先 <code>node index.js</code> 再浏览器打开 <code>localhost:9999</code>~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231433.png\" alt=\"20240625231433\"></p>\n<p>浏览器执行结果如下图:<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr1.gif\" alt=\"redux-ssr\"></p>\n<p>细心的同学不难发现, 这个图片中抓牌的入口总是会闪动一下, 理论上讲我们执行了 store.dispatch(init()); 证明了用户是已经登录的用户, 所以应该是可以抓牌的才对. 这是问啥呢???</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231536.png\" alt=\"20240625231536\"></p>\n<p>其实原因很简单, 我们的项目在首屏渲染完成以后就有客户端渲染接管了, 所以我们应该在客户端接管的时候把之前服务端渲染的数据保留下来. 怎么搞呢?</p>\n<ul>\n<li>首先, 获取首屏情况下的状态</li>\n<li>其次, 升级 server.js 文件, generateHtmlStr 中添加一个参数, 表示当前的状态</li>\n<li>再次, 更新 html 模板, 在 window 下创建一个 REDUX_DATA 属性, 用于放置服务端渲染时首屏的全局状态</li>\n<li>最后, 升级客户端相关的代码, 在 createStore 的时候把 REDUX_DATA 作为参数传入. 也正因此, 定义 REDUX_DATA 要放在引入 <code>bundle.js</code> 的上方.</li>\n</ul>\n<p>这就完了, 通过下边的 gif 可以看出, 状态很好的保存下来了~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr2.gif\" alt=\"redux-ssr-goog\"></p>\n<p>到了这里, 可能有同学会问, 我们来到皇冠赌场, 全局状态肯定会灰常的多, 不应该只有一个登陆状态. 鉴于此, 我们扩充一下全局状态. 添加一个音乐列表. 一遍欢歌一遍看牌~</p>\n<p>下来我们在看牌页面添加一个音乐列表, 我们听着音乐看着牌, 要是再吃着火锅那简直就是人生巅峰了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231641.png\" alt=\"20240625231641\"></p>\n<h3 id=\"在-store-中获取异步数据\"><a href=\"#在-store-中获取异步数据\" class=\"headerlink\" title=\"在 store 中获取异步数据\"></a>在 store 中获取异步数据</h3><ul>\n<li>首先, 我们创建一个 mock.js, 主要就是访问异步接口获取歌曲列表<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"title function_\">axios</span>(<span class=\"string\">&#x27;https://music.niubishanshan.top/api/v2/music/toplist&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 mock.js 中我们引用了高端的 ajax 请求库 axios. 那么就不得不 npm i axios -S 啦</span></span><br></pre></td></tr></table></figure></li>\n<li>其次, 升级 store.js 添加歌曲相关的 actions 和 reducer.<br><img src=\"https://handle-note-img.niubishanshan.top/20240625231656.png\" alt=\"20240625231656\"></li>\n<li>由于我们有之前的单 reducer 升级成了两个 reducer, 此时要同步升级之前连接过 redux 的组件 <code>Header Home Zhuapai</code></li>\n<li>最后, 在看牌页面, 我们引入音乐. party Time<br><img src=\"https://handle-note-img.niubishanshan.top/20240625231708.png\" alt=\"20240625231708\"></li>\n</ul>\n<p>到目前为止, 代码是 <a href=\"https://github.com/luoquanquan/react-ssr-show/commits/v3.0.0\">这样</a> 的.</p>\n<p>废话少说…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr3.gif\" alt=\"error-kanpai\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231749.png\" alt=\"20240625231749\"></p>\n<p>卧槽, 居然不好使…</p>\n<p>仔细看一下, 原来是 action 里边不能包含异步. 这个简单. 我们<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/b9e91ed8eaf9d0a859bbf2c9df66c4c25dca966c\">升级</a>一下.</p>\n<p>然后…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr4.gif\" alt=\"ok-kanpai\"></p>\n<h3 id=\"服务端渲染支持首屏展示初始异步数据\"><a href=\"#服务端渲染支持首屏展示初始异步数据\" class=\"headerlink\" title=\"服务端渲染支持首屏展示初始异步数据\"></a>服务端渲染支持首屏展示初始异步数据</h3><blockquote>\n<p>有的时候, 我们服务端渲染的首屏网页也需要从其他异步接口来获取初始化数据. 此时就需要吧 html 返回给前端前先去访问异步接口. 那么怎么办咧…</p>\n</blockquote>\n<ul>\n<li>首先, 给需要预先请求异步数据的组件加一个静态属性<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/e14c36ffa4822b5861b4020b886bf4cfebee913d\">就是需要请求数据的方法</a></li>\n<li>其次, 升级 server.js <a href=\"https://github.com/luoquanquan/react-ssr-show/commit/73bc58850ca9bc2407164e8bf3614f7282a8e5fa\">就像这样</a></li>\n</ul>\n<p>最后…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625231843.png\" alt=\"20240625231843\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr4-1.gif\" alt=\"polyfill-error\"></p>\n<p>这里建议大家复习一下 <a href=\"https://stackoverflow.com/questions/47255455/babel-polyfill-vs-babel-plugins\">polyfill 和 preset 的区别</a></p>\n<p>反正我就这么<a href=\"https://github.com/luoquanquan/react-ssr-show/commit/ff6c64c0172cc77bba17f036624ac1a0594a2262\">干了一把</a></p>\n<p>然后就…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/ssr5.gif\" alt=\"polyfill-ok\"></p>\n<p>是不是可以痛快的玩耍啦 😺~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232053.png\" alt=\"20240625232053\"></p>\n","categories":["blog","小哥哥, React 服务端渲染要不要了解下"],"tags":["blog"]},{"title":"点击劫持","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/","content":"<h2 id=\"就这一张图-内容就不编了\"><a href=\"#就这一张图-内容就不编了\" class=\"headerlink\" title=\"就这一张图, 内容就不编了\"></a>就这一张图, 内容就不编了</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2020-02-15-19-39-53.png\" alt=\"2020-02-15-19-39-53\"></p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"小哥哥, React 服务端渲染要不要了解下-基础篇","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-React-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20React%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/%E5%B0%8F%E5%93%A5%E5%93%A5,%20React%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/","content":"<p>咱也不知道这会儿写这个出来算不算过时, 反正就想写写. 至于有没有人看, 看完点不点赞, 点完赞会不会实践. 咱也不敢问呀, 随手写写吧 ~</p>\n<p>到了 9102 年, 作为前端扛把子的 React 依然炙手可热. 周边的各种生态更是红的发烫. 每天应付完各种业务需求真的想舒舒坦坦躺上一波…</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625223933.png\" alt=\"20240625223933\"></p>\n<p>偏偏又来了互联网寒冬的夹持, 苦逼的前端 🐶只能把这句不怎么当讲的话埋在心底了~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625223954.png\" alt=\"20240625223954\"></p>\n<p>这一期, 和大家一同学习 React + Koa 的服务端渲染知识. 文中不免疏漏, 望大佬斧正. 废话不多说, 搞起来~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224225.png\" alt=\"20240625224225\"></p>\n<h2 id=\"首先-还是要先配一个舒服的开发环境\"><a href=\"#首先-还是要先配一个舒服的开发环境\" class=\"headerlink\" title=\"首先, 还是要先配一个舒服的开发环境\"></a>首先, 还是要先配一个舒服的开发环境</h2><p>配置开发环境参考<a href=\"https://juejin.im/post/5bfd43986fb9a049ed308f1a\">这里</a>, 由于咱们创建的是 React 项目, 所以按照这篇文章配置到 eslint 就可以了.</p>\n<p>ps: 最新版本的 eslint 更新后和那篇文章命令行步骤有点不一样. 但是总体大同小异. 如果不想解决差异的同学可以安装 eslint 5.9.0 这个版本, 保证和文章中一致性~</p>\n<h2 id=\"Hello-world\"><a href=\"#Hello-world\" class=\"headerlink\" title=\"Hello world\"></a>Hello world</h2><p>首先我们创建一个基础的 react 项目, 为了便于理解, 这里不用 <code>create-react-app</code>, 而是直接用 webpack 手撸配置. 所以需要大家有一点点的 webpack 基础知识. 如果实在没有也没关系, 咱们讲~</p>\n<p>开发环境创建完成后我们看到的项目结构应该添加了 <code>package.json</code> 和 <code>.eslintrc.js</code> 两个配置文件还有一个 <code>node_modules</code> 目录. 接下来就是我们大干一场的时间啦~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224056.png\" alt=\"20240625224056\"></p>\n<ul>\n<li>首先, 在项目的根目录创建一个 index.js</li>\n<li>编写 index.js 文件, 文件内容如下.<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>到了这一步打开我们的命令行, 输入命令 <code>node index.js</code> 回车</li>\n</ul>\n<p>恕我直言, 在座各位都已经晋级为 <code>node.js</code> 开发工程师了~</p>\n<h2 id=\"起步-React-版本的-HelloWorld\"><a href=\"#起步-React-版本的-HelloWorld\" class=\"headerlink\" title=\"起步, React 版本的 HelloWorld\"></a>起步, React 版本的 HelloWorld</h2><ul>\n<li>首先安装 React ReactDOM <code>npm i react react-dom</code></li>\n<li>搭建项目目录如下<br><img src=\"https://handle-note-img.niubishanshan.top/20240625224336.png\" alt=\"20240625224336\"></li>\n</ul>\n<p>其中, src 目录为项目源码目录, client.js 文件为客户端渲染的入口文件, components 目录下的文件为 react 组件文件.</p>\n<ul>\n<li>创建并编写 App.jsx 文件<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;ssr-show&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>欢迎来到澳门皇冠赌场<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写 client.js 文件<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/App&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure>\n到了这一步, 似乎是没有啥问题了, 但是, 这个东西跑不起来呀…</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224358.png\" alt=\"20240625224358\"></p>\n<p>之前的步骤根本没有 html 作为依托, 咱们的项目更本就是不好使的. 此时的代码在 <a href=\"https://github.com/luoquanquan/react-ssr-show/tree/d49fd6796ed0071c6d01b8e81c94649af828a014\">这里</a> 建议大家下载下来尝试配置下 webpack</p>\n<h2 id=\"配置-webpack\"><a href=\"#配置-webpack\" class=\"headerlink\" title=\"配置 webpack\"></a>配置 webpack</h2><p>配置 webpack 其实灰常简单, 只需要三步.</p>\n<ul>\n<li>配置入口和输出</li>\n<li>限定编译规则</li>\n<li>生成 html 文件托管打包成果</li>\n</ul>\n<p>根据三步原理创建的 webpack 配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebPackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 客户端渲染的入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/client.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 因为目前我们的项目里边只有 js 和 jsx 文件, 所以只配这一条规则就可以啦~</span></span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"string\">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 使用 html webpack plugin 创建 html 文件作为项目产出的依托文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebPackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./index.temp.html&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>最后添加 <code>npm script</code><br>在 <code>package.json</code> 的 script 字段下添加以下代码<br><code>&quot;build:client&quot;: &quot;webpack --mode=production&quot;</code><br><img src=\"https://handle-note-img.niubishanshan.top/20240625224425.png\" alt=\"20240625224425\"></p>\n<p>最后执行 <code>npm run build:client</code> 结束后用你喜欢的浏览器打开 index.html 文件.<br><img src=\"https://handle-note-img.niubishanshan.top/20240625224441.png\" alt=\"20240625224441\"></p>\n<p>进行到这里的同学, 恭喜你正在悄悄的超越你们的项目小组长了~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224508.png\" alt=\"20240625224508\"></p>\n<p>此时的代码在<a href=\"https://github.com/luoquanquan/react-ssr-show/tree/6b1aa38d3feae5cabe6db785672c25346baed4ce\">这里</a></p>\n<h2 id=\"配置服务端渲染\"><a href=\"#配置服务端渲染\" class=\"headerlink\" title=\"配置服务端渲染\"></a>配置服务端渲染</h2><p>我们已经能实现客户端渲染的 React 项目, 走出了万里长征的第一步. 接下来就是剩下的 9999 步了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224522.png\" alt=\"20240625224522\"></p>\n<p>首先, 在 src 目录下创建 <code>server.js</code> 文件作为服务端渲染的入口文件.<br>其次, 编辑该文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Koa</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;koa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;koa-router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/server&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/App.jsx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conf = &#123;</span><br><span class=\"line\">  <span class=\"attr\">PORT</span>: <span class=\"number\">9999</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">generateHtmlStr</span> = reactDom =&gt; <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;app&quot;&gt;<span class=\"subst\">$&#123;reactDom&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先把 React 组件变成一个字符串</span></span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rNode = <span class=\"title function_\">renderToString</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 然后替换 template 里边的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> domString = <span class=\"title function_\">generateHtmlStr</span>(rNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最后返回 html 字符串</span></span><br><span class=\"line\">  ctx.<span class=\"property\">body</span> = domString;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router.<span class=\"title function_\">routes</span>(), router.<span class=\"title function_\">allowedMethods</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(conf.<span class=\"property\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`The Server is listening on <span class=\"subst\">$&#123;conf.PORT&#125;</span> now, enjoy`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>代码和客户端渲染的入口文件 <code>client.js</code> 文件大同小异</p>\n<p>再次, 改写项目根目录下的 <code>index.js</code> 文件, 导入并执行一下刚刚创建的 <code>server.js</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./src/server&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>最后, 命令行执行 <code>node index.js</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224539.png\" alt=\"20240625224539\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224603.png\" alt=\"20240625224603\"></p>\n<p>仔细看下报错信息, 原来是 nodejs 不怎么认识 es6 的模块化语法. 给我们的项目入口文件添加个 babel. 修改项目根目录下的<code>indes.js</code> 文件如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/register&#x27;</span>)(&#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/env&#x27;</span>, <span class=\"string\">&#x27;@babel/react&#x27;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./src/server&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再执行一下 <code>node index.js</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224619.png\" alt=\"20240625224619\"></p>\n<p>看样子要成功了~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625224627.png\" alt=\"20240625224627\"></p>\n<p>这个时候浏览器打开 <code>localhost:9999</code> 如果你进入了澳门皇冠, 那肯定就值得信赖啦~</p>\n<p>然后我们鼠标右键 -&gt; 查看网页源代码 -&gt; 验货<br><img src=\"https://handle-note-img.niubishanshan.top/20240625224639.png\" alt=\"20240625224639\"></p>\n<p>虽然很简单, 但是货真价实, 正儿八经的服务端渲染. 此时代码在 <a href=\"https://github.com/luoquanquan/react-ssr-show/tree/87c9508368b055687af7a5defcc26abb59aa376e\">这里</a></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>通过之前的步骤我们已经学习了使用 koa 实现最最基础的服务端渲染项目(仅仅用到了一个 renderToString 这个 api), 在下篇文章中我们会一起学习在项目中加入 <code>react-router</code> <code>redux</code> <code>自定义 mata</code> 等功能, 并实现其服务端渲染. 第一次接触服务端渲染, 希望各路大佬能不吝赐教~<br><img src=\"https://handle-note-img.niubishanshan.top/20240625224658.png\" alt=\"20240625224658\"></p>\n","categories":["blog","小哥哥, React 服务端渲染要不要了解下"],"tags":["blog"]},{"title":"文件操作漏洞","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%BC%8F%E6%B4%9E/","content":"<h2 id=\"常见的文件操作\"><a href=\"#常见的文件操作\" class=\"headerlink\" title=\"常见的文件操作\"></a>常见的文件操作</h2><h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>上传头像</li>\n<li>上传附件</li>\n</ul>\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>下载应用</li>\n<li>下载附件</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"文件操作漏洞\"><a href=\"#文件操作漏洞\" class=\"headerlink\" title=\"文件操作漏洞\"></a>文件操作漏洞</h2><h3 id=\"文件上传-1\"><a href=\"#文件上传-1\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>上传 webshell</li>\n<li>上传木马</li>\n</ul>\n<h3 id=\"文件下载-1\"><a href=\"#文件下载-1\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>下载系统任意文件</li>\n<li>下载程序代码</li>\n<li>下载配置文件</li>\n</ul>\n<h2 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h2><h3 id=\"正常上传流程\"><a href=\"#正常上传流程\" class=\"headerlink\" title=\"正常上传流程\"></a>正常上传流程</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-54-25.png\" alt=\"2020-03-01-17-54-25\"></p>\n<h3 id=\"恶意文件上传\"><a href=\"#恶意文件上传\" class=\"headerlink\" title=\"恶意文件上传\"></a>恶意文件上传</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-55-12.png\" alt=\"2020-03-01-17-55-12\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-55-30.png\" alt=\"2020-03-01-17-55-30\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-55-48.png\" alt=\"2020-03-01-17-55-48\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-56-01.png\" alt=\"2020-03-01-17-56-01\"></p>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>可以上传可执行脚本</li>\n<li>脚本拥有执行权限</li>\n</ul>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-57-58.png\" alt=\"2020-03-01-17-57-58\"></p>\n<h2 id=\"任意文件下载漏洞\"><a href=\"#任意文件下载漏洞\" class=\"headerlink\" title=\"任意文件下载漏洞\"></a>任意文件下载漏洞</h2><p>正常下载<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-58-59.png\" alt=\"2020-03-01-17-58-59\"></p>\n<p>异常下载<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-59-40.png\" alt=\"2020-03-01-17-59-40\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-17-59-58.png\" alt=\"2020-03-01-17-59-58\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-00-51.png\" alt=\"2020-03-01-18-00-51\"></p>\n<h3 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h3><ul>\n<li>代码泄露</li>\n<li>数据库配置文件泄露</li>\n<li>系统文件泄露</li>\n</ul>\n<h3 id=\"前提-1\"><a href=\"#前提-1\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li>未验证下载文件格式</li>\n<li>未限制请求路径</li>\n</ul>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-03-46.png\" alt=\"2020-03-01-18-03-46\"></p>\n<h2 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>本地文件包含</li>\n<li>远程文件包含</li>\n</ul>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-06-20.png\" alt=\"2020-03-01-18-06-20\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-06-42.png\" alt=\"2020-03-01-18-06-42\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-06-59.png\" alt=\"2020-03-01-18-06-59\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-07-09.png\" alt=\"2020-03-01-18-07-09\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2020-03-01-18-07-34.png\" alt=\"2020-03-01-18-07-34\"></p>\n","categories":["学习笔记","白帽子训练课"],"tags":["web 安全"]},{"title":"CORS 基础篇","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/CORS%20%E5%9F%BA%E7%A1%80%E7%AF%87/","content":"<blockquote>\n<p>在<a href=\"https://juejin.im/post/5c07fa04e51d451de968906b\">前一篇文章</a>中, 我们一起学习了第一种跨域处理方案 <code>JSONP</code>. 这种方法相对比较原始, 优点是兼容性好, 就连现代前端没怎么听说过的 <code>IE 6</code> 上跑起来都是妥妥的. 然鹅, 它也就这一点优点了. 其缺点有: 只支持 GET 请求, 配置繁琐(前后端都需要调整代码), 在 window 上注册各种回调函数, 开发体验差….</p>\n</blockquote>\n<h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><p>由于 JSONP 的方案存在诸多缺点且老旧, 这里我们一起学习一种比较现代的跨域问题解决方案—CORS</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173654.png\" alt=\"20240627173654\"></p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>从 mdn 官网粘来的兼容性列表如下:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173815.png\" alt=\"20240627173815\"></p>\n<p>ie 10 都可以跑, 足以满足现代前端开发者的需求了.</p>\n<h3 id=\"概念-😳\"><a href=\"#概念-😳\" class=\"headerlink\" title=\"概念 😳\"></a>概念 😳</h3><p>概念性的东西<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">在这儿</a> MDN 偶尔需要梯子, 自备哈.</p>\n<h3 id=\"搭建跨域的环境\"><a href=\"#搭建跨域的环境\" class=\"headerlink\" title=\"搭建跨域的环境\"></a>搭建跨域的环境</h3><p>我们先创建一个跨域的环境, 代码基于我们 jsonp 时候的示例项目 <a href=\"https://github.com/luoquanquan/cross-domain.git\">cross-domain</a>, 首先, 在 fe 和 be 目录下创建 cors 目录. 其次, 分别添加 <code>index.html</code> 和 <code>index.js</code>. 修改以后的项目目录如下图.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173825.png\" alt=\"20240627173825\"></p>\n<p>编写前端代码 <code>fe/cors/index.html</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CORS 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>CORS 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个灰常简单的 ajax 请求, 有木有.</p>\n<p>后端代码 <code>be/cors/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此时的<a href=\"https://github.com/luoquanquan/cross-domain/commit/483808571faf3cadc886033c2214a2b6f25b08fa\">项目代码</a></p>\n<h3 id=\"找点苗头\"><a href=\"#找点苗头\" class=\"headerlink\" title=\"找点苗头\"></a>找点苗头</h3><p>代码环境准备完成后</p>\n<ul>\n<li>首先启动后端代码 <code>node ./be/cors/index.js</code></li>\n<li>其次启动前端 web 容器 <code>live-server ./fe/cors</code></li>\n<li>打开浏览器, 访问 <a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n<li>打开控制台, 切换到 Console tab</li>\n<li>刷新浏览器</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173849.png\" alt=\"20240627173849\"></p>\n<p>我们细细分析这个熟悉的报错, 前一段告诉我们我们的请求被 block 了. 后边居然直接告诉我们解决方案了, 方案了 <code>&#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code>, 这么明显的暗示, 难道我们就不试试???</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173856.png\" alt=\"20240627173856\"></p>\n<h3 id=\"响应头添加-Access-Control-Allow-Origin\"><a href=\"#响应头添加-Access-Control-Allow-Origin\" class=\"headerlink\" title=\"响应头添加 Access-Control-Allow-Origin\"></a>响应头添加 Access-Control-Allow-Origin</h3><p>针对浏览器的报错, 我们分析出他是要我们在响应头上添加<code>Access-Control-Allow-Origin</code>这个字段,<br>那么我们修改我们的后端代码.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>改动后的<a href=\"https://github.com/luoquanquan/cross-domain/commit/9aff17ce9a1facb0ca643a233bbe30a8741d08e1\">代码</a>.</p>\n<div style=\"font-weight: bold; font-size: 20px;\">巨大的 PS: 修改过后端代码以后, 一定要<span style=\"color: red;\">重启 node 服务</span></div>\n\n<p>浏览器刷新一下, 我了个乖乖. 好了 😄</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173916.png\" alt=\"20240627173916\"></p>\n<p>开心过后, 我们想一下, jsonp 的缺点是只能支持 GET 请求, 作为<code>现代</code>的跨域请求方式. cors 能不能支持其他的请求方式呢?</p>\n<h3 id=\"其他请求方式的支持\"><a href=\"#其他请求方式的支持\" class=\"headerlink\" title=\"其他请求方式的支持\"></a>其他请求方式的支持</h3><p>作为<code>现代</code>的跨域问题解决方案, 应该是能解决多种请求方式的. 光说不练假把式. 咱们试试 😄</p>\n<p>改动前端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改动前</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 改动后</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改后<a href=\"https://github.com/luoquanquan/cross-domain/commit/8494d3543b9919bf58ab1c3d9c72d41d97a7cbaa\">代码</a>来浏览器上看一下?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173930.png\" alt=\"20240627173930\"></p>\n<p>木有任何问题, 返回的数据顺利的打印. 没有任何的报错.</p>\n<p>趁着兴头试试<code>PUT</code>请求</p>\n<p>再次改动前端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改动前</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 改动后</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改后<a href=\"https://github.com/luoquanquan/cross-domain/commit/8494d3543b9919bf58ab1c3d9c72d41d97a7cbaa\">代码</a>来浏览器上看一下?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173943.png\" alt=\"20240627173943\"></p>\n<p>哎呀我滴妈? 很眼熟的错误, 但是不要认错人哈, 这次的报错和之前的报错长的很像, 但是关键词不一样了. 根据之前的经验, 后端添加 <code>Access-Control-Allow-Methods</code> 响应头应该好使.</p>\n<p>后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>修改后<a href=\"https://github.com/luoquanquan/cross-domain/commit/b50d23491506b9cd2c52dc36155c57e07c18f2ed\">代码</a>来浏览器上看一下?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174149.png\" alt=\"20240627174149\"></p>\n<p>成功了 😄</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174207.png\" alt=\"20240627174207\"></p>\n<p>其他的 http 方法和 <code>PUT</code> 方法处理的方式是一样的. 举一反三即可.</p>\n<h3 id=\"后端说-你的请求要加一个-token-呀\"><a href=\"#后端说-你的请求要加一个-token-呀\" class=\"headerlink\" title=\"后端说, 你的请求要加一个 token 呀\"></a>后端说, 你的请求要加一个 token 呀</h3><p>既然是现代的开发, 那么会话的管理一般是会用 jwt(后续可能会写相关的文章), jwt 一个闪耀的标志就是请求头添加了 jwt token. 明人不说暗话.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174222.png\" alt=\"20240627174222\"></p>\n<p>修改前端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加了一行</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"string\">&#x27;quanquanbunengshuo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改后<a href=\"https://github.com/luoquanquan/cross-domain/commit/b4b372173f6c8c5645b5e8cc4e79b9f41e22a9ce\">代码</a>来浏览器上看一下?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174233.png\" alt=\"20240627174233\"></p>\n<p>相信大家已经摸清了我的套路, 闲话不扯.</p>\n<p>后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加了一行</span></span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改后<a href=\"https://github.com/luoquanquan/cross-domain/commit/11686561e729075da6c5d7d1c64470e08ad790e8\">代码</a>来浏览器上看一下?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174243.png\" alt=\"20240627174243\"></p>\n<p>目前为止, 跨域请求成功了, 请求方式兼容了, 自定义请求头好使了. 是不是大吉大利, 可以吃鸡了呢?</p>\n<h3 id=\"致-被打入冷宫的-Network-tab\"><a href=\"#致-被打入冷宫的-Network-tab\" class=\"headerlink\" title=\"致, 被打入冷宫的 Network tab\"></a>致, 被打入冷宫的 Network tab</h3><p>我们自始至终都在查看浏览器的 Console tab, 作为一个通信性质的文章, 不看一下 Network 明显有点说不过去辣.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174253.png\" alt=\"20240627174253\"></p>\n<p>既然存在, 那肯定是要看看的, 我们把 tab 切换到 Network.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627174302.png\" alt=\"20240627174302\"></p>\n<p>哎呦喂? 两个请求, 一个 OPTIONS 一个 PUT, 这是什么鬼?</p>\n<p>下集预告: 刚刚看到了 Network 就出现了血案. 当然如果仅仅是停留在会用 CORS 实现跨域上, 到目前为止已经没有什么问题了, <b>用来面试也是杠杠滴</b>. 下一步, 我们一起探讨 CORS 条件下, <code>预检请求</code> 和 <code>Cookie</code> 携带那些事儿. 周五码字感觉好累…… 约小姐姐去辣 😄</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain2.gif\"></p>\n","categories":["blog","小哥哥, 跨域要不要了解下"],"tags":["blog"]},{"title":"CORS 进阶篇","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/CORS%20%E8%BF%9B%E9%98%B6%E7%AF%87/","content":"<h2 id=\"预检请求的诞生\"><a href=\"#预检请求的诞生\" class=\"headerlink\" title=\"预检请求的诞生\"></a>预检请求的诞生</h2><blockquote>\n<p>在<a href=\"https://juejin.im/post/5c0a55e76fb9a049ef2665ba\">前一篇文章</a>结尾, 我们发现使用 CORS 方式实现跨域, 有时候会发送两个请求 <code>一个 OPTIONS 一个正常请求</code>, 这个 OPTIONS 是个什么鬼呢?</p>\n</blockquote>\n<p>下面贴一段 MDN 的解释</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221603.png\" alt=\"20240627221603\"></p>\n<p>众所周知, 后端 API 设计比较流行的范式就是 restful(到 2018 年 12 月 8 日). 在 restful 中分别用不同的 HTTP METHOD 标识后端的 CURD, 对于使用这些可能会更新后端数据的 HTTP METHOD 发出的跨域请求, 浏览器要首先和服务器商定一下当前的域名是不是有执行对应的 CURD 的权限. 于是这个 OPTIONS 类型的 <code>预检请求</code> 就诞生了. 那么问题来了 <code>可能对服务器数据产生副作用的 HTTP 请求方法</code> 是有那些咧? 不知道么有关系, TIM 队长为我们探探路 😄</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221641.png\" alt=\"20240627221641\"></p>\n<h2 id=\"简单请求-VS-复杂请求\"><a href=\"#简单请求-VS-复杂请求\" class=\"headerlink\" title=\"简单请求 VS 复杂请求\"></a>简单请求 VS 复杂请求</h2><p>在 CORS 机制中, 把请求分为了 <code>简单请求</code> 和 <code>复杂请求</code>, 一个 HTTP 请求若想要让自己成为一个简单请求就要满足以下条件:</p>\n<ul>\n<li>首先, 请求方式的限制: 请求方式(method) 只能是 <code>GET POST HEAD</code> 三者中的一个</li>\n<li>其次就是请求头字段的限制: 请求头字段必须包含在以下集合中, 包括: <code>Accept Accept-Language Content-Language Content-Type DPR Downlink Save-Data Viewport-Width Width</code>.</li>\n<li>其次就是请求头值的限制: 当请求头中包含 <code>Content-Type</code> 的时候, 其值必须为 <code>text/plain multipart/form-data application/x-www-form-urlencoded(这个是 form 提交默认的 Content-Type)</code> 三者中的一个.</li>\n</ul>\n<p>综上, 只要前端发出的请求满足以上三个条件, 你发出的请求就是简单请求. 那么什么事复杂请求呢? 答: 只要不是简单请求就是复杂请求. 原本以为很难理清的概念, 居然只有三个条件搞定 ^_^.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221652.png\" alt=\"20240627221652\"></p>\n<p>再告诉大家一个秘密, 所有的简单请求跨域访问都是不会触发预检请求的哟. 那是复杂请求的专利…</p>\n<h2 id=\"预检请求都干了啥-😳\"><a href=\"#预检请求都干了啥-😳\" class=\"headerlink\" title=\"预检请求都干了啥 😳\"></a>预检请求都干了啥 😳</h2><blockquote>\n<p>对于复杂请求发生跨域访问前, 总是要通过预检请求进行鉴权. 那么鉴权的过程到底是啥么样子的呢? 这一步我们一起来研究一下.</p>\n</blockquote>\n<ul>\n<li>首先, 打开<a href=\"https://github.com/luoquanquan/cross-domain/commit/11686561e729075da6c5d7d1c64470e08ad790e8\">上一节的代码</a></li>\n<li>分别执行 <code>node ./be/cors/index.js</code> <code>live-server ./fe/cors</code> 启动后端服务和前端的 web 容器.</li>\n<li>浏览器自动打开后打开控制台, 切换到 Network tab 并刷新浏览器. 不出意外的话, 看到的是这个样子的<br><img src=\"https://handle-note-img.niubishanshan.top/20240627221714.png\" alt=\"20240627221714\"></li>\n<li>点击一下第一个 localhost 请求并查看详情<br><img src=\"https://handle-note-img.niubishanshan.top/20240627221722.png\" alt=\"20240627221722\"><br>不难发现, 响应头里标注的几个字段, 就是我们的后端项目里边写的几个.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>);</span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Max-Age&#x27;</span>, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一一对应, 绝非偶然 😄. 那么请求头中标注的两个又是什么意思呢?</p>\n<p>浏览器在接受到我们发送的跨域请求的指令时, 会自动判断我们的请求是否属于跨域请求, 如果是的话便会发出预检请求, 预检请求的请求头信息也是浏览器根据我们的请求信息自动添加的. 示例项目中, 因为我们的请求是 <code>PUT</code> 类型的, 所以在预检请求的时候会添加 <code>Access-Control-Allow-Methods: PUT</code> 来咨询服务器自己是否可以向它发送这种类型的请求. 同理, 由于我们的请求中有自定义请求头 <code>token</code> 所以, 在预检请求中, 浏览器要和服务器做是否可以添加自定义请求头的协商. 只有当浏览器和服务器之间的预检请求协商通过了, 浏览器才会继续发送真正的 <code>AJAX</code> 请求.</p>\n<h2 id=\"老板说-我不想看到多余的请求\"><a href=\"#老板说-我不想看到多余的请求\" class=\"headerlink\" title=\"老板说, 我不想看到多余的请求\"></a>老板说, 我不想看到多余的请求</h2><p>在工作中, 老板往往是不懂技术的. 能看控制台的老板一般是高手了. 面对这种一个 api 发两次请求的情况可能一个程序员笑笑也就过去了, 但是老板就不这么认为了, 一个接口他就要一次请求. 你要把 <code>圈圈的圈</code> 跨域文章推荐给老板, 让小哥哥也了解下? 估计你会被 fire 掉. 那肿么办呢?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221736.png\" alt=\"20240627221736\"></p>\n<p>面对这种情况, 有两种解决方案.</p>\n<ul>\n<li>第一种, 可以和后端小哥哥商量一下. 把接口改成简单请求, 预检请求的问题就迎刃而解了.</li>\n<li>然而, 有时候写好的代码谁都不愿意去改. 后端小哥哥不听话. 这种情况下 <code>Access-Control-Max-Age</code> 就派上用场了. 这个响应头的意思是预检请求的有效期. 在指定时间内再次跨域访问接口, 是不需要预检请求的, 单位是 <code>秒</code>. 如果我们把有效时间写的非常的长, 那么四不四看上去就像删除了预检请求了呢 ^_^.</li>\n<li>附加情况, 你老板不懂技术瞎 J8 指挥. 小爷我不干了. 当然这种处理方案比较不推荐.</li>\n</ul>\n<p>PS: 使用 <code>Access-Control-Max-Age</code> 机制和缓存类似, 所以给老板演示的时候千万不要清理缓存. 不要勾选 Network 下的 <code>disable cache</code>. 不说啦, 都是泪…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221745.png\" alt=\"20240627221745\"></p>\n<h2 id=\"咱们不能允许所有的人都访问呀\"><a href=\"#咱们不能允许所有的人都访问呀\" class=\"headerlink\" title=\"咱们不能允许所有的人都访问呀\"></a>咱们不能允许所有的人都访问呀</h2><p>通过 <code>Access-Control-Allow-Origin</code>, 可以在后端设置可以跨域访问我们的域名列表, <code>*</code> 代表所有的域名都可以跨域访问我们的后端, 这样其实是有隐患的. 为了安全起见, 我们把可以跨域访问的域名限制为我们已知的域名. 老规矩.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221755.png\" alt=\"20240627221755\"></p>\n<p>后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改一行代码, 一定要添加协议哟</span></span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;http://127.0.0.1:8080&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改以后浏览器访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221808.png\" alt=\"20240627221808\"></p>\n<p>如果想要开放多个域名的跨域访问咋办咧?</p>\n<p>如果我们有多个业务域名需要跨域访问同一个服务器, 可以把允许的域名列表保存到一个数组里. 接到请求之后先判断当前请求域名是否在我们允许的域名列表里, 如果在的话直接添加到响应头 <code>Access-Control-Allow-Origin</code> 下.</p>\n<p>后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协议名必填, 如果同时存在 http 和 https 就写两条s</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> allowOrigin = [<span class=\"string\">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; <span class=\"attr\">headers</span>: &#123; origin &#125; &#125; = request;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (allowOrigin.<span class=\"title function_\">includes</span>(origin)) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Max-Age&#x27;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此时<a href=\"https://github.com/luoquanquan/cross-domain/commit/7015daf88efd5eff890f5bcaa40ce15ba1357a1f\">代码</a>, 首先访问<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221835.png\" alt=\"20240627221835\"></p>\n<p>响应结果成功打印, 没有任何问题.</p>\n<p>其次访问 <a href=\"https://www.baidu.com/\">https://www.baidu.com</a>, 打开控制台, 执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>)</span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span> &amp;&amp; xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221845.png\" alt=\"20240627221845\"></p>\n<p>没有任何报错, 返回结果成功打印. 成功…</p>\n<h2 id=\"你的请求怎么没有携带-Cookie\"><a href=\"#你的请求怎么没有携带-Cookie\" class=\"headerlink\" title=\"你的请求怎么没有携带 Cookie\"></a>你的请求怎么没有携带 Cookie</h2><p>一般情况下, 前端发出的跨域的 ajax OR <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">fetch</a> 请求是不会携带 Cookie 的. 但是, 后端小哥哥还要. 咋弄咧? 加上呗.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221857.png\" alt=\"20240627221857\"></p>\n<p>前端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 xhr.send 之前添加这一行</span></span><br><span class=\"line\">xhr.<span class=\"property\">withCredentials</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>添加完以后, 刷新浏览器.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627221905.png\" alt=\"20240627221905\"></p>\n<p>对于这个报错, 不知道你有没有啥好说的, 反正我是没啥话了…</p>\n<p>后端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协议名必填, 如果同时存在 http 和 https 就写两条s</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> allowOrigin = [<span class=\"string\">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8080&#x27;</span>, <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; method, <span class=\"attr\">headers</span>: &#123; origin, cookie &#125; &#125; = request;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (allowOrigin.<span class=\"title function_\">includes</span>(origin)) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 允许前端请求携带 Cookie</span></span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method === <span class=\"string\">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;预检请求&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!cookie) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  如果不存在 Cookie 就设置 Cookie</span></span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Set-Cookie&#x27;</span>, <span class=\"string\">&#x27;quanquan=fe&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此时<a href=\"https://github.com/luoquanquan/cross-domain/commit/3ebead3f6231df75eef65b25c5c4543b19cf49fb\">代码</a>, 再次到浏览器看一下.</p>\n<p>Cookie 中多了一条<br><img src=\"https://handle-note-img.niubishanshan.top/20240627221917.png\" alt=\"20240627221917\"></p>\n<p>请求中携带了 Cookie<br><img src=\"https://handle-note-img.niubishanshan.top/20240627221926.png\" alt=\"20240627221926\"></p>\n<p>通过下边的动图可以看出, 我们前后端 Cookie 传递非常的通畅.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain3.gif\" alt=\"cookie-2134567\"></p>\n<h2 id=\"我在响应头上给你返回了-Token-你取出来放在请求头上\"><a href=\"#我在响应头上给你返回了-Token-你取出来放在请求头上\" class=\"headerlink\" title=\"我在响应头上给你返回了 Token, 你取出来放在请求头上\"></a>我在响应头上给你返回了 Token, 你取出来放在请求头上</h2><p>工作中常常遇到后端把一些标识放在响应头上返回给前端的 case, 比如用户登录, 后端返回用户的唯一标识放在响应头上. 需要前端获取, 后续的请求都需要把这个标识放在请求头, 用于验证用户的身份.</p>\n<p>我们首先修改后端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 response.end() 前添加这一行</span></span><br><span class=\"line\">response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"string\">&#x27;quanquan&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改前端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 打印响应数据时同时打印所有响应头</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"title function_\">getAllResponseHeaders</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完成后<a href=\"https://github.com/luoquanquan/cross-domain/commit/a240adeb8566607174b7b4acffa8ec27149d0f35\">代码</a>, 浏览器看一下.</p>\n<p>console.log 打印出了空行<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222109.png\" alt=\"20240627222109\"></p>\n<p>但是在 Network Tab 下后端确实返回了响应头 token 字段. 懵逼了…<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222116.png\" alt=\"20240627222116\"></p>\n<p>原来, <code>Access-Control-</code> 系列还有一个响应头 <code>Access-Control-Expose-Headers</code>, 我们在后端代码 <code>response.end(...)</code> 之前加上 <code>response.setHeader(&#39;Access-Control-Expose-Headers&#39;, &#39;token&#39;);</code>再次会浏览器查看<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222125.png\" alt=\"20240627222125\"></p>\n<p>成功了 😄.</p>\n<h2 id=\"预检请求不返回内容把\"><a href=\"#预检请求不返回内容把\" class=\"headerlink\" title=\"预检请求不返回内容把\"></a>预检请求不返回内容把</h2><p>我们的响应结果本来应该是在正式的请求中才需要返回的, 但是我们看下预检请求的返回详情发现<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222134.png\" alt=\"20240627222134\"></p>\n<p>预检请求只是浏览器层面的解析, 前端代码根本拿不到. 这里的内容仅仅是浪费带宽和用户的流量. 所以我们改造一下.预检请求不再返回内容.</p>\n<p>后端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协议名必填, 如果同时存在 http 和 https 就写两条s</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> allowOrigin = [<span class=\"string\">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8080&#x27;</span>, <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; method, <span class=\"attr\">headers</span>: &#123; origin, cookie &#125; &#125; = request;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (allowOrigin.<span class=\"title function_\">includes</span>(origin)) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;PUT&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">  response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"string\">&#x27;quanquan&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method === <span class=\"string\">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHead</span>(<span class=\"number\">204</span>);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!cookie) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Set-Cookie&#x27;</span>, <span class=\"string\">&#x27;quanquan=fe&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此时<a href=\"https://github.com/luoquanquan/cross-domain/commit/8aae5963cb1afc48014ca355b844be62cc0a6e78\">代码</a>, 验证, 就不验证了吧. 好使 😄</p>\n<p>下基预告: 前两种跨域方案就算是讲完了, 不少小伙伴吐槽, jsonp 太老, cors 太麻烦…. 那么下一节我们尝试一下 <code>反向代理</code>, See you</p>\n","categories":["blog","小哥哥, 跨域要不要了解下"],"tags":["blog"]},{"title":"JSONP","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/JSONP/","content":"<blockquote>\n<p>随手整理了一下常用的跨域方式处理方案, 这里马上分享给大家 😋</p>\n</blockquote>\n<p>ps: 为了保证前后端编码的一致性, 本系列文章中涉及部分后端内容. 后端统一使用原生 nodejs 来搞, 请奔走相告.</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>为了托管我们的静态页面, 我们需要一个可以提供服务器环境的插件, 这里推荐 <code>live-server</code>, 通过命令 <code>npm i -g live-server</code> 安装即可. 该插件支持html文件热更新. 那用户体验简直飞起. 一键启动, 只需要在需要托管的目录执行 <code>live-server .</code> 即可.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain.gif\" alt=\"cross-domain\"></p>\n<p>ps: <code>live-server</code> 依赖 nodejs, 没有安装的小伙伴, 请参照<a href=\"https://juejin.im/post/5bfd43986fb9a049ed308f1a\">这篇文章</a>安装 nodejs.</p>\n<h2 id=\"AJAX-访问接口跨域解决方案\"><a href=\"#AJAX-访问接口跨域解决方案\" class=\"headerlink\" title=\"AJAX 访问接口跨域解决方案\"></a>AJAX 访问接口跨域解决方案</h2><p>首先, 更正几个常见的错误认识:</p>\n<ol>\n<li>同源策略是浏览器的行为, 和 js 关系不大.</li>\n<li>所谓跨域是指请求发起方页面所在的 url 与访问的 api 存在协议, 域名, 端口中任意一个不同即视为跨域. 并不单单是指域名.</li>\n<li>跨域这个东西, 日常工作中并不是很常用. 你想, 谁会闲的没事儿干总是请求人家别人的 api 去.</li>\n</ol>\n<h2 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h2><blockquote>\n<p>可能有小伙伴会说. 圈圈, 你扯淡, 既然浏览器有跨域限制. 为什么我司项目从 <a href=\"https://www.bootcdn.cn/\">bootcdn</a>, 引入的 jquery 依然跑在信息高速路上, 没有任何低头的意思?</p>\n</blockquote>\n<p>hhh, 😄. 这个质疑提的好. 浏览器同源策略禁止的是 ajax 请求. 然鹅, jquery 是一个 js 文件. 不受该策略的限制.</p>\n<p>我尼玛, 那到底是啥限制啥不限制嘛???</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173134.png\" alt=\"20240627173134\"></p>\n<p>根据 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">MDN</a> (自备梯子), 对于浏览器的同源策略的解释, 不受限制的外域资源加载情况有以下几种:</p>\n<ul>\n<li>script</li>\n<li>link</li>\n<li>img</li>\n<li>video</li>\n<li>object embed applet</li>\n<li>font-face 有的浏览器允许, 有的禁止</li>\n<li>frame</li>\n</ul>\n<p>那么问题来了, 挖掘机学校…, 不好意思走错片场了. 既然有这么多方式可以绕过浏览器同源策略的限制. 那么, 是不是我们可以做一点事情呢 ^_^</p>\n<p>答: 是的 😄.</p>\n<p>那还不抓紧搞起来?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain1.gif\" alt=\"搞起来\"></p>\n<p>我们使用第一个特例 <code>script</code> 一步一步实现跨域访问 (jsonp).</p>\n<ul>\n<li>首先, 创建本次文章的项目目录<br><img src=\"https://handle-note-img.niubishanshan.top/20240627173240.png\" alt=\"20240627173240\"><br>目录中, be 代表是后端项目, fe 代表前端项目. jsonp 目录说明我们是用 jsonp 的方式实现跨域.</li>\n<li>在项目根目录下执行 <code>live-server ./fe/jsonp/</code> 启动前端 web 容器</li>\n<li>编辑 <code>./fe/jsonp/</code> 目录下的 index.html 文件. 代码如下:</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>jsonp 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浏览器访问 <a href=\"http://localhost:8080/\">localhost:8080</a>浏览器如下图说明前端 web 容器部署成功.</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173255.png\" alt=\"20240627173255\"></p>\n<ul>\n<li>编写后端代码, 编写 <code>be/jsonp/index.js</code> 文件, 文件内容如下</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写完成后命令行执行 <code>node ./be/jsonp/index.js</code> 命令行中出现</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173333.png\" alt=\"20240627173333\"></p>\n<p>说明后端程序启动成功.此时可以通过浏览器访问 <a href=\"http://localhost:8888/\">localhost:8888</a>获得 hello world</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173348.png\" alt=\"20240627173348\"></p>\n<ul>\n<li>下来, 我们在前端的 <code>index.html</code> 中尝试通过 ajax 请求 <code>http://localhost:8888/</code> 来获取返回数据, 添加如下代码, 添加以后<a href=\"https://github.com/luoquanquan/cross-domain/commit/cce37cc50db74d0584f55da393d948c1dcfa7696\">代码</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888/&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    xhr.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>回到浏览器, 查看页面控制台, 熟悉的错误出现了. Access to XMLHttpRequest at <code>http://localhost:8888/</code> from origin <code>http://127.0.0.1:8080</code> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. 这个错误说明了, 我们是不能通过 ajax 的方式从 <code>http://127.0.0.1:8080</code> 访问 <code>http://localhost:8888/</code> 的.</p>\n<p>既然不能通过 ajax 实现跨域的访问, 同时 mdn 又说 script 标签不受同源策略的限制. 那么, 我们尝试一下用 script 标签引入 <code>http://localhost:8888/</code> 试试?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173403.png\" alt=\"20240627173403\"></p>\n<p>此时的<a href=\"https://github.com/luoquanquan/cross-domain/commit/d7ae69f656b1476a25057614264c411f7de13da4\">代码</a>, 网络请求没有问题. 知识报了 js 文件不合法的问题. 如果我们把接口返回的数据调整为规范的 js 是不是, 嗯哼???</p>\n<p>干起, 修改后端代码, 返回的内容由 <code>hello world</code> 改为 <code>console.log(&#39;hello world&#39;)</code>, 修改后的<a href=\"https://github.com/luoquanquan/cross-domain/commit/bb5b1d2c6a1f3756c4fc7d5dda04e9bc6b30310e\">代码</a>(修改完后端代码以后切记重启服务哈 ^_^)</p>\n<p>不得了, 不得了, 返回的结果不紧没有报错, 甚至可以执行. 我们从后端返回的 <code>hellow world</code> 成功的答应到了控制台了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173414.png\" alt=\"20240627173414\"></p>\n<p>试想一下, 如果我们通过 js 文件里定义一个变量用于存放后端返回给前端的数据, 前端插入一个 script 标签, 把后端返回的变量定义执行一把. 那样定义的变量岂不是就可以在全局可以获取到后端定义的变量了. 赶紧试一把 😄</p>\n<p>首先修改后端代码, 只需要调整一行.(修改完后端代码以后切记重启服务哈 ^_^)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;var aaaa = &#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>其次调整前端代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 第一次因为还没有引入外部 js 所以打印 undefined</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">aaaa</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 1 秒后, 外部 js 加载完成, 能打印出后端返回的变量定义</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">aaaa</span>)&#125;, <span class=\"number\">1e3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://localhost:8888/&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当前<a href=\"https://github.com/luoquanquan/cross-domain/commit/5bdc0dd023f4676a8d6eebb87af73e087661d830\">代码</a>, 通过这种方式, 我们能够成功的获取到后端返回的数据. 但是, 接口这个东西时快时慢. 写个定时器轮询? 有点不够 666, 肿么办?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173430.png\" alt=\"20240627173430\"></p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  思考 5 分钟  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627173437.png\" alt=\"20240627173437\"></p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   5 分钟已过  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>既然, 写在 script 标签上的内容是可以直接执行的. 那么, 如果我们把变量的定义改写成一个函数的执行可不可以呢 ^_^, 试试?</p>\n<p>后端(修改完后端代码以后切记重启服务哈 ^_^)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;aaaa(&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;)&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>前端</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 由于后端返回的内容即将调用函数 aaaa, 那我们就预先定义一个呗, 这东西就叫回调函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">aaaa</span>(<span class=\"params\">param</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;后端返回的参数是: &#x27;</span>, param)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://localhost:8888/&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果<br><img src=\"https://handle-note-img.niubishanshan.top/20240627173450.png\" alt=\"20240627173450\"></p>\n<p>此时<a href=\"https://github.com/luoquanquan/cross-domain/commit/a2e0ba9ca2edcabf03ca549fd018d85c96fa0c64\">代码</a>, 目前为止, 我们已经彻底解决了跨域的问题. 很靠谱有木有? 当然木有. 这个玩意儿只是说明了 jsonp 的原理, 并没有实用性. 下一步, 我们做一点封装. 让我们的代码更健壮 💪🏻</p>\n<p>最后, 修改一把代码</p>\n<p>前端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Jsonp 类</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化时传入两个参数, url 是接口的url</span></span><br><span class=\"line\"><span class=\"comment\">// cb 是对于接口返回的参数的处理</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jsonp</span>(<span class=\"params\">url, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">callbackName</span> = <span class=\"string\">&#x27;jsonp_&#x27;</span> + <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = url</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化方法 用于拼接 url</span></span><br><span class=\"line\"><span class=\"title class_\">Jsonp</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~<span class=\"variable language_\">this</span>.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> + <span class=\"string\">&#x27;&amp;callback=&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">callbackName</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> + <span class=\"string\">&#x27;?callback=&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">callbackName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">createCallback</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">createScript</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 script 标签, src 取接口请求的url</span></span><br><span class=\"line\"><span class=\"title class_\">Jsonp</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">createScript</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">    script.<span class=\"property\">src</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">url</span></span><br><span class=\"line\">    script.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 删除 window 下定义的无用方法</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"variable language_\">window</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">callbackName</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定回调函数</span></span><br><span class=\"line\"><span class=\"title class_\">Jsonp</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">createCallback</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">callbackName</span>] = <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 jsonp 实例, 并指定回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Jsonp</span>(<span class=\"string\">&#x27;http://localhost:8888/&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后端(修改完后端代码以后切记重启服务哈 ^_^)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 新引入了 url 模块, 主要用于解析请求参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取前端请求数据</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> queryObj = url.<span class=\"title function_\">parse</span>(request.<span class=\"property\">url</span>, <span class=\"literal\">true</span>).<span class=\"property\">query</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 这里把前端传来的 callback 字段作为后端返回的回调函数的函数名称</span></span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">`<span class=\"subst\">$&#123;queryObj.callback&#125;</span>(&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;)`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>目前<a href=\"https://github.com/luoquanquan/cross-domain/commit/75331e68e664549144cb98c8086aa38d5cc57310\">代码</a>, 至此我们已经能够顺利的获取跨域资源了. 👏🏻.</p>\n<p>下集预告: jsonp 是一种传统的跨域解决方案, 关于这种方式的优缺点, 请<a href=\"https://www.baidu.com/\">度娘</a>, 下一节, 我们一起学习相对比较现代一点的跨域解决方案. <code>CORS</code>, See You</p>\n","categories":["blog","小哥哥, 跨域要不要了解下"],"tags":["blog"]},{"title":"ServerProxy","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/ServerProxy/","content":"<blockquote>\n<p>在系列文章的<a href=\"https://juejin.im/post/5c07fa04e51d451de968906b\">第一篇</a>我们谈到过跨域问题产生的原因是<strong>浏览器</strong>的同源策略. 那么服务器之间通信就不会受到相关条件的限制. 那么是不是我们可以通过同域服务器帮助访问其他域名的 api 呢? 如果可以的话, 那岂不是可以想访问谁就访问谁? 限制, 不存在的…</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223051.png\" alt=\"20240627223051\"></p>\n<p>ps: 本文涉及到部分后端知识, 需要有一丢丢的 <code>nodejs</code> <code>koa</code> 基础. 主要用于搭建一个 <code>web</code> 服务器, 当然没有基础也没啥关系, 先去 <a href=\"http://nodejs.cn/\">node</a> <a href=\"https://koajs.cn/#\">koa</a> 官网看看. 回不回来???</p>\n<p>随你咯 😄</p>\n<h2 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h2><p>继续上一步, 本文只会创建一个后端项目. 所以不需要在 <code>./fe</code> 目录下创建前端项目啦, 项目目录如下.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223256.png\" alt=\"20240627223256\"></p>\n<p>其中, <code>serverProxy</code> 目录是项目的主目录. <code>www</code> 目录即为前端静态文件的托管目录. <code>base.js</code> 为后端主程序, <code>add.js subtract.js</code> 分别表示两个第三方服务, 分别提供了计算加法和减法的能力.</p>\n<h2 id=\"安装-koa\"><a href=\"#安装-koa\" class=\"headerlink\" title=\"安装 koa\"></a>安装 koa</h2><ul>\n<li>首先执行 <code>cd be/serverProxy</code> 将路径切换到 <code>serverProxy</code></li>\n<li>执行 <code>npm init -y</code> 初始化为一个 node 项目</li>\n<li>执行 <code>npm i koa -S</code> 完成 <code>koa</code> 的安装</li>\n</ul>\n<p>验证 <code>koa</code> 安装是否完成</p>\n<ul>\n<li>编辑 <code>base.js</code> 写入以下内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成后执行 <code>node base.js</code> 看到命令行中输出了 <code>the server is listen:  1234</code> 说明启动成功</li>\n<li>浏览器访问 <a href=\"http://localhost:1234/\">localhost</a></li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223320.png\" alt=\"20240627223320\"></p>\n<p>此时<a href=\"https://github.com/luoquanquan/cross-domain/commit/0f610b65d366d75f243c97c10d26b780da2c2cfb\">代码</a></p>\n<h2 id=\"引入-koa-static-模块\"><a href=\"#引入-koa-static-模块\" class=\"headerlink\" title=\"引入 koa-static 模块\"></a>引入 <code>koa-static</code> 模块</h2><p>在之前文章中, 我们总是要通过 <code>live-server</code> 启动一个本地的静态资源服务. 用于托管前端静态文件. <code>koa</code> 生态中有现成的中间件<a href=\"https://www.npmjs.com/package/koa-static\"><code>koa-static</code></a>可以提供直接在后端项目中创建静态资源服务的能力.</p>\n<ul>\n<li>首先执行 <code>npm i koa-static -S</code> 安装 <code>koa-static</code></li>\n<li>调整 <code>base.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 koa-static</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> koaStatic = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa-static&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 koa-static 中间件, 并指定静态文件目录为 www</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">koaStatic</span>(<span class=\"string\">&quot;./www&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ctx.<span class=\"property\">req</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写前端 <code>index.html</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ServerProxy 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        ServerProxy 实现跨域</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 <code>node base.js</code> 重启项目</li>\n<li>浏览器打开 <a href=\"http://localhost:1234/index.html\">localhost:1234&#x2F;index.html</a></li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223339.png\" alt=\"20240627223339\"></p>\n<p>之前准备的 html 页面赫然在目 😄. 至此, 静态文件服务就搭建成功了(相当于我们自己实现了一个 <code>live-server</code>)<a href=\"https://github.com/luoquanquan/cross-domain/commit/b8780f2cc32fc4ba55bd90bbadfbb1a603db00f4\">代码地址</a></p>\n<h2 id=\"通过-ajax-访问当前后端接口\"><a href=\"#通过-ajax-访问当前后端接口\" class=\"headerlink\" title=\"通过 ajax 访问当前后端接口\"></a>通过 ajax 访问当前后端接口</h2><p>通过 <code>koa-static</code> 中间件, 我们搭建了一个自己的静态文件服务器. 接下来演示一个不跨域的请求…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223349.png\" alt=\"20240627223349\"></p>\n<ul>\n<li>首先修改后端代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> koaStatic = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa-static&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">koaStatic</span>(<span class=\"string\">&quot;./www&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 获取本次接收的请求的请求路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = ctx.<span class=\"property\">req</span>.<span class=\"property\">url</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果请求路径以api开头, 那么作为接口请求处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/api&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这样实现的路由不是很优雅, 但是能用 😂</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (path) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/api/getFriend&quot;</span>:</span><br><span class=\"line\">                ret = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>, <span class=\"attr\">friend</span>: <span class=\"string\">&quot;gl&quot;</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                ret = &#123; <span class=\"attr\">errno</span>: <span class=\"number\">1</span>, <span class=\"attr\">errmsg</span>: <span class=\"string\">&quot;未知接口&quot;</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = ret;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中定义了 <code>/api/getFriend</code> 接口, 通过浏览器访问的如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223404.png\" alt=\"20240627223404\"></p>\n<p>ps: 需要执行 <code>node base.js</code> 重启后端项目</p>\n<p>接下来修改前端代码. 通过 ajax 的方式访问该接口</p>\n<p>修改前端代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ServerProxy 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        ServerProxy 实现跨域</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 一个常规的 ajax, 感兴趣的兄弟们也看看. 手写 ajax 好多面试官还在考</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;/api/getFriend&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;接口返回的数据为: &quot;</span>, xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>刷新浏览器, 控制台展示如下. 没有报错, 返回的信息前端直接拿到了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223418.png\" alt=\"20240627223418\"></p>\n<p>原来前后端同域时数据交互这么的简单.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223426.png\" alt=\"20240627223426\"></p>\n<p>前后端跑通阶段<a href=\"https://github.com/luoquanquan/cross-domain/commit/9b53deab8d22ca5558185347b7f0587db3f443c8\">代码</a></p>\n<h2 id=\"完善第三方服务\"><a href=\"#完善第三方服务\" class=\"headerlink\" title=\"完善第三方服务\"></a>完善第三方服务</h2><p>项目开发中经常会用到一些基础服务, 比如天气信息, 地理位置信息等等. 这些服务能力一般是通过调用第三方的接口来实现的(你开发一个网站, 先发射一颗气象卫星到天上也不太现实). 这一步我们创建两个第三方服务, 分别提供加法和减法运算.</p>\n<p>加法运算服务 <code>add.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">1111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; a, b &#125; = ctx.<span class=\"property\">query</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试将参数转化为数字后进行加法操作</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Number</span>(a) + <span class=\"title class_\">Number</span>(b);</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = &#123; result &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>执行命令 <code>node add.js</code> 启动程序, 然后浏览器端访问<a href=\"http://localhost:1111/?a=1&b=2\">localhost</a>得到的结果如下, 说明加法计算服务启动成功.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223442.png\" alt=\"20240627223442\"></p>\n<p>减法运算服务 <code>subtract.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">2222</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; a, b &#125; = ctx.<span class=\"property\">query</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试将参数转化为数字后进行减法操作</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Number</span>(a) - <span class=\"title class_\">Number</span>(b);</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = &#123; result &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>执行命令 <code>node subtract.js</code> 启动程序, 然后浏览器端访问<a href=\"http://localhost:2222/?a=10&b=2\">localhost</a>得到的结果如下, 说明减法计算服务启动成功.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223528.png\" alt=\"20240627223528\"></p>\n<p>目前<a href=\"https://github.com/luoquanquan/cross-domain/commit/feaad9184ab5c6c472ab6196b027634254739ee3\">代码</a></p>\n<h2 id=\"通过后端代理访问第三方服务\"><a href=\"#通过后端代理访问第三方服务\" class=\"headerlink\" title=\"通过后端代理访问第三方服务\"></a>通过后端代理访问第三方服务</h2><p>创建完加法和减法服务, 我们还是有侥幸心理忍不住在前端项目里访问一下试试, 万一能通了呢? 就不用费事儿研究跨域了, 尝试一下</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223611.png\" alt=\"20240627223611\"></p>\n<p>修改前端代码中的接口地址 <code>xhr.open(&#39;GET&#39;, &#39;http://localhost:1111/?a=1&amp;b=2&#39;)</code> <a href=\"https://github.com/luoquanquan/cross-domain/commit/3259860ab2c02b9f3df33e42dccb6a26281caad2\">完整代码</a>, 之后直接刷新浏览器(请思考, 为什么修改了 js 文件需要执行 <code>node ...</code> 重启服务, 而修改了 html 文件只需要刷新浏览器就可以了呢?).</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223623.png\" alt=\"20240627223623\"></p>\n<p>还是之前的报错, 还是熟悉的味道. 不好使…</p>\n<p>回想一下之前的思路. 浏览器有同源策略的限制服务器没有. 我们的前端项目托管在后端项目中所以访问我们自己的后端不跨域. 我们的后端请求第三方服务没有限制. 那么 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223632.png\" alt=\"20240627223632\"></p>\n<ul>\n<li>执行 <code>npm i axios -S</code> 安装 axios, 后端通过它来请求目标服务器</li>\n<li>修改代码</li>\n</ul>\n<p><code>base.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> koaStatic = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;koa-static&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;axios&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">1234</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">koaStatic</span>(<span class=\"string\">&quot;./www&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 获取本次接收的请求的请求路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = ctx.<span class=\"property\">req</span>.<span class=\"property\">url</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ctx.query.server&quot;</span>, ctx.<span class=\"property\">query</span>.<span class=\"property\">server</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果请求路径以api开头, 那么作为接口请求处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/api&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这样实现的路由不是很优雅, 但是能用 😂</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (path) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/api/getFriend&quot;</span>:</span><br><span class=\"line\">                ret = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>, <span class=\"attr\">friend</span>: <span class=\"string\">&quot;gl&quot;</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 如果接口需要代理接口路径为 /api/proxy</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/api/proxy&quot;</span>:</span><br><span class=\"line\">                <span class=\"comment\">// axios 直接访问前端给出的目标服务器url, 并将目标服务器返回的数据直接返回给前端</span></span><br><span class=\"line\">                ret = (<span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(ctx.<span class=\"property\">query</span>.<span class=\"property\">server</span>)).<span class=\"property\">data</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                ret = &#123; <span class=\"attr\">errno</span>: <span class=\"number\">1</span>, <span class=\"attr\">errmsg</span>: <span class=\"string\">&quot;未知接口&quot;</span> &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = ret;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the server is listen: &quot;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>前端代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ServerProxy 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>ServerProxy 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        a: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span> b:</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>计算加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;subtrnct&quot;</span>&gt;</span>计算减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>计算结果为: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ret&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> aDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;a&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> bDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;b&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> addBtn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;add&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> subtrnctDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;subtrnct&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> retDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;ret&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (!a.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>() || !b.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"title function_\">open</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&quot;GET&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&quot;/api/proxy&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"string\">&quot;?server=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"built_in\">encodeURIComponent</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"string\">&quot;http://localhost:1111/?a=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                a.<span class=\"property\">value</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                <span class=\"string\">&quot;&amp;b=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                b.<span class=\"property\">value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        )</span></span><br><span class=\"line\"><span class=\"language-javascript\">                );</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;接口返回的数据为: &quot;</span>, xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        retDom.<span class=\"property\">innerHTML</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>).<span class=\"property\">result</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">subtrnct</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (!a.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>() || !b.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"title function_\">open</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&quot;GET&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&quot;/api/proxy&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"string\">&quot;?server=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"built_in\">encodeURIComponent</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"string\">&quot;http://localhost:2222/?a=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                a.<span class=\"property\">value</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                <span class=\"string\">&quot;&amp;b=&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                b.<span class=\"property\">value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        )</span></span><br><span class=\"line\"><span class=\"language-javascript\">                );</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;接口返回的数据为: &quot;</span>, xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        retDom.<span class=\"property\">innerHTML</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>).<span class=\"property\">result</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            addBtn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, add);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            subtrnctDom.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, subtrnct);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后结果:<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain6.gif\"></p>\n<p>结语: ServerProxy 的原理大概就是这个样子的啦, 通过 ajax 访问同域后端服务, 后端服务访问目标服务并将目标服务返回的内容透传给前端. 当然实际操作起来不会像例子这么简单. 我的另一个系列文章<a href=\"https://juejin.im/post/5bfd43986fb9a049ed308f1a\">【手把手带你撸一个接口测试工具】</a>将会详细介绍复杂一些的情况, 包括不同的请求类型, 请求头设置以及响应头获取等等. 希望感兴趣的小伙伴继续关注.</p>\n<p>关于跨域的其他方式: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain\">document.domain</a> 一行代码可以搞定, 适合同主域名不同子域名的情况. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\">postMessage</a> 需要添加额外 iframe, 整体实现较为简单, 一个 API 搞定, 感兴趣的同学可以看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\">文档</a>. 还有一些比较小众的做法 <code>flash</code> <code>CSST</code> 前端打点尝尝用到的 img 标签等等, 这里就不一一列举了, 学无止境…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627223752.png\" alt=\"20240627223752\"></p>\n","categories":["blog","小哥哥, 跨域要不要了解下"],"tags":["blog"]},{"title":"NGINX 反向代理","url":"/blog/%E5%B0%8F%E5%93%A5%E5%93%A5-%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/blog/%E5%B0%8F%E5%93%A5%E5%93%A5,%20%E8%B7%A8%E5%9F%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%8B/NGINX%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","content":"<blockquote>\n<p>原本本系列文章是不打算详写 NGINX 反向代理的. 至于为什么不想写呢? 当然是因为我不太会咯~~</p>\n<p>但是, 不久前有大佬点了这道菜, 那当然就得上啦 😄</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222357.png\" alt=\"20240627222357\"></p>\n<h2 id=\"代理是个啥\"><a href=\"#代理是个啥\" class=\"headerlink\" title=\"代理是个啥\"></a>代理是个啥</h2><p>既然要聊反向代理, 那首先得知道代理是个啥吧? 嗯.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222428.png\" alt=\"20240627222428\"></p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>比如, 你买束花, 想要给隔壁工位的测试妹子小丽表白. 但是又怕被人家直面拒绝太没面子. 于是你把鲜花委托给平时和小丽一起的测试小伙伴小红. 让她帮忙把花送给小丽. 这就是一个简单的代理过程, 小红作为代理帮你把花送给了小丽, 当然这种情况在现实中并不推荐使用, 因为难以避免中间商赚差价 😂.</p>\n<p>在上面的例子中, 你作为客户端(请求方), 想要向服务方(小丽)发起请求. 但是碍于面子你主动找到了第三方(小红)作为代理向服务方发送请求, 这种情况就是常说的<code>正向代理</code>. 正向代理在互联网中的使用主要是科学上网, 你想访问谷歌但是碍于防火墙你只能通过vpn服务器作为代理才能访问. 这个时候一般也要找值得信赖的vpn厂商, 避免中间商赚差价 😄.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222438.png\" alt=\"20240627222438\"></p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>关于反向代理的例子, 那就比较多啦. 比如, 孤独的你躺在床上夜不能寐. 于是乎, 拿出手机, 点亮了屏幕, 拨通 <code>10086</code>, 中国移动就会随机分配一个当前处于空闲的客服MM, 你可以和客服MM聊聊天, 问问她家住哪里, 有没有男朋友, 她的微信号, 她的手机号, 星座, 八字…….</p>\n<p>在这个例子中, 中国移动就充当了反向代理的角色. 你只需要拨打 <code>10086</code>. 至于会不会分配到 MM 会分配到哪个 MM 在接通之前你都是不知道的. 反向代理在互联网中的使用主要是实现负载均衡. 当你访问某个网站的时候, 反向代理服务器会从当前网站的所有服务器中选择一个空闲的服务器为你响应. 用于均衡每台服务器的负载率.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222447.png\" alt=\"20240627222447\"></p>\n<h2 id=\"修改-hosts-完成域名绑定\"><a href=\"#修改-hosts-完成域名绑定\" class=\"headerlink\" title=\"修改 hosts 完成域名绑定\"></a>修改 hosts 完成域名绑定</h2><p>mac 用户直接执行 <code>vim /private/etc/hosts</code> 在 hosts 文件最后添加一行:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1 a.com</span><br></pre></td></tr></table></figure>\n\n<p>这一句是什么意思呢? 就是告诉我们的电脑访问 <code>a.com</code> 的时候, 无需请求 DNS, 直接指向我们本机.</p>\n<p>ps: win 环境下, hosts 文件在 <code>C:\\Windows\\System32\\drivers\\etc</code> 文件夹下. 如果没有权限修改, 把 hosts 文件先拷贝到别的位置, 通过编辑器打开并添加最后一行内容以后再剪切到原来的位置替换即可.</p>\n<p>验证: 打开命令行窗口执行 <code>ping a.com</code>, 如果访问的 ip 为 127.0.0.1 说明我们的域名绑定就完成啦 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain4.gif\"></p>\n<h2 id=\"安装-nginx\"><a href=\"#安装-nginx\" class=\"headerlink\" title=\"安装 nginx\"></a>安装 nginx</h2><blockquote>\n<p>要做 NGINX 反向代理, 肯定要安装 <a href=\"http://nginx.org/\">nginx</a>, 本文安装步骤示例环境为 mac, win 的小伙伴, 可以百度一下嗷, 这个东西大同小异.</p>\n</blockquote>\n<ul>\n<li>安装 brew 命令, 执行 <code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>\n<li>安装 nginx, 执行 <code>brew install nginx</code></li>\n<li>启动 nginx <code>nginx</code>, 如果报没有权限, 执行 <code>sudo nginx</code></li>\n</ul>\n<p>nginx 启动后, 浏览器打开 <a href=\"http://localhost:8080/\">localhost:8080</a>, 即可验证. 出现以下界面说明安装成功.<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222546.png\" alt=\"20240627222546\"></p>\n<h2 id=\"nginx-配置初探\"><a href=\"#nginx-配置初探\" class=\"headerlink\" title=\"nginx 配置初探\"></a>nginx 配置初探</h2><p>配置完 hosts 域名已经能够成功绑定. 现在如果我们访问 <code>a.com</code> 实际上是会访问到我们的自己的电脑辣. 那还不抓紧试一下?</p>\n<p>浏览器访问 <a href=\"http://a.com/\">a.com</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222559.png\" alt=\"20240627222559\"></p>\n<p>这是什么鬼????<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222610.png\" alt=\"20240627222610\"></p>\n<p>为什么会 <strong>无法访问此网站</strong> 呢? 我们下载安装完 nginx 还没有做任何配置. 接下来, 我们稍微配置一下就 OK:</p>\n<ul>\n<li>命令行切换到 nginx 配置目录下 <code>cd /usr/local/etc/nginx/servers</code></li>\n<li>创建并编辑配置文件 <code>vim test.conf</code>, 在配置文件中粘贴以下内容</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 监听80端口号</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听访问的域名</span><br><span class=\"line\">    server_name a.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 根据访问路径配置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 把请求转发到 https://www.baidu.com</span><br><span class=\"line\">        proxy_pass https://www.baidu.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保存文件, 并执行 <code>nginx -s reload</code> 重启 nginx. (此处原本有一个拼写错误, 感谢<a href=\"https://juejin.im/user/58f56b4b0ce463006bc084eb\">StanYe</a>小伙伴提出 😄)</li>\n<li>回到浏览器, 打开 a.com 的页签, 强制刷新.<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222646.png\" alt=\"20240627222646\"></li>\n</ul>\n<p>恭喜你已经完成了第一个 nginx 配置.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cross-domain5.gif\"></p>\n<h2 id=\"创建跨域环境\"><a href=\"#创建跨域环境\" class=\"headerlink\" title=\"创建跨域环境\"></a>创建跨域环境</h2><blockquote>\n<p>通过一系列的折腾, 我们已经可以通过 nginx 将<code>a.com</code> 转发到百度. 完成了第一步, 接下来我们创建跨域的 Case 并一步一步通过 nginx 配置实现跨域.</p>\n</blockquote>\n<p>首先, 项目前后端添加 nginx 目录, 用户存放前后端代码. 代码结构如下图所示.<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222756.png\" alt=\"20240627222756\"></p>\n<p>其次编写前后端代码:</p>\n<p>前端代码(<code>./fe/nginx/index.html</code>):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CORS 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>CORS 实现跨域<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8888/api/getFriend&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"string\">&#x27;quanquanbunengshuo&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">withCredentials</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"title function_\">getAllResponseHeaders</span>())</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写完前端代码以后, 启动前端 web 容器. <code>live-server ./fe/nginx</code><br><img src=\"https://handle-note-img.niubishanshan.top/20240627222809.png\" alt=\"20240627222809\"></p>\n<p>命令行中出现了黄色警告, 通知我们 8080 端口已经被占用, 这又是为什么呢? 大家请思考一哈.<br><img src=\"https://handle-note-img.niubishanshan.top/20240627222816.png\" alt=\"20240627222816\"></p>\n<p>我们重新指定一个端口<code>live-server ./fe/nginx --port=9999</code> 哈哈, 换一个指令, 依旧是那么顺畅. ^_^</p>\n<p>后端代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">8888</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 http 服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(request.<span class=\"property\">headers</span>)</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&#123;name: &#x27;quanquan&#x27;, friend: &#x27;guiling&#x27;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务, 监听端口</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动成功, 正在监听: &#x27;</span>, <span class=\"variable constant_\">PORT</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>启动后端服务 <code>node ./be/nginx/index.js</code></p>\n<h2 id=\"完善-nginx-配置\"><a href=\"#完善-nginx-配置\" class=\"headerlink\" title=\"完善 nginx 配置\"></a>完善 nginx 配置</h2><blockquote>\n<p>前后端代码已经准备完成, 这一步我们就来点干货. 完成最后的配置.</p>\n</blockquote>\n<ul>\n<li>首先, 修改 nginx 配置, 把百度地址替换成本地的前端地址</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 监听80端口号</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听访问的域名</span><br><span class=\"line\">    server_name a.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 根据访问路径配置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 把请求转发到 http://127.0.0.1:9999</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:9999;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改完成 nginx 配置文件以后, 切记执行 <code>nginx -s -reload</code> 重启 nginx.</li>\n<li>访问<a href=\"http://a.com/\">a.com</a></li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222832.png\" alt=\"20240627222832\"></p>\n<p>熟悉的报错又出现了…</p>\n<ul>\n<li>修改前端项目中的接口地址</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口地址修改为当前域名下 /api 路劲下的 getFriend</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;/api/getFriend&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改 nginx 配置文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 监听80端口号</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听访问的域名</span><br><span class=\"line\">    server_name a.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 根据访问路径配置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 把请求转发到 http://127.0.0.1:9999</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:9999;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听根目录下的 /api 路径</span><br><span class=\"line\">    location /api/ &#123;</span><br><span class=\"line\">        # 把请求转发到 http://127.0.0.1:8888</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新加的对于 api 路径的监听的意思就是把关于后端 api 的请求转发到后端项目上(哈哈, 当然这就是为啥好多后端接口都是要有 <code>/api</code> 开头的啦). 重启 nginx 以后, 再次刷新浏览器, 后端返回的结果已经成功的打印到了控制台, 本次跨域访问任务完成.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222847.png\" alt=\"20240627222847\"></p>\n<p>细心的小伙伴肯定发现了, 控制台还有一个报错. 这个是因为我们的项目中用到了 <code>live-server</code> 这个工具需要 websocket 导致的. 我们可以通过添加以下配置解决.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_http_version 1.1;</span><br><span class=\"line\">proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">proxy_set_header Connection &quot;upgrade&quot;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627222857.png\" alt=\"20240627222857\"></p>\n<p>报错消失 😄, 此时完整的 nginx 配置文件为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 监听80端口号</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听访问的域名</span><br><span class=\"line\">    server_name a.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 根据访问路径配置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 把请求转发到 http://127.0.0.1:9999</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:9999;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 兼容websocket</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 监听根目录下的 /api 路径</span><br><span class=\"line\">    location /api/ &#123;</span><br><span class=\"line\">        # 把请求转发到 http://127.0.0.1:8888</span><br><span class=\"line\">        proxy_pass http://localhost:8888;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前后端代码地址为: <a href=\"https://github.com/luoquanquan/cross-domain/commit/f38f56689fdac1526244ecadaa979a52c9c4a7ea\">github</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此, 我们已经通过 nginx 反向代理的方式实现了跨域访问 api, 在系列文章<a href=\"https://juejin.im/post/5c07fa04e51d451de968906b\">第一篇</a>对于跨域的解释为: 跨域源于同源策略, 是浏览器保证用户安全的行为. 我们使用的 nginx 反向代理实际上是对浏览器的一种 “哄骗”, 让它认为自己访问到的是同域的 api. 实际上是在服务端做了个调包, 这个道理就如同你拨打 10086 你就认定了给你分配到的一定是中国移动的客服MM(客服GG也是有可能出现的 😄)而中国移动的客服MM就是一个很安全的聊天对象, 没有必要再进行限制…</p>\n<p>下集预告: 终于蹩脚的码完了最后一行, 作为生产环境中最常用的 nginx 反向代理, 比我想象的要简单很多很多. 由于涉及到诸多配置的步骤. 有写的不明白的地方还望小伙伴们评论区一起讨论. 下一节预计聊聊服务端代理 <code>ServerProxy</code> 这个也是我要做的<a href=\"https://juejin.im/post/5bfd43986fb9a049ed308f1a\">接口测试工具</a>需要用到的技术方案, See you.</p>\n","categories":["blog","小哥哥, 跨域要不要了解下"],"tags":["blog"]},{"title":"新手理解 apply 和 call","url":"/blog/%E5%9F%BA%E7%A1%80%E5%88%86%E4%BA%AB/blog/%E5%9F%BA%E7%A1%80%E5%88%86%E4%BA%AB/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3%20apply%20%E5%92%8C%20call/","content":"<h2 id=\"说点题外话\"><a href=\"#说点题外话\" class=\"headerlink\" title=\"说点题外话\"></a>说点题外话</h2><p>本文仅适合新手, 我是说很新的那种, 旨在和大家共同了解 js 的 call 和 apply 方法. 笔者水平有限, 文中不免会有疏漏, 大神请轻喷.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625182729.png\" alt=\"20240625182729\"></p>\n<h2 id=\"开始说正事\"><a href=\"#开始说正事\" class=\"headerlink\" title=\"开始说正事\"></a>开始说正事</h2><p>apply 和 call 都是 JS 函数对象的原型方法, 因此我们可以在任何的函数调用这两个方法, 主要作用就是使得对象能够借用到本来不属于他的方法(就是对象的本领). 有点懵逼是不是? 下边我们来举个栗子.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625182854.png\" alt=\"20240625182854\"></p>\n<h2 id=\"狗急跳墙\"><a href=\"#狗急跳墙\" class=\"headerlink\" title=\"狗急跳墙\"></a>狗急跳墙</h2><p>假设我们有一只喵星人:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cat = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 它的名字叫 cat</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 它可以跑</span></span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> can run`</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 还可以跳(包括跳墙是可以的)</span></span><br><span class=\"line\">    <span class=\"title function_\">jump</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> can jump`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时, 它还有一个小伙伴汪星人:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dog = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 汪星人叫 dog</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 会跑</span></span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> can run`</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 还会吠</span></span><br><span class=\"line\">    <span class=\"title function_\">bark</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> bark loudly`</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 马戏团的🐶, 还会做算数</span></span><br><span class=\"line\">    <span class=\"title function_\">count</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> + <span class=\"subst\">$&#123;b&#125;</span> = <span class=\"subst\">$&#123;a + b&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现, 猫狗各有所长. 猫咪可以跳墙, 但是 🐶🐶 可以吠叫. 假如, 现在的情况提别紧急, 紧急到了什么地步呢. 大家都要到墙头上才能保证安全. 这个时候猫咪直接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat.<span class=\"title function_\">jump</span>()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625182942.png\" alt=\"20240625182942\"><br>成功翻上墙头.</p>\n<p>然而, 现在 🐶🐶 就尴尬了. 跳上墙头??? 不会</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625182958.png\" alt=\"20240625182958\"></p>\n<p>就一个 <code>bark()</code> 喊半天也没有用呀!!!</p>\n<p>这个时候 apply 就派上用场了. 我们执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat.<span class=\"property\">jump</span>.<span class=\"title function_\">apply</span>(dog)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183038.png\" alt=\"20240625183038\"></p>\n<p>🐶🐶 也顺利脱险啦. 跳上了墙头, 狗狗欢快的 <code>bark()</code> 这时候猫咪不乐意了, 它也想吠叫, 但是没有这个本领. 这时候 🐶🐶 也大方的借出了自己的 bark 本领给了猫咪.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">dog.<span class=\"property\">bark</span>.<span class=\"title function_\">apply</span>(cat)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183114.png\" alt=\"20240625183114\"></p>\n<p>两只小可爱欢快的在墙头上叫起来 ^_^.</p>\n<h2 id=\"apply方法的原理\"><a href=\"#apply方法的原理\" class=\"headerlink\" title=\"apply方法的原理\"></a>apply方法的原理</h2><p>apply方法可以当作是一种方法的借调: 也就是说把某个方法引用到不包含它的某个对象上. 方法（函数）是用来被对象调用才能够执行的, 而apply恰恰指向了调用当前方法的对象. 初学者可能会误认为apply是对向继承了之前引用的方法. 然而, 这里不太建议这样理解. 我们可以再次利用狗狗对象调用jump方法, 得到的结果如下图所示:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183129.png\" alt=\"20240625183129\"></p>\n<p>狗狗, 并没有学会 jump 的本领, 它只是在紧急时刻借用了猫咪的跳墙方法.</p>\n<h2 id=\"需要参数\"><a href=\"#需要参数\" class=\"headerlink\" title=\"需要参数\"></a>需要参数</h2><p>我们知道我们的 🐶🐶 来自马戏团, 具备了算数的能力. 不信试试?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">dog.<span class=\"title function_\">count</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183142.png\" alt=\"20240625183142\"></p>\n<p>简直了不得, 有木有? 然而, 喵星人现在也想要去马戏团. 可是它不会算数, 就需要从汪星人那里借来 <code>count</code> 本领. 那么就尴尬了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183157.png\" alt=\"20240625183157\"></p>\n<p>既然要算加法, 就需要把两个加数给人家嘛. 怎么给呢?<br>只需要把 <code>count</code> 方法需要的参数拼接到一个数组里就可以啦. 就像酱紫.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183214.png\" alt=\"20240625183214\"></p>\n<h2 id=\"那么-call-方法咧\"><a href=\"#那么-call-方法咧\" class=\"headerlink\" title=\"那么 call 方法咧\"></a>那么 call 方法咧</h2><p>其实 call 方法和 apply 方法用法几乎完全一致, 为什么是几乎呢? 在传递参数的时候. 刚刚我们用到的 apply 方法需要把算数的参数放到一个数组里告诉 count 方法. 用 call 的时候就方便多了. 直接撸.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183230.png\" alt=\"20240625183230\"></p>\n<p>这个样式儿. 简直是舒服呀!</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625183239.png\" alt=\"20240625183239\"></p>\n","categories":["blog","基础分享"],"tags":["blog"]},{"title":"第一步, 做一个高级前端工程师","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D-webpack/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D%20webpack/%E7%AC%AC%E4%B8%80%E6%AD%A5,%20%E5%81%9A%E4%B8%80%E4%B8%AA%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/","content":"<blockquote>\n<p>曾经, 领导说. 判断一个前端是不是的水平怎么样只需要看他会不会配 webpack 就可以了. 然后…</p>\n</blockquote>\n<blockquote>\n<p>一顿操作猛如虎, 然而 “有的时候, 不能一场排位就定段呀” —– 我  去年   买了个</p>\n</blockquote>\n<h2 id=\"打包工具的前世今生\"><a href=\"#打包工具的前世今生\" class=\"headerlink\" title=\"打包工具的前世今生\"></a>打包工具的前世今生</h2><span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225240.png\" alt=\"20240627225240\"></p>\n<p>webpack 顾名思义, web 应用的 pack(打包) 工具. 举个栗子, 假如你出门旅行需要携带各种各样的随身物品, 怎么办咧? 一个背包搞定. 所有的随身物品打包到背包里, 管他充电器还是充电宝, 杜蕾斯还是冈本全都一步到位…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225308.png\" alt=\"20240627225308\"></p>\n<p>早期的 web 应用相对单调, 网页一般就是三大件(html css js)一把梭的撸, 打包的概念无非就是图片压一压, 各种 js 文件拼接成一个文件来解决单个页面资源加载的数量过多影响体验的问题, 当时优秀的打包工具有 grunt, gulp 等. 但随着 react, vue 等优秀 web 框架的出现把组件化开发的思维带入了前端领域, web 应用中的依赖也趋向于多元化, 图片, 字体, js 转码, 样式预处理等等需求应运而生. 单纯的文件拼接略显乏力了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225316.png\" alt=\"20240627225316\"></p>\n<p>这是时候, 你需要一款专业的工具啦, 那就是 <a href=\"https://webpack.js.org/\">webpack</a></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>光说不练假把式, 首先我们安装 <a href=\"https://nodejs.org/en/\">nodejs</a>, 如果可以的话推荐使用最新版本. 具体的安装方式请参照<a href=\"https://juejin.im/post/5bfd43986fb9a049ed308f1a\">这篇文章</a>说的简直不要太详细. eslint 建议也配置以下哈. eslint + vscode 的代码自修复能力爽到飞起.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225323.png\" alt=\"20240627225323\"></p>\n<h2 id=\"本地-项目-安装-webpack\"><a href=\"#本地-项目-安装-webpack\" class=\"headerlink\" title=\"本地(项目)安装 webpack\"></a>本地(项目)安装 webpack</h2><p>项目初始化完成后, 直接命令行执行 <code>npm i webpack@3.10.0 -D</code> 安装 webpack. 细心的同学可能发现了webpack 并不是当今最高大上的 webpack4.X 版本, 这个原因呢很简单. 因为 4.x 版本的 webpack 我</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225332.png\" alt=\"20240627225332\"></p>\n<p>当然了, 我也相信大家理解 3.x 的 webpack 以后 4.x 的也会分分钟搞定. 要是搞不定咋弄咧, 来找我补 4.x 的文章咯 😂</p>\n<h2 id=\"执行第一次打包\"><a href=\"#执行第一次打包\" class=\"headerlink\" title=\"执行第一次打包\"></a>执行第一次打包</h2><p>万里长城第一步, 肯定是要初始化项目结构啦! 本次项目的目录结构如下图. <a href=\"https://github.com/luoquanquan/webpack-show/commit/efd7c6eed19936202fcb385a00bd46e52bcb4d7c\">代码地址</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225348.png\" alt=\"20240627225348\"></p>\n<p>其中, <code>.eslintignore .eslintrc.js</code> 为 eslint 配置文件, <code>.gitignore</code> 为 git 配置文件 <code>package.json package-lock.json</code> 是 npm 的配置文件</p>\n<p>首先, 我们创建待处理的 js 文件 <code>index.js</code> 并且写入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其次, 在项目的根目录下创建 webpack 配置文件, 文件名为 <code>webpack.config.js</code> 并写入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是打包的入口文件相对路径</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包结果存放的位置, 必须用绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/Users/quanquanluo/workSpace/quanquan/blog-repo/webpack-show/dist&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 打包结果文件名称</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>到现在, 随身物品和背包都准备好了, 我们开始执行打包操作. 命令行执行 <code>./node_modules/.bin/webpack</code> (webpack 回自动寻找项目目录下的配置文件), 此时在项目的根目录中添加了 dist 目录, dist 目录下创建了 bundle.js 文件. 文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\tmodules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Flag the module as loaded</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// expose the modules object (__webpack_modules__)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// expose the module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// define getter function for harmony exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">get</span>: getter</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> getter = <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span> ?</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&#x27;default&#x27;</span>]; &#125; :</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>; &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&#x27;a&#x27;</span>, getter);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> getter;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Object.prototype.hasOwnProperty.call</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span>(<span class=\"params\">object, property</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property); &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// __webpack_public_path__</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>天书有么有?<br><img src=\"https://handle-note-img.niubishanshan.top/20240627225432.png\" alt=\"20240627225432\"></p>\n<p>稍微整理了一下, 变成了下面的样子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"> \t\tmodules[moduleId]();</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>清秀多了. 打包的过程其实就是把模块用一个匿名自执行函数包裹了一下. so esay</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225443.png\" alt=\"20240627225443\"></p>\n<p>初次打包的<a href=\"https://github.com/luoquanquan/webpack-show/commit/a5bc1a3790a5ea314ec73068db82ab3fe6a6d6aa\">代码地址</a>. 当然啦, 作为一个清秀的前端工程师, 肯定不能容忍 <code>/Users/quanquanluo/workSpace/quanquan/blog-repo/webpack-show/dist</code> 这么长的代码, 稍加改造 <code>webpack.config.js</code> 如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用\b node 原生 path 模块处理绝对路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是打包的入口文件相对路径</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打包结果存放的位置, 必须用绝对路劲</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 打包结果文件名称</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p> 调整后<a href=\"https://github.com/luoquanquan/webpack-show/commit/96d3e39b5b994abeff61adf3eb51670b92aff3db\">代码地址</a>, 看上去舒服多了…</p>\n<h2 id=\"验证打包后的文件\"><a href=\"#验证打包后的文件\" class=\"headerlink\" title=\"验证打包后的文件\"></a>验证打包后的文件</h2><p>最后, 我们执行 <code>node dist/bundle.js</code>, 命令行中成功打印了 <code>我是高级前端工程师~</code> 打包成功, 恭喜大家成功晋级 <code>高级前端工程师</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225501.png\" alt=\"20240627225501\"></p>\n<p>但是, 项目目录下直接执行 <code>node index.js</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225529.png\" alt=\"20240627225529\"></p>\n<p>咦? 直接执行就可以, 那样我忙活半天岂不是脱了裤子放屁了…哈哈哈哈哈, 当然没有, 从下一步我们开始走向真正的高级前端工程师之路. 一起进阶 webpack</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627225536.png\" alt=\"20240627225536\"></p>\n","categories":["blog","手把手带你配 webpack"],"tags":["blog"]},{"title":"第三步, 领导-为什么别人家的 js 文件那么小","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D-webpack/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D%20webpack/%E7%AC%AC%E4%B8%89%E6%AD%A5,%20%E9%A2%86%E5%AF%BC-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%AB%E4%BA%BA%E5%AE%B6%E7%9A%84%20js%20%E6%96%87%E4%BB%B6%E9%82%A3%E4%B9%88%E5%B0%8F/","content":"<blockquote>\n<p>自信失败并不要紧, 回到公司继续划水, 直到有一天. 从不过问前端技术的傻领导蹦出来一个P: ‘我感觉咱们的页面白屏时间有点长呀!!!’. 小样, 本来我是不想忽悠你的, 你竟然把我逼到这个份儿上了昂.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232541.png\" alt=\"20240627232541\"></p>\n<blockquote>\n<p>在<a href=\"https://juejin.im/post/5c4e81c3f265da613c0a2952\">上一步</a>中我们提到: 为了在浏览器端实现 Common 的模块化效果, webpack 把所有的 js 文件打包到了一个 bundle.js 文件里, 随着项目复杂度提升, bundle.js 文件也越来越大. 没想到这货甩给我一句这话.</p>\n</blockquote>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232647.png\" alt=\"20240627232647\"></p>\n<p>装逼装过头了, 知识不够用了, 怎么办? 得抓紧学习一波了. 搞起…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232703.png\" alt=\"20240627232703\"></p>\n<p>在很久很久以前, 我还在培训机构学习着 HTML5 开发技术, 上课打盹的时候偶然听到培训讲师说了一句说: React 就是 facebook 前端团队在开发 instagram 的时候觉得市面上没有好用的前端框架就自己搞出来的一套东西. 很明显 instagram 应该是这个世界上早期的单页面应用之一了. 废话少说, 打开网页<a href=\"https://www.instagram.com/\">来一发</a>给我的傻领导看看世界顶尖级互联网公司的 大 大大 大 bundle.js …</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232727.png\" alt=\"20240627232727\"></p>\n<p>WTF!!! 居然没有 bundle.js 这么优秀的 js 文件的, 最大的 js 文件 gzip 之后只有 240K. 这是啥? 为什么没了 bundle? 这是怎么实现的? 培训班老师没教鸭~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232743.png\" alt=\"20240627232743\"></p>\n<p>经过我和度娘还有谷哥的一致商议, 确定了通过 webpack 实现 instagram 这种代码分包(英文名 code split)有两种方式:</p>\n<h2 id=\"第一种-通过-require-ensure-实现代码分包处理\"><a href=\"#第一种-通过-require-ensure-实现代码分包处理\" class=\"headerlink\" title=\"第一种: 通过 require.ensure 实现代码分包处理\"></a>第一种: 通过 <code>require.ensure</code> 实现代码分包处理</h2><p>光说不练假把式, 管他什么效果, 先百度粘一段代码跑起来再说.</p>\n<p>修改我们的项目代码 <code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.<span class=\"title function_\">ensure</span>([], <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">require</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./foo&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就是把 <code>import foo from &#39;./foo&#39;</code> 替换成了 <code>require.ensure</code> 的写法.</p>\n<p><code>require.ensure</code> 能接收三个参数</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数类型</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>依赖列表</td>\n<td>array</td>\n<td>是</td>\n</tr>\n<tr>\n<td>回调函数</td>\n<td>func</td>\n<td>是</td>\n</tr>\n<tr>\n<td>模块名称</td>\n<td>string</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p>再次执行 <code>npm run build</code> 编译后的代码目录如下图所示.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232802.png\" alt=\"20240627232802\"></p>\n<p>为了演示分包加载的效果, 我们手动添加了一个 <code>index.html</code> 用于引入打包生成的 js 文件<a href=\"https://github.com/luoquanquan/webpack-show/commit/9decb3a0b29d003a669727c1f97dd9e2669fa76d\">代码地址</a></p>\n<h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h2><p>继续写 ???</p>\n","categories":["blog","手把手带你配 webpack"],"tags":["blog"]},{"title":"第二步, 面试官-谈谈你对模块化的理解","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D-webpack/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D%20webpack/%E7%AC%AC%E4%BA%8C%E6%AD%A5,%20%E9%9D%A2%E8%AF%95%E5%AE%98-%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/","content":"<blockquote>\n<p><a href=\"https://fe-note.niubishanshan.top/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D-webpack/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E9%85%8D%20webpack/%E7%AC%AC%E4%B8%80%E6%AD%A5,%20%E5%81%9A%E4%B8%80%E4%B8%AA%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/\">上一步</a>提到, 对于我配出来的 webpack 领导并不是很认可, 那只好…</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627231859.png\" alt=\"20240627231859\"></p>\n<h2 id=\"尴尬的面试题\"><a href=\"#尴尬的面试题\" class=\"headerlink\" title=\"尴尬的面试题\"></a>尴尬的面试题</h2><p>问: 你知道的 js 模块化方案有哪些?<br><br>答: js 的模块化一般来说有 Commonjs AMD(CMD) ESModule 等, Commonjs 使用的同步加载一般用于 node, AMD(CMD) 由于是异步加载所以普遍用在前端. ESModule 旨在实现前后端模块化的统一. 言简意骇, 点到为止. 简直优秀…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232015.png\" alt=\"20240627232015\"></p>\n<p>问: 那么为什么同步的 Commonjs 要用在 node, 异步的 AMD 要用在前端呢?<br><br>答: node 应用程序运行在服务器上, 程序通过文件系统可以直接读取到各个模块的文件, 特点是响应快速不会因为同步而阻塞了程序的运行. 前端项目运行在浏览器中, 每个模块都要通过 http 请求加载 js 文件, 受到网络等因素的影响如果同步的话会使得浏览器出现”假死”的情况 — 也就是卡住了. 影响用户体验. 整场邂逅已经完全 cover 住了有没有 ^_^.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232022.png\" alt=\"20240627232022\"></p>\n<p>问: 那你听过 webpack 吗? 知道 webpack 是怎么实现模块化的吗?<br><br>答: webpack <a href=\"https://juejin.im/post/5c473d11e51d452c8e6d57f2\">看这里</a>, webpack 的模块化其实就是把 ES6 模块化代码转码成 Commonjs 的形式(咦, 有点慌, 但是面试题就是这么背的呀), 从而兼容浏览器的. 前后矛盾, 已经开始有点鸡动啦, 但是强忍着希望蒙混过关…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232035.png\" alt=\"20240627232035\"></p>\n<p>问: 好的, 既然你说 Commonjs 的同步方式前端不适用, 为什么 webpack 转码的 Commonjs 形式以后可以前端运行呢?<br><br>答: emmmmm</p>\n<p>面试官: 那要不今天的面试就先到这儿吧, 你先回去等通知…<br><br>我: hmmmmm<br><img src=\"https://handle-note-img.niubishanshan.top/20240627232043.png\" alt=\"20240627232043\"></p>\n<h2 id=\"webpack-到底做了什么\"><a href=\"#webpack-到底做了什么\" class=\"headerlink\" title=\"webpack 到底做了什么\"></a>webpack 到底做了什么</h2><p>一遍又一遍的执行了 webpack 命令, 一次又一次的研究生成的 bundle.js. 嗯哼? 所有的 js 模块都打包到了一个 bundle.js 里了, 根本没有分模块加载, 那还管他丫的同步还是异步. js 文件直接读取到内存里一步到位, 比 nodejs 需要读取文件还要方便…</p>\n<p>那么, webpack 到底是怎样把这么多文件组合成一个 bundle.js 文件的呢? 仔细想一下, 还是把天书和大家一起学习一下吧, 要不感觉这个系列的文章会变成表情包分享教程!</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232155.png\" alt=\"20240627232155\"></p>\n<p>接下来我会分享 Commonjs 和 es6 Module 两种模块化方式 webpack 的处理, 如果有小伙伴对这两种方式有疑问, 请 google 一下. 其实所谓的模块化无非就是给一段代码添加了两把钥匙实现和其他代码的通信, 相互调用, 通过 require 获取引入其他模块的能力, 通过 export 实现向其他模块输出方法的功能.</p>\n<h3 id=\"commonjs-模块化的处理\"><a href=\"#commonjs-模块化的处理\" class=\"headerlink\" title=\"commonjs 模块化的处理\"></a>commonjs 模块化的处理</h3><p>首先添加一个 <code>npm script</code> 修改 package.json 如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232203.png\" alt=\"20240627232203\"></p>\n<p>添加完成后<a href=\"https://github.com/luoquanquan/webpack-show/commit/9b0f910858176fa488fb1fee75e9b895bd9bfdda\">代码</a>, 就可以抛弃 <code>./node_modules/.bin/webpack</code> 这个命令了, 打包时只需要 <code>npm run build</code> 即可.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232213.png\" alt=\"20240627232213\"></p>\n<p>搭建项目代码, <a href=\"https://github.com/luoquanquan/webpack-show/commit/298684fc2fb388fa2b04f8276d71023f40ca01df\">代码地址</a>, 其中, index.js 内容:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./foo&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是高级前端工程师~&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>foo.js 内容:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>纯纯粹粹的 Commonjs 代码, 执行 <code>npm run build</code> 后, 我们再看看打包后的 bundle.js. (ps: 添加了部分注释)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">modules</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存模块对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟 commonjs 实现的 require</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// require 模块时先判断是否已经缓存, 已经缓存的模块直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// (模拟)创建一个模块, 并把新模块的引用保存到缓存中</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = (installedModules[moduleId] = &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 模块 id</span></span><br><span class=\"line\">            <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">            <span class=\"comment\">// 模块是否已加载</span></span><br><span class=\"line\">            <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 模块主体内容, 会被重写</span></span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 执行以下模块的包装函数, 并把模块内部的 this 志向模块主体</span></span><br><span class=\"line\">        modules[moduleId].<span class=\"title function_\">call</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            __webpack_require__</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 将模块标记为已加载</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回模块主体内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 向外暴露所有的模块</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\">    <span class=\"comment\">// 向外暴露已缓存的模块</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下边两个方法暂时还没有用到</span></span><br><span class=\"line\">    <span class=\"comment\">// define getter function for harmony exports</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\">                <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">get</span>: getter,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getter =</span><br><span class=\"line\">            <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span></span><br><span class=\"line\">                ? <span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&quot;default&quot;</span>];</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                : <span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>;</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">        __webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&quot;a&quot;</span>, getter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getter;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.hasOwnProperty.call 这个就没啥好解释的啦</span></span><br><span class=\"line\">    <span class=\"comment\">// js 权威指南上有说</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// __webpack_public_path__</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个暂时还没有用到</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\">    <span class=\"comment\">// 准备工作做完了, require 一下入口模块, 让项目跑起来</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>((__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;)(</span><br><span class=\"line\">    <span class=\"comment\">/********  华丽的分割线 上边时 webpack 初始化代码, 下边是我们写的模块代码 ***************/</span></span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"comment\">/* 模块 0 对应 index.js */</span></span><br><span class=\"line\">        <span class=\"comment\">/***/</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> foo = <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是高级前端工程师~&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* 模块 1 对应 foo.js */</span></span><br><span class=\"line\">        <span class=\"comment\">/***/</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>原来 webpack 就是把我们写的代码用一个一个的包装函数包装了起来, 再执行<strong>webpack_require</strong>的时候调用一下包装函数. 通过包装函数内部的代码重写了参数中参数 module 的 exports 属性, 获取到我们编写的模块的主体代码.</p>\n<p>所以我们看到了 <code>index.js</code> 包装后的代码为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> foo = <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>foo.js</code> 包装后的代码为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;quanquan&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">job</span>: <span class=\"string\">&#x27;fe&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 index.js 中有 <code>require(&#39;./foo&#39;)</code> 所以 index.js 生成的包装函数参数中多了<strong>webpack_require</strong>用于导入 foo 模块, 从头到尾看下来, 之前的天书似乎不再晦涩难懂了. 当然这一块内容需要大家稍微动动脑筋思考一下. 也希望大家把自己的想法和问题放到评论区, 我们一起讨论.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232231.png\" alt=\"20240627232231\"></p>\n<h3 id=\"es6-Module-模块化的处理\"><a href=\"#es6-Module-模块化的处理\" class=\"headerlink\" title=\"es6 Module 模块化的处理\"></a>es6 Module 模块化的处理</h3><p>改动我们的项目代码为 es6 模块化代码, 首先修改 <code>index.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">&quot;./foo&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是高级前端工程师~&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>其次修改 <code>foo.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>最后就是命令行执行 <code>npm run build</code> 进行打包啦. 打包完成后 <code>bundle.js</code> 内容如下(经过优化):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">modules</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = (installedModules[moduleId] = &#123;</span><br><span class=\"line\">            <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">            <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        modules[moduleId].<span class=\"title function_\">call</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            __webpack_require__</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\">                <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">get</span>: getter,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getter =</span><br><span class=\"line\">            <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span></span><br><span class=\"line\">                ? <span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&quot;default&quot;</span>];</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                : <span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>;</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">        __webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&quot;a&quot;</span>, getter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getter;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>((__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, __webpack_exports__, __webpack_require__</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(__webpack_exports__, <span class=\"string\">&quot;__esModule&quot;</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__foo__ = <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(__WEBPACK_IMPORTED_MODULE_0__foo__[<span class=\"string\">&quot;a&quot;</span>]);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是高级前端工程师~&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, __webpack_exports__, __webpack_require__</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        __webpack_exports__[<span class=\"string\">&quot;a&quot;</span>] = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>打包的结果仍然是天书式的代码, 还好和 commonjs 模块化方式大同小异. webpack 初始化代码完成相同.</p>\n<p><code>index.js</code> 生成的包裹代码为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, __webpack_exports__, __webpack_require__</span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(__webpack_exports__, <span class=\"string\">&quot;__esModule&quot;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__foo__ = <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(__WEBPACK_IMPORTED_MODULE_0__foo__[<span class=\"string\">&quot;a&quot;</span>]);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是高级前端工程师~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>foo.js</code> 生成的包裹代码为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, __webpack_exports__, __webpack_require__</span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t__webpack_exports__[<span class=\"string\">&quot;a&quot;</span>] = (&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;quanquan&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">job</span>: <span class=\"string\">&#x27;fe&#x27;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现, 和 commonjs 不同的地方:</p>\n<ul>\n<li>首先, 包装函数的参数之前的 <code>module.exports</code> 变成了<code>__webpack_exports__</code></li>\n<li>其次, 在使用了 es6 模块导入语法(import)的地方, 给<code>__webpack_exports__</code>添加了属性<code>__esModule</code></li>\n<li>其余的部分和 commonjs 类似</li>\n</ul>\n<p>我们发现, commonjs 中咩有用到的 <code>__webpack_require__.n</code> 这个方法还是没有用到, 这难道是废方法? 那岂不是可以给 webpack 提个 issue, 参与过得开源项目不再是空白. 美滋滋…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232247.png\" alt=\"20240627232247\"></p>\n<p>要是这样都能搭上这种国际开源项目的班车, 岂不是太过容易了呢?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232257.png\" alt=\"20240627232257\"></p>\n<h3 id=\"es6-Module-CommonJs-混合使用\"><a href=\"#es6-Module-CommonJs-混合使用\" class=\"headerlink\" title=\"es6 Module CommonJs 混合使用\"></a>es6 Module CommonJs 混合使用</h3><p>修改 <code>foo.js</code> 内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>打包的结果为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"keyword\">function</span> (<span class=\"params\">modules</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// The module cache</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// The require function</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">if</span> (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/******/</span> <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">            <span class=\"comment\">/******/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = (installedModules[moduleId] = &#123;</span><br><span class=\"line\">            <span class=\"comment\">/******/</span> <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">            <span class=\"comment\">/******/</span> <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"comment\">/******/</span> <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"comment\">/******/</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> modules[moduleId].<span class=\"title function_\">call</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>,</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>,</span><br><span class=\"line\">            __webpack_require__</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"comment\">// Flag the module as loaded</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// expose the modules object (__webpack_modules__)</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// expose the module cache</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// define getter function for harmony exports</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">if</span> (!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/******/</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\">                <span class=\"comment\">/******/</span> <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"comment\">/******/</span> <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"comment\">/******/</span> <span class=\"attr\">get</span>: getter,</span><br><span class=\"line\">                <span class=\"comment\">/******/</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">/******/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">var</span> getter =</span><br><span class=\"line\">            <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span></span><br><span class=\"line\">                ? <span class=\"comment\">/******/</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&quot;default&quot;</span>];</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                : <span class=\"comment\">/******/</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>;</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&quot;a&quot;</span>, getter);</span><br><span class=\"line\">        <span class=\"comment\">/******/</span> <span class=\"keyword\">return</span> getter;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// Object.prototype.hasOwnProperty.call</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// __webpack_public_path__</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> __webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>((__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">&#125;)(</span><br><span class=\"line\">    <span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\">    <span class=\"comment\">/******/</span> [</span><br><span class=\"line\">        <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">        <span class=\"comment\">/***/</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, __webpack_exports__, __webpack_require__</span>) &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">            <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(__webpack_exports__, <span class=\"string\">&quot;__esModule&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">value</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__foo__ =</span><br><span class=\"line\">                <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 这里用到了 __webpack_require__.n</span></span><br><span class=\"line\">            <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__foo___default =</span><br><span class=\"line\">                __webpack_require__.<span class=\"title function_\">n</span>(__WEBPACK_IMPORTED_MODULE_0__foo__);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(__WEBPACK_IMPORTED_MODULE_0__foo___default.<span class=\"property\">a</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是高级前端工程师~&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/* harmony default export */</span> __webpack_exports__[<span class=\"string\">&quot;default&quot;</span>] = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">        <span class=\"comment\">/***/</span> <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">job</span>: <span class=\"string\">&quot;fe&quot;</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code> 没有变化, 也就是说当导出模块导出的语法为 commonjs 而导入模块的导入语法为 es6 时, 导入模块就会用到了 <code>__webpack_require__.n</code> 这个方法.</p>\n<p>下集预告: 到这里一个纯 js 文件的打包结果就分析完了, webpack 巧妙的把所有的模块都打包到了一个 bundle.js 文件中从而实现同步加载模块, 实在高明. 但是, 如果你的项目很大, 动辄成百上千的 js 模块, 此时运用 webpack 又能怎样实现代码拆分呢? 我们下一步一起讨论.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627232332.png\" alt=\"20240627232332\"></p>\n","categories":["blog","手把手带你配 webpack"],"tags":["blog"]},{"title":"常见的 html 坑","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html5/%E5%B8%B8%E8%A7%81%E7%9A%84%20html%20%E5%9D%91/","content":"<h2 id=\"ele-append-在-Android-6-0-有兼容问题\"><a href=\"#ele-append-在-Android-6-0-有兼容问题\" class=\"headerlink\" title=\"ele.append 在 Android 6.0 有兼容问题\"></a>ele.append 在 Android 6.0 有兼容问题</h2><p>document.body.append is not a function</p>\n<p>具体的兼容性信息<a href=\"https://caniuse.com/mdn-api_element_append\">参考文档</a></p>\n<h2 id=\"“专业”的前端开发注意事项\"><a href=\"#“专业”的前端开发注意事项\" class=\"headerlink\" title=\"“专业”的前端开发注意事项\"></a>“专业”的前端开发注意事项</h2><ul>\n<li>凡是遇到固定大小的内容区域时, 都要考虑内容长度可能超出容器(内容溢出)<ul>\n<li>数字</li>\n<li>金额</li>\n<li>…</li>\n</ul>\n</li>\n<li>凡是有表单提交的地方, 都要考虑表单内容修改的回显能力</li>\n</ul>\n","categories":["开发笔记","html"],"tags":["开发笔记"]},{"title":"AudioContext 使用和优化","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html5/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html5/AudioContext%20%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于不可描述的原因在年初我加入了一个新团队. 程序猿的快乐莫过于入职开发新项目, 即没有<strong>前人代码</strong>的束缚的同时又提供了<strong>与项目共同进步</strong>的契机. 本文作为开发笔记行文方式较为轻松. 旨在记录探索开发中遇到的各种技术问题和解决方案, 同时感谢在此过程中给予帮助的多位同学 ~</p>\n<span id=\"more\"></span>\n\n<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>作为一款主打语音弹幕的产品我们的特色就是语音弹幕 &amp; 合唱. h5 承担的分享落地页要做的就是完美还原客户端效果的同时能够引起用户对于产品的兴趣进而达到拉新的效果. 因此, 分享页不再是一张切图点哪儿都引导下载的 little case …</p>\n<p>总体来说就是</p>\n<ol>\n<li>背景为原作者唱歌(或导入)的一段视频</li>\n<li>消费用户播放到自己喜欢的段落时可以跟唱弹幕</li>\n<li>弹幕提交后若被原作者 <code>pick</code> 则再次播放作品能够在视频上方展示弹幕动画同时播放弹幕音频</li>\n<li>前端仅需实现播放分享作品时<strong>实时</strong>播放弹幕音频并展示弹幕动画</li>\n</ol>\n<p>需求文档就是这些. 至于实现的细节技术同学研究下吧 ~</p>\n<h2 id=\"技术调研\"><a href=\"#技术调研\" class=\"headerlink\" title=\"技术调研\"></a>技术调研</h2><p>由于消费者提交弹幕和原作者 <code>pick</code> 弹幕的动作均为动态化, 不适合服务器直接把弹幕合入原视频的方案(动态创建视频会浪费大量服务资源). 所以这个功能的主要开发工作就由前端来完成啦 ~</p>\n<p>简单分析需求, 落地到前端其实就两个重点:</p>\n<ol>\n<li>播放一个背景视频 - video</li>\n<li>播放一堆音频弹幕 - audio</li>\n<li>弹幕划过动画 - css3</li>\n</ol>\n<p>万事俱备, 开始采坑 ~</p>\n<h2 id=\"采坑之旅\"><a href=\"#采坑之旅\" class=\"headerlink\" title=\"采坑之旅\"></a>采坑之旅</h2><p>后端返回的数据中包含了每条弹幕相对于当前视频作品的开始时间. 我们只需要自动播放 <code>video</code> 并监听其 <code>timeupdate</code> 事件获取播放时间并以此控制弹幕 <code>子弹元素</code> 在屏幕区域的滑动位置. 同时创建 <code>audio</code> 标签播放弹幕音频看上去似乎非常简单.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-10-10-16-23.png\" alt=\"表情包\"></p>\n<h3 id=\"问题一-背景视频无法自动播放\"><a href=\"#问题一-背景视频无法自动播放\" class=\"headerlink\" title=\"问题一: 背景视频无法自动播放\"></a>问题一: 背景视频无法自动播放</h3><p>按照最初的构想, 只要获取 <code>video</code> 标签并执行 <code>video.play()</code> 启动背景视频的播放. 可是控制台红艳艳的报错出乎意料 emmmm ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-11-11-59-10.png\" alt=\"报错\"></p>\n<p>为了能 hack 视频的自动播放, 经过一番搜索和测试. 我发现以下方案均不好用:</p>\n<ol>\n<li>通过 js 调用play()</li>\n<li>设置 video 属性 autoplay</li>\n<li>通过 js 来触发click事件</li>\n<li>使用插件 videojs</li>\n<li>通过 js 调用load()然后再调用play();</li>\n<li>设置 video 属性 webkit-playsinline&#x3D;”true”</li>\n<li>touchstart 监听</li>\n<li>stalled 事件处理</li>\n<li>canplaythrogh 事件处理</li>\n<li>readyState 大于 2 的处理</li>\n<li>DOMContentLoaded 监听</li>\n</ol>\n<p>好在搜索的过程中发现了 <a href=\"https://developer.chrome.com/blog/autoplay/#webaudio\">Autoplay policy in Chrome</a>. 文档中指明自从 <code>Chrome 66</code> 以来谷歌浏览器便对自动播放的音频和视频进行了限制. 没有用户的交互就想实现视频自动播放怕是实现不了, 只好找产品经理把体验降级为用户点击全局蒙层再启动视频播放. 问题搞定 ~</p>\n<img width=\"240\" src=\"https://handle-note-img.niubishanshan.top/2021-11-10-11-42-53.png\">\n\n<h3 id=\"问题二-视频跑到顶层挡住弹幕\"><a href=\"#问题二-视频跑到顶层挡住弹幕\" class=\"headerlink\" title=\"问题二: 视频跑到顶层挡住弹幕\"></a>问题二: 视频跑到顶层挡住弹幕</h3><p>搞定了播放的问题开始整弹幕布局, 参照 App 的设计图, 布局方案如下:</p>\n<img width=\"240\" src=\"https://handle-note-img.niubishanshan.top/2021-11-10-11-48-48.png\" />\n\n<p>弹幕区域置于视频区域上方(z-index)布局完美, 可惜用户点击播放后视频直接起飞. 具体表现为:</p>\n<ul>\n<li>iOS: 调用系统播放器脱离网页播放</li>\n<li>安卓: 视频在网页内, 但是层级上升为最高, 盖住了弹幕区域</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-17-30-04.png\" alt=\"表情包\"></p>\n<p>好在有前人写下了<a href=\"https://segmentfault.com/a/1190000009395289\">这篇文章</a>. 加上三个属性终于把视频结结实实固定在网页上了.</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>playsinline</td>\n<td>iOS 中支持 h5 页内播放(适用于 微信 QQ QQ浏览器 Safari浏览器)</td>\n</tr>\n<tr>\n<td>webkit-playsinline</td>\n<td>同👆🏻, 兼容 iOS 10 添加浏览器前缀</td>\n</tr>\n<tr>\n<td>x5-video-player-type&#x3D;”h5”</td>\n<td>安卓 x5 内核启动 h5 业内播放 video(适用于 微信 QQ QQ浏览器)</td>\n</tr>\n</tbody></table>\n<p>如果想要强力控制还可以使用<a href=\"https://github.com/fregante/iphone-inline-video\">这个库</a>.</p>\n<p>由于安卓还不支持 <code>playsinline</code>, 所以安卓系统下目前只有腾讯系 <code>x5</code> 内核 webview 可以实现 <code>video</code> 标签的页内播放. 其他浏览器目前没有找到相应的解决方案. 如果有大佬知道的话还请赐教 ~</p>\n<h3 id=\"问题三-iOS-系统弹幕没有声音\"><a href=\"#问题三-iOS-系统弹幕没有声音\" class=\"headerlink\" title=\"问题三: iOS 系统弹幕没有声音\"></a>问题三: iOS 系统弹幕没有声音</h3><p>搞定了视频播放, 实现了弹幕展示, 终于可以开始整弹幕音频播放了. 理论上还是非常简单: 监听 <code>video</code> 标签 <code>timeupdate</code> 事件获取底版视频的播放时间. 遍历弹幕找到当前需要播放的弹幕后创建 <code>audio</code> 标签并播放. 然而事与愿违, 安卓设备自动播放弹幕没有问题, 但是到了 iOS 上直接 GG. <code>audio</code> 没有成功播放出来 😭, <code>vConsole</code> 捕捉到的报错:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NotAllowedError&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;stack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;play@[native code]\\nglobal code&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>很明显, 动态创建的 <code>audio</code> 标签也不能自动播放. 动辄上百的弹幕引导用户疯狂的点击? 我没去找产品, 因为这个事儿他应该不会妥协 😭…</p>\n<p>面对问题时, 还是习惯性百度了一下看看有没有前人已经遇到过. 这样往往会事半功倍: 如果有, 那就躺在巨人的肩膀上继续牛逼着. 如果没有, 那么这就是一个机会. 经过一通搜索了解到 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext\">AudioContext</a>. 这个 <code>Api</code> 可以把音频文件处理成 <code>audioBuffer</code>, 事情开始有了眉目.</p>\n<p>如果把所有的弹幕都转成 <code>audioBuffer</code> 然后再用 <a href=\"https://github.com/audiojs/audio-buffer-utils\">audio-buffer-utils</a> 往一块拧巴拧巴. 一百多个弹幕就会变成一个音频文件, 播放的问题迎刃而解 🤔</p>\n<p>具体操作步骤如下:</p>\n<ol>\n<li>首先创建一个和作品时长相等的 <code>audioBuffer</code> 作为容器</li>\n<li>逐个下载所有弹幕转 <code>audioBuffer</code> 并 <code>merge</code> 到上述容器中</li>\n<li>用户点击播放键同时播放视频和装满弹幕的容器实现一个点击事件同时播放视频和音频</li>\n</ol>\n<p>合并音频的原理如下图:<br><img src=\"https://handle-note-img.niubishanshan.top/merge-barrage.gif\" /></p>\n<p>audioBuffer 播放的最简伪代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bgBuffer 就是我们创建的盛放弹幕音频 buffer 的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bgBuffer = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceNode = audioCtx.<span class=\"title function_\">createBufferSource</span>();</span><br><span class=\"line\">sourceNode.<span class=\"property\">buffer</span> = bgBuffer;</span><br><span class=\"line\">sourceNode.<span class=\"title function_\">connect</span>(audioCtx.<span class=\"property\">destination</span>);</span><br><span class=\"line\">sourceNode.<span class=\"title function_\">start</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>PS: 如果把一个音频链接添加到 <code>audio</code> 标签直接播放的话可以正常播放. 但是如果想要获取音频中的数据转 <code>audioBuffer</code> 时就会触发浏览器的<a href=\"https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/3927875\">同源策略</a>说白了就是跨域了. 对于这个老生常谈的问题直接找cdn老铁加个<a href=\"https://juejin.cn/post/6844903733487206413\">CORS 跨域</a>域名白名单即可.</p>\n<h3 id=\"问题四-弹幕数量增多后-移动端报错\"><a href=\"#问题四-弹幕数量增多后-移动端报错\" class=\"headerlink\" title=\"问题四: 弹幕数量增多后, 移动端报错\"></a>问题四: 弹幕数量增多后, 移动端报错</h3><p>解决了跨域问题后成功将所有弹幕音频文件合并成一个 <code>audioBuffer</code> 实例. 依托于之前的全局蒙层点击事件启动播放解决了播放的弹幕播放的问题. 使用我自己那仅有 3 条弹幕的作品测试页没有任何问题. 万事俱备只差测试, 一只脚已经站在了成功的门槛上了 ✌🏻</p>\n<p>原本以为提测就是走个过场, 没想到这测试老哥还真是有货. 提测没十分钟 <code>bug</code> 就来了:</p>\n<p><strong>冷门作品弹幕可以正常播放, 但是热门作品弹幕没有声音</strong></p>\n<p>WTF 还有这么抽象的问题😭, 毕竟哥还没有转正这不是吓唬哥嘛. 拿来一个<strong>热门</strong>视频感受了一把. 还真没有声音 😓.</p>\n<p><code>vConsole</code> 打开调试一看, 又是明晃晃的报错.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Failed to construct &#x27;AudioContext&#x27;: The number of hardware contexts provided (6) is greater than or equal to the maximum bound (6)</span><br></pre></td></tr></table></figure>\n\n<p>这是明摆着, 浏览器限制了每个页面只能创建 6 个 <code>AudioContext</code> 实例, 超过以后再次创建便会直接报错. 理论依据在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext#google_chrome\">这里</a>, 但是我总不能限制作品的弹幕不能超过 6 个呀…</p>\n<p>好在我们项目中用到了<a href=\"https://github.com/audiojs/audio-buffer-utils\">audio-buffer-utils</a>库, 既然是专业处理 <code>audio-buffer</code> 的库说不定有啥骚操作. 迫不及待打开<a href=\"https://github.com/audiojs/audio-buffer-utils\">github</a>项目主文件, 分分钟定位到 <code>AudioContext</code> 定义的部分, 原来可以创建一个实例挂在命名空间下供所有的业务功能使用, 再次感到智商被秀到…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-14-58-59.png\" alt=\"audio-buffer-utils 处理方案\"></p>\n<p><code>AudioContext</code> 实例只需要创建一次后续复用即可. 那么问题就变得简单起来, 用一个实例处理所有弹幕替换之前的每条弹幕都创建一次实例, 问题解决 ~</p>\n<p>PS: 这里有一个隐藏的坑. 通过 <code>ajax</code> 下载音频弹幕文件会占用内存, <code>AudioContext.prototype.decodeAudioData</code> 处理音频文件也会占用内存. 因此每个弹幕的处理都会占用自身大小的两倍的内存. 如果异步下载并处理就可能会导致页面 <code>OOM</code> 只能同步线性处理. 即下载一条弹幕并处理完成在下载下一个…</p>\n<p>PS2: 还有可能会出现同一条弹幕线下正常播放但是上线后不行了. 这个是因为跨域请求 cdn 资源时 cdn 节点会缓存 <code>origin</code> 作为 <code>Access-Control-Allow-Origin</code> 的响应头字段. 这样的话如果线下已经请求过该资源, 上线后访问相同内容时会直接返回了缓存的本地地址作为响应头. 浏览器判断为不允许跨域了具体过程如下:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-16-11-19.png\" alt=\"2021-11-13-16-11-19\"></p>\n<p>解决方案为线下环境调试时在音频链接后加一个固定参数作为标记. 实际上 cdn 会认为两次请求的不是相同的内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 音频 cdn</span></span><br><span class=\"line\">http://example.com/audio.m4a</span><br><span class=\"line\"><span class=\"comment\"># 线上直接访问</span></span><br><span class=\"line\">http://example.com/audio.m4a</span><br><span class=\"line\"><span class=\"comment\"># 线下添加一个 _=local</span></span><br><span class=\"line\">http://example.com/audio.m4a?_=<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题五-弹幕-x2F-底版无法对齐\"><a href=\"#问题五-弹幕-x2F-底版无法对齐\" class=\"headerlink\" title=\"问题五: 弹幕 &#x2F; 底版无法对齐\"></a>问题五: 弹幕 &#x2F; 底版无法对齐</h3><p>当我搞定了测试和设计, 终于长舒了一口气. 这下子哥转正应该没啥问题了吧. 当然能看到这里的老铁都知道这里肯定会有转折.</p>\n<p>产品经理: 圈圈, 这个弹幕声音和底版似乎没有对齐呀. 你看这句至少差了 40ms…</p>\n<p>此时我内心是想忽悠他一下的. 在我们 js 世界里 16ms 的误差都没法记录, 这个小间隔用户听不出来的(我是真的听不出来)</p>\n<p>组里老鸟伟哥: 还是研究研究吧, 你忽悠不了他的. 他之前是专门搞音乐的, 能听出来…</p>\n<p>我哐哧哐哧又改了一通</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> playBtn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn-id&#x27;</span>);</span><br><span class=\"line\">playBtn.<span class=\"property\">onClick</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    videoEle.<span class=\"title function_\">play</span>(); audioContext.<span class=\"title function_\">play</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哼哼哼, 甚至把两个播放写到了一行. 产品经理你等着夸我吧 😏.</p>\n<p>后来的事情就是我开始了各种探索, 启动播放音频从延迟 10ms, 20ms, 30ms… 直到 100ms 全都不好使. 分析原因发现:</p>\n<ul>\n<li>启动视频播放和创建 <code>AudioContext</code> 都需要时间</li>\n<li>不同的硬件设备(手机)所需的时间不同</li>\n<li>结论是硬件问题无法解决</li>\n</ul>\n<p>正当我嘀咕着组织语言想找领导陈述一下这件事情的不可行性的时候, 隔壁工位的后端老鸟猛哥给听到了. 他说: 想当年我做爬虫的时候, 发现有些视频网站的音频部分和视频部分是两个链接. 必须把两个链接都爬下来才行…</p>\n<p>Duang ~, 一言惊醒梦中人如果我们也把背景视频内的音频轨剥离出来合并到『iOS 系统弹幕没有声音』步骤中创建的 <code>audioBuffer</code> 中然后在把各种弹幕按照其出现的时间从<strong>物理</strong>上实现对齐. 简直完美 ~</p>\n<img src=\"https://handle-note-img.niubishanshan.top/merge-bg-barrage.gif\" />\n\n<h3 id=\"问题六-loading-时间过长-用户等待时间久\"><a href=\"#问题六-loading-时间过长-用户等待时间久\" class=\"headerlink\" title=\"问题六: loading 时间过长, 用户等待时间久\"></a>问题六: loading 时间过长, 用户等待时间久</h3><p>经过了旷日持久的捯饬功能终于是达标了, 弹幕动画正常展示音频也是完美对齐. 但是被我忽略的问题是所有弹幕下载的环节前置以后带来了 <code>loading</code> 时间非常长. 从首帧渲染到播放按钮可点击等待时长达到了 8 秒. 测试说忍不了, 我说我也忍不了 😭. 难道刚刚探索的完美解决方案又要被推翻嘛…</p>\n<p>经历了百度谷歌一把梭以后, 我决定找大佬聊聊继续优化的<em>不可行性</em>以及需求些指点. 在说明了来意当前的实现方案后领导直接反问: 你这个能不能像播放视频一样流式处理呢. 就是用户边播边下载边处理?</p>\n<p>经过这波提醒我再次恍然大悟, <code>AudioBuffer</code> 继承自 <code>Object</code> 那肯定也是引用类型的数据. 这样我可以先外漏播放的按钮允许播放. 同时异步下载弹幕 <code>merge</code> 进来. 这样优化后用户等待时间从 8 秒压缩到了 2 秒.</p>\n<h3 id=\"问题七-音画无法对齐\"><a href=\"#问题七-音画无法对齐\" class=\"headerlink\" title=\"问题七: 音画无法对齐\"></a>问题七: 音画无法对齐</h3><p>到目前为止这个体验真是自己看了都舒服, 自信满满的分享链接到群里诚邀体验静待: 前端, 牛逼了…</p>\n<p>然而等到的是: 你看这个声音唱了好几句了视频画面还没有开口. 音画不同步了…</p>\n<p>经排查发现, 移动端为了节约流量不会预加载视频资源(及时设置了 preload 属性)只有用户点击了播放之后视频才会开始加载. 然而提取的音频都是内存里现成的资源触发播放就会跑起来. 好在根据『背景视频无法自动播放』步骤中得知, 静音的视频可以启动自动播放. 于是只需要页面加载后自动播放视频一帧即可:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码, 这里需要注意 video 的 play 方法是异步的.</span></span><br><span class=\"line\"><span class=\"comment\">// 只有当返回的 Promise 有了结果 (成功 or 失败) 才能继续</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> videoEle = docuement.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;video&#x27;</span>)</span><br><span class=\"line\">videoEle.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;mute&#x27;</span>, <span class=\"string\">&#x27;mute&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> playPromise = videoEle.<span class=\"title function_\">play</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">pauseVideo</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    videoEle.<span class=\"title function_\">pase</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">playPromise.<span class=\"title function_\">then</span>(pauseVideo).<span class=\"title function_\">catch</span>(pauseVideo)</span><br></pre></td></tr></table></figure>\n\n<p>这样就能实现视频首播一帧待用户点击播放时已经加载可立即播放音视频自然对齐</p>\n<h3 id=\"问题八-数据结构真的有用\"><a href=\"#问题八-数据结构真的有用\" class=\"headerlink\" title=\"问题八: 数据结构真的有用\"></a>问题八: 数据结构真的有用</h3><blockquote>\n<p>在相当长一段时间, 我对于无脑刷 <code>LeetCode</code> 的前端是非常不屑的. 因为真的不怎么用得到, 可惜浅薄的认识让我体验了一把古今真理: 书到用时方恨少…</p>\n</blockquote>\n<p>事情是这样的, 由于弹幕音频和底版音频合并后同时播放. 当同一个时刻出现多条弹幕重叠的时候底版音频就会被覆盖直至被淹没. 好在客户端已经踩过这个坑, 解决方案为: 播放时候判断当前时间内有几条弹幕, 根据弹幕数设置弹幕的音量依次递减. 如下:</p>\n<table>\n<thead>\n<tr>\n<th>弹幕数</th>\n<th>音量系数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0.6</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0.5</td>\n</tr>\n</tbody></table>\n<p>具体的操作方案为:</p>\n<ol>\n<li>把当前作品时长对应的时间轴以 <code>50ms</code> 每份平均分成若干小份</li>\n<li>依次判断每个小份上边同时出现的弹幕数量, 并依据以上表格设置当前区间声音系数</li>\n</ol>\n<p>逻辑模型如图:<br><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-14-40-51.png\" alt=\"2021-11-13-14-40-51\"></p>\n<p>图中 ABCD… 小格子为时间区间. 上方的小数为当前区间的音量系数, 下方的弹幕区域为可能出现的弹幕模型. 例如格子 A 时间段内有一个弹幕, 所以混音音量系数为 1. 同理, 格子 B 音量系数为 0.8 以此类推…</p>\n<p>按照这个逻辑可以编辑伪代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先, 构造一个音频字典</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> volumeArr = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">51</span>, <span class=\"number\">100</span>, <span class=\"number\">0.8</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 以此类推</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 混合音频时根据弹幕出现的时间查出其音量系数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">findVolume</span> = (<span class=\"params\">barrage, volumeArr</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;start, end&#125; = barrage;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>, len = volumeArr.<span class=\"property\">length</span>; idx &lt; len; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"comment\">/* 当前弹幕命中了时间区间 */</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> volumeArr[idx][<span class=\"number\">2</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个简单的顺序查找, 逻辑上没啥问题. 部署, 验收, 没啥意外可以下个早班 ~</p>\n<p>事实是再次被打脸, 产品经理说: 加上混音之后第一遍听部分弹幕没有声音, 第二遍正常?</p>\n<p>我: ……, 不应该呀?</p>\n<p>出于对自己和代码的自信, 我想逻辑肯定不会出问题, 代码也绝对没有 bug. 之所以没声音可能是因为流式处理还没有到当前弹幕, 真是不看不知道一看吓一跳.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-15-44-15.png\" alt=\"狗头保命\"></p>\n<p>如图, 最后一列处理时长就是混音的处理时长. 一条弹幕就需要 <code>1s</code> 时间处理. 指定后边的弹幕没有声音呀, 根本还没有处理到它 😂.</p>\n<p>难受的是我知道需要性能优化, 但是不知道怎么优化…</p>\n<p>搞不定了, 现在开始刷算法抱佛脚好像有点来不及. 于是不得不扯着脸找领导(算法大佬) review 代码求指导. 大佬一句话直接让我再跪: 音量系数的查找, 直接改成 <code>start / 50</code> 在取整复杂度就变 O1 了. 你去试试…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-16-04-43.png\" alt=\"优化前耗时\"></p>\n<p>解决一个问题很容易, 知道怎么解决一个问题很难. 根据领导的方案又是哐哧哐哧又是一顿整. 再看下处理时间:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-11-13-16-21-11.png\" alt=\"优化后耗时\"></p>\n<p>所有弹幕的混音时长都限制了 200ms 以内, 产品经理体验也木有问题. 到此为止技术问题全部解决完成 ~</p>\n<h3 id=\"问题九-iOS-静音模式下无法播放外音\"><a href=\"#问题九-iOS-静音模式下无法播放外音\" class=\"headerlink\" title=\"问题九: iOS 静音模式下无法播放外音\"></a>问题九: iOS 静音模式下无法播放外音</h3><p>用户体验的最后一个问题仍然是由产品经理来完成: 如果苹果手机打开了静音模式(左上角的小开关)只能播放视频音频没有声音…</p>\n<p>经过旷日持久的搜索, 我并没有发现有很好的解决办法. 由于 <code>AudioContext</code> 播放的音频属于背景音乐静音模式必然没有声音. 好在经过了一番游说产品经理再次选择了妥协. 可是作为一个 iPhone 几乎无时无刻不处于静音模式.</p>\n<p>怀着对产品经理的愧疚和对于解决问题的执念, 某次刷 github 想要搞点新东西的时候突然发现个神器<a href=\"https://github.com/swevans/unmute\">unmute</a>专门用于解决背景音乐静音模式下无法播放的问题. 抓紧 <key>C&#x2F;V</key> 了一波还真的好使.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> context =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">poorManHuffman</span> = (<span class=\"params\">c, a</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> e = a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; c &gt; <span class=\"number\">1</span>; c--) &#123;</span><br><span class=\"line\">            e += a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> audioTag = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;audio&#x27;</span>);</span><br><span class=\"line\">    audioTag.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;x-webkit-airplay&#x27;</span>, <span class=\"string\">&#x27;deny&#x27;</span>);</span><br><span class=\"line\">    audioTag.<span class=\"property\">controls</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    audioTag.<span class=\"property\">disableRemotePlayback</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    audioTag.<span class=\"property\">preload</span> = <span class=\"string\">&quot;auto&quot;</span>;</span><br><span class=\"line\">    audioTag.<span class=\"property\">src</span> = <span class=\"string\">&quot;data:audio/mpeg;base64,//uQx&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">23</span>, <span class=\"string\">&quot;A&quot;</span>) + <span class=\"string\">&quot;WGluZwAAAA8AAAACAAACcQCA&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">16</span>, <span class=\"string\">&quot;gICA&quot;</span>) + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">66</span>, <span class=\"string\">&quot;/&quot;</span>) + <span class=\"string\">&quot;8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkI&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">320</span>, <span class=\"string\">&quot;A&quot;</span>) + <span class=\"string\">&quot;//sQxAADgnABGiAAQBCqgCRMAAgEAH&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">15</span>, <span class=\"string\">&quot;/&quot;</span>) + <span class=\"string\">&quot;7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">18</span>, <span class=\"string\">&quot;/&quot;</span>) + <span class=\"string\">&quot;9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAw&quot;</span> + <span class=\"title function_\">poorManHuffman</span>(<span class=\"number\">97</span>, <span class=\"string\">&quot;V&quot;</span>) + <span class=\"string\">&quot;Q==&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    audioTag.<span class=\"property\">loop</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    audioTag.<span class=\"title function_\">load</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    context.<span class=\"property\">audioTag</span> = audioTag;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>既然背景音乐 <code>AudioContext</code> 会被静音模式限制, 如果加上一个 audio 标签创建的前景音之后静音模式便失去效果. 于是可以在初始化 <code>AudioContext</code> 同时创建一个 audio 标签, 一直循环播放一段空白的 mp3 音乐来占用手机外音喇叭. 此时背景音乐就可以 “沾光” 播放出来了, 不得不含泪揉了揉自己的膝盖.</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>一个看似简单的功能. 从起步困难到中间克服了资源跨域, 音视频策略限制, 对齐问题, 内存溢出问题, CSS 3 动画性能等等一系列疑难杂症. 终于实现了和 <code>App</code> 端近乎一致的效果…</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/1430777\">OOM</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\">video</a></li>\n<li><a href=\"https://github.com/swevans/unmute\">unmute</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/3927875\">同源策略</a></li>\n<li><a href=\"https://fex.baidu.com/blog/2015/01/chrome-stalled-problem-resolving-process/\">问题的追查</a></li>\n<li><a href=\"https://juejin.cn/post/6844903733487206413\">CORS 跨域</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer\">createBuffer</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext\">AudioContext</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext#google_chrome\">AudioContext()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/decodeAudioData\">decodeAudioData</a></li>\n<li><a href=\"https://github.com/audiojs/audio-buffer-utils\">audio-buffer-utils</a></li>\n<li><a href=\"https://github.com/fregante/iphone-inline-video\">iphone-inline-video</a></li>\n<li><a href=\"https://blog.csdn.net/guoke312/article/details/72901882\">音频混音的算法实现</a></li>\n<li><a href=\"https://developer.chrome.com/blog/autoplay/#webaudio\">Autoplay policy in Chrome</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009395289\">视频H5 video标签最佳实践</a></li>\n<li><a href=\"https://developers.weixin.qq.com/community/develop/doc/000e640d77cfa001132a6cb8456c01\">Android微信内网页音频自动播放能力调整</a></li>\n<li><a href=\"https://blog.csdn.net/qq_37949737/article/details/105222597\">html5 video 在微信浏览器视频不能自动播放！</a></li>\n</ul>\n","categories":["开发笔记","html5"],"tags":["开发笔记"]},{"title":"js 判断音(视)频是否正在处于播放中","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html5/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/html5/%E5%88%A4%E6%96%AD%E8%A7%86%E9%A2%91%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E6%92%AD%E6%94%BE%E4%B8%AD/","content":"<h2 id=\"原理思路\"><a href=\"#原理思路\" class=\"headerlink\" title=\"原理思路\"></a>原理思路</h2><p>在 <code>whatwg</code> 的 <a href=\"https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource\">官方规范</a> 里定义了媒体标签的 <code>paused ended played currentTime</code> 状态, 但是对于开发人员更加关注的 <code>playing</code> 状态并没有提供. 就很尴尬 …</p>\n<p>根据官方的规范, 如果一个视频的 <a href=\"https://www.w3school.com.cn/tags/av_prop_readystate.asp\">readState &gt; 2</a> 也就是说资源加载没有出错. 那么此时视频的状态无非两个: 播放中或者暂停中…</p>\n<span id=\"more\"></span>\n\n<p>那么如果一个视频</p>\n<ul>\n<li>资源加载正常 <code>readyState &gt; 2</code></li>\n<li>当前视频的 <code>currentTime</code> 大于 <code>0</code></li>\n<li>当前视频没有处在暂停状态</li>\n<li>当前视频没有处在结束状态<br>那么就可以认为当前的视频处于播放中状态, 否则就没有在播放中</li>\n</ul>\n<h2 id=\"火速实操\"><a href=\"#火速实操\" class=\"headerlink\" title=\"火速实操\"></a>火速实操</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接在 HTMLMediaElement 的构造函数原型中添加属性 isPlaying,</span></span><br><span class=\"line\"><span class=\"comment\">// 这样每个视频标签作为实例就有了对应的属性访问器了</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">HTMLMediaElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;isPlaying&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> &gt; <span class=\"number\">2</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> &gt; <span class=\"number\">0</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">paused</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">ended</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//handle-note-img.niubishanshan.top/peiqi.mp4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">HTMLMediaElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;isPlaying&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> &gt; <span class=\"number\">2</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> &gt; <span class=\"number\">0</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">paused</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">ended</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;video&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            video.<span class=\"title function_\">play</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, <span class=\"number\">1e3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            video.<span class=\"title function_\">pause</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            video.<span class=\"title function_\">play</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, <span class=\"number\">2e3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        video.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;ended&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>, video.<span class=\"property\">isPlaying</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["开发笔记","html5"],"tags":["开发笔记"]},{"title":"第一步, 创建第一个命令","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/%E7%AC%AC%E4%B8%80%E6%AD%A5,%20%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4/","content":"<blockquote>\n<p>WTF 不知道脚手架是啥? 那抓紧恶补一下前端基础把兄 die, 相信不久的以后你就会回来的.</p>\n</blockquote>\n<blockquote>\n<p>ps: 本文文件操作基于 bash, mac 同学直接用 terminal 或 iterm 即可, win 用户推荐使用 git bash</p>\n</blockquote>\n<p>脚手架, 源自于建筑行业, 通俗的讲就是一个项目搭建的工具. 比较熟知的有 <code>vue-cli</code> <code>create-react-app</code> 等等, 这类工具通常以 xxx-cli 命名, 不废话 先甩一个 npm 战绩</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232422.png\" alt=\"20240625232422\"></p>\n<p>小哥哥, 看看这数据, 你到底要还是不要嘛…</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232536.png\" alt=\"20240625232536\"></p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"实现-node-和-shell-的交互\"><a href=\"#实现-node-和-shell-的交互\" class=\"headerlink\" title=\"实现 node 和 shell 的交互\"></a>实现 node 和 shell 的交互</h2><blockquote>\n<p>光说不练假把式, 第一步我们先跑一个自己的 node 命令</p>\n</blockquote>\n<p>首先创建一个项目目录, 根据惯例, 我们的脚手架也叫 cli, 就叫 <code>learn-cli</code> 吧, 好好学习, 天天向上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir learn-cli</span><br></pre></td></tr></table></figure>\n\n<p>然后, 直接 <code>npm init -y</code> 创建一个 node 项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd learn-cli</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>用你喜欢的编辑器, 打开 <code>learn-cli</code> 目录, 推荐 vscode, 在 package.json 中添加代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;bin&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;learn&quot;</span>: <span class=\"string\">&quot;./bin/learn.js&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>创建 bin 目录和 learn.js 文件, 在 learn.js 中添加以下代码. 文件头部的 <code>#!/usr/bin/env node</code> 这一句是告诉 shell 要以 node 来解析接下来的 learn 文件. 剩下的就是我们熟悉的 js 啦 ^ - ^</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;好好学习, 天天向上&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>通过终端进入到项目的根目录执行 <code>npm link</code> 如果出现一下提示说明 link 成功<br><img src=\"https://handle-note-img.niubishanshan.top/20240625232610.png\" alt=\"20240625232610\"></p>\n<p>这个命令的作用其实就是添加了两个软链(win 用户可以理解为快捷方式)到系统的环境变量下. 此时, 在命令行中输入 learn 试一下</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232626.png\" alt=\"20240625232626\"></p>\n<p>哈哈哈哈, 熟悉的名言就这么出来啦, 出来啦….</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232636.png\" alt=\"20240625232636\"></p>\n<h2 id=\"接收命令行传来的参数\"><a href=\"#接收命令行传来的参数\" class=\"headerlink\" title=\"接收命令行传来的参数\"></a>接收命令行传来的参数</h2><blockquote>\n<p>我们可以通过 <a href=\"http://nodejs.cn/api/process.html#process_process_argv\">process.argv</a> 获取到启动 node 进程时传入的命令行参数</p>\n</blockquote>\n<h3 id=\"使用原生的方式获取命令好传入的参数\"><a href=\"#使用原生的方式获取命令好传入的参数\" class=\"headerlink\" title=\"使用原生的方式获取命令好传入的参数\"></a>使用原生的方式获取命令好传入的参数</h3><p>调整 learn.js 文件为如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>] + <span class=\"string\">&quot;好好学习, 天天向上&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再次回到终端执行 <code>learn 圈圈</code>, 即可得到以下输出, 关于为什么要用 process.argv[2] 请参阅 <a href=\"http://nodejs.cn/api/process.html#process_process_argv\">文档</a></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232652.png\" alt=\"20240625232652\"></p>\n<h3 id=\"使用-commander-接收命令行传入的参数\"><a href=\"#使用-commander-接收命令行传入的参数\" class=\"headerlink\" title=\"使用 commander 接收命令行传入的参数\"></a>使用 <a href=\"http://tj.github.io/commander.js/\">commander</a> 接收命令行传入的参数</h3><p>使用原生的方式可以获取到传入的参数, 但是这种方式更适合简单的演示项目, 在这里我们选用社区优选的 commander 来处理参数问题, 别问我为什么这么用, 就是为了两个字 ——- 装逼</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232713.png\" alt=\"20240625232713\"></p>\n<p>先上一个官方的栗子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;commander&quot;</span>);</span><br><span class=\"line\">program</span><br><span class=\"line\">    .<span class=\"title function_\">version</span>(<span class=\"string\">&quot;0.0.1&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&quot;-C, --chdir &lt;path&gt;&quot;</span>, <span class=\"string\">&quot;change the working directory&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&quot;-c, --config &lt;path&gt;&quot;</span>, <span class=\"string\">&quot;set config path. defaults to ./deploy.conf&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">option</span>(<span class=\"string\">&quot;-T, --no-tests&quot;</span>, <span class=\"string\">&quot;ignore test hook&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;setup&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&quot;run remote setup commands&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setup&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;exec &lt;cmd&gt;&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&quot;run the given remote command&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(<span class=\"keyword\">function</span> (<span class=\"params\">cmd</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;exec &quot;%s&quot;&#x27;</span>, cmd);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;teardown &lt;dir&gt; [otherDirs...]&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&quot;run teardown commands&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(<span class=\"keyword\">function</span> (<span class=\"params\">dir, otherDirs</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dir &quot;%s&quot;&#x27;</span>, dir);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherDirs) &#123;</span><br><span class=\"line\">            otherDirs.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">oDir</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dir &quot;%s&quot;&#x27;</span>, oDir);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">    .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">description</span>(<span class=\"string\">&quot;deploy the given env&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">action</span>(<span class=\"keyword\">function</span> (<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;deploying &quot;%s&quot;&#x27;</span>, env);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>);</span><br></pre></td></tr></table></figure>\n\n<p>首先, 安装 commander</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i commander -S</span><br></pre></td></tr></table></figure>\n\n<p>其次将官方示例粘贴到我们的 learn.js 中, 随便执行一个命令试试<code>learn 圈圈</code> <code>learn -V</code>, 就是这么莫名其妙的好用了.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625232728.png\" alt=\"20240625232728\"></p>\n<p>到目前为止, 我们已经完成了万里长城第一步, 有兴趣的小伙伴可以自己尝试一下下面的步骤喲 ^ _ ^.</p>\n","categories":["blog","手把手撸一个脚手架"],"tags":["blog"]},{"title":"第五步, 撸完收工","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/%E7%AC%AC%E4%BA%94%E6%AD%A5,%20%E6%92%B8%E5%AE%8C%E6%94%B6%E5%B7%A5/","content":"<blockquote>\n<p>拿到 git 项目信息是重要的一个环节. 然而, 只能拿到信息不能下载下来, 你这脚手架有个 🔨 用.</p>\n</blockquote>\n<blockquote>\n<p>这一节, 我们就开始吧 git 项目下载下来. 并且把完成的代码发布到 npmjs.com 上, 掌握核心科技, 服务全球码农 😂</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170533.png\" alt=\"20240627170533\"></p>\n<h2 id=\"首先安装依赖-download-git-repo\"><a href=\"#首先安装依赖-download-git-repo\" class=\"headerlink\" title=\"首先安装依赖 download-git-repo\"></a>首先安装依赖 <a href=\"https://www.npmjs.com/package/download-git-repo\">download-git-repo</a></h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install download-git-repo -S</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩充-Git-操作类\"><a href=\"#扩充-Git-操作类\" class=\"headerlink\" title=\"扩充 Git 操作类\"></a>扩充 Git 操作类</h2><ul>\n<li>完善 Git 类的 downloadProject 方法:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">downloadProject</span>(<span class=\"params\">&#123; repo, version, repoPath &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">download</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.orgName&#125;</span>/<span class=\"subst\">$&#123;repo&#125;</span>#<span class=\"subst\">$&#123;version&#125;</span>`</span>, repoPath, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里引入了 <code>download-git-repo</code>, 推荐小伙伴们研究一下 <a href=\"https://www.npmjs.com/package/download-git-repo\">官方文档</a></p>\n<ul>\n<li>优化 command&#x2F;download.js 文件,</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向用户咨询欲创建项目的目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> repoName = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;repoPath&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;请输入项目名称: &#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">validate</span>(<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> done = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!v.<span class=\"title function_\">trim</span>()) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">done</span>(<span class=\"string\">&#x27;项目名称不能为空~&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">done</span>(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; repoPath &#125; = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">inquirer</span>.<span class=\"title function_\">prompt</span>(repoName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下载代码到指定的目录下</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    downLoadLoad = <span class=\"variable language_\">this</span>.<span class=\"property\">downLoad</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">git</span>.<span class=\"title function_\">downloadProject</span>(&#123; repo, version, repoPath &#125;);</span><br><span class=\"line\">    downLoadLoad.<span class=\"title function_\">succeed</span>(<span class=\"string\">&#x27;下载代码成功&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">    downLoadLoad.<span class=\"title function_\">fail</span>(<span class=\"string\">&#x27;下载代码失败...&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了向用户询问项目开发目录和调用代码下载功能的逻辑. 至此, 我们已经可以正常的下载模板代码啦.不信试试 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli7.gif\" alt=\"success\"></p>\n<p>现在的代码 <a href=\"https://github.com/luoquanquan/learn-cli/tree/0.0.2\">github</a>已经实现了代码库下载功能, 但是细心的小伙伴不难发现, 代码只能下载到脚手架的项目目录下这是搞什么鬼, 难道是所有的项目都要在脚手架项目下开发? 当然不是. 接下来我们就把我们的脚手架发布到<a href=\"https://www.npmjs.com/\">npmjs.com</a>上.</p>\n<h2 id=\"将代码发布到-npm-上\"><a href=\"#将代码发布到-npm-上\" class=\"headerlink\" title=\"将代码发布到 npm 上\"></a>将代码发布到 npm 上</h2><ul>\n<li><p>首先, 创建 npmjs 账号, 这个我这里就不说了吧, 硕大的 <a href=\"https://www.npmjs.com/signup\">Sign up</a> 摆在了首页右上角, 这一波, 你不会算(ping)我(lun)输(qu) 😄</p>\n</li>\n<li><p>其次, <a href=\"https://www.npmjs.com/login\">登录</a> npm 官网, 验证账号没有问题</p>\n</li>\n<li><p><strong>再次</strong>, 把 npm 镜像替换为官方镜像 <strong>重点要考</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n\n<p>  当然, 替换成官方镜像会很慢很慢, 这里我有一个建议那就是—耐心等待.极客小伙伴们也可以在发包完成后执行下面的语句, 把镜像替换为淘宝镜像速度快的飞起.</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li><p>最后, 来一把 <code>npm publish</code> 结果如下图:<br><img src=\"https://handle-note-img.niubishanshan.top/20240627170922.png\" alt=\"20240627170922\"><br>  没有任何意外的报错了, 但是通过看报错信息, 这是要让我们登录还给出了登录的命令, npm 的设计还是蛮够意思的 ^_^<br>  <img src=\"https://handle-note-img.niubishanshan.top/20240627170939.png\" alt=\"20240627170939\"></p>\n</li>\n<li><p>根据报错信息, 执行 <code>npm adduser</code></p>\n</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170947.png\" alt=\"20240627170947\"></p>\n<p>这里给大家分享一下, 如果没有改镜像地址的话, 就会的在登录的时候报这个错.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170958.png\" alt=\"20240627170958\"></p>\n<p>正常的登录操作是这个样子的 ^_^</p>\n<ul>\n<li>最后, 这次是真的最后, 成功登录完成的最后, 我们再次执行 <code>npm publish</code> 结果如下图:</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627171005.png\" alt=\"20240627171005\"></p>\n<ul>\n<li><p>通过浏览器访问 <a href=\"https://www.npmjs.com/\">npmjs.com</a> 并登录, 按照如下所示的方式就可以找到我们刚刚上传的代码包啦 😄</p>\n</li>\n<li><p>最后一步, 验证成果….</p>\n<ul>\n<li>命令行执行 <code>npm i learn-cli -g</code> 全局安装 learn-cli</li>\n<li>下来的步骤如图:<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli6.gif\" alt=\"yanzheng123432\"></li>\n</ul>\n</li>\n</ul>\n<p>到目前为止, 初级脚手架开发已经完成, 如果有小伙伴又任何疑问,请评论区和我交流喲.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627171109.png\" alt=\"20240627171109\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>之前工作中业务繁杂, 各种逻辑需要写各种轮子需要抄, 结果需求无限, 但是脑容量有限, 所以就存在今天写了很牛逼的代码, 明天忘了怎么写的啦,这个迭代搭建了一套很好的开发模板, 下次迭代还要重新搭建. 各种操蛋配置(webpack 我没说你 😄). 反反复复很没意思, 所以就萌生了搞一个脚手架的想法, 一次配置, 一家公司周期内有效. 很好使 ^_^</p>\n<p><a href=\"https://www.npmjs.com/package/learn-cli\">learn-cli v0.0.2</a> 已经能满足大部分需求, 但是还存在不少可以优化的地方, 比如没有 readMe, 可以一次 download 把项目模板直接放在本地, 以后初始化项目直接从本地拷贝模板等等等等, 毕竟学无止境, 但时间有限, 我也欢迎小伙伴们的 PR, 让我们一起来搞一款我们喜欢的也是我们自己的脚手架</p>\n","categories":["blog","手把手撸一个脚手架"],"tags":["blog"]},{"title":"第三步, 获取 github 项目信息","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/%E7%AC%AC%E4%B8%89%E6%AD%A5,%20%E8%8E%B7%E5%8F%96%20github%20%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF/","content":"<blockquote>\n<p>脚手架, 作为一个工具, 主要是用来搬运我们已经准备好的项目模板(webpack 配置, koa 项目雏形等等), 这一步我们就来创建用于搬运的项目模板. 并通过接口获取相关信息 <a href=\"https://developer.github.com/v3/repos/\">github Api 文档</a></p>\n</blockquote>\n<p>ps: 这一步基于 github 若有没使用过的小伙伴, 请加油</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165052.png\" alt=\"20240627165052\"></p>\n<h2 id=\"创建一个专门用于维护项目模板的项目组\"><a href=\"#创建一个专门用于维护项目模板的项目组\" class=\"headerlink\" title=\"创建一个专门用于维护项目模板的项目组\"></a>创建一个专门用于维护项目模板的项目组</h2><blockquote>\n<p>为了不和自己平时写的各种辣鸡代码混杂在一起, 这里我专门创建了一个 organization 不会创建的兄弟们请 <a href=\"https://www.baidu.com/s?ie=UTF-8&wd=github%20%E5%88%9B%E5%BB%BA%20organization\">度娘</a></p>\n</blockquote>\n<ul>\n<li>目录切换到刚刚创建的 organization 上</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165157.png\" alt=\"20240627165157\"></p>\n<ul>\n<li>创建一个项目</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165207.png\" alt=\"20240627165207\"></p>\n<ul>\n<li>向创建的项目中添加一个文件, 上传到 github 并打好 tag</li>\n</ul>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165450.png\" alt=\"20240627165450\"></p>\n<p>准备工作完成 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165502.png\" alt=\"20240627165502\"></p>\n<h2 id=\"通过-github-开放-api-获取项目信息\"><a href=\"#通过-github-开放-api-获取项目信息\" class=\"headerlink\" title=\"通过 github 开放 api 获取项目信息\"></a>通过 github 开放 api 获取项目信息</h2><blockquote>\n<p>baseUrl: <a href=\"https://api.github.com/\">https://api.github.com</a></p>\n</blockquote>\n<p>作为一个脚手架, 我们需要获取的项目信息包含以下几个:</p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  补充  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"ps-由于-github-开放-api-有请求次数限制-未授权每小时-60-次-所以可能存在下图的情况-解决方法是在请求中加入认证信息-authToken-详情参考系列文章下一篇-本节的临时处理方案为执行命令时候添加自己的-github-账号密码即可\"><a href=\"#ps-由于-github-开放-api-有请求次数限制-未授权每小时-60-次-所以可能存在下图的情况-解决方法是在请求中加入认证信息-authToken-详情参考系列文章下一篇-本节的临时处理方案为执行命令时候添加自己的-github-账号密码即可\" class=\"headerlink\" title=\"ps 由于 github 开放 api 有请求次数限制(未授权每小时 60 次), 所以可能存在下图的情况, 解决方法是在请求中加入认证信息(authToken), 详情参考系列文章下一篇, 本节的临时处理方案为执行命令时候添加自己的 github 账号密码即可.\"></a>ps 由于 github 开放 api 有请求次数限制(未授权每小时 60 次), 所以可能存在下图的情况, 解决方法是在请求中加入认证信息(authToken), 详情参考系列文章<a href=\"https://juejin.im/post/5bed6ff2f265da61137ed948\">下一篇</a>, 本节的临时处理方案为执行命令时候添加自己的 github 账号密码即可.</h2><p><img src=\"https://handle-note-img.niubishanshan.top/20240627165850.png\" alt=\"20240627165850\"></p>\n<h3 id=\"获取组织所属项目列表文档\"><a href=\"#获取组织所属项目列表文档\" class=\"headerlink\" title=\"获取组织所属项目列表文档\"></a>获取组织所属项目列表<a href=\"https://developer.github.com/v3/repos/#list-organization-repositories\">文档</a></h3><p>我们可以尝试一下获取刚刚创建的 organization 下的项目目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl <span class=\"attr\">https</span>:<span class=\"comment\">//api.github.com/orgs/learn-cli-organization/repos</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果报了上图所示错误, 在 curl 和接口地址中间加入 -u &quot;你的github账号:你的github密码&quot; 中间的冒号不要删除, 作为分割</span></span><br><span class=\"line\">curl -u <span class=\"string\">&quot;你的github账号:你的github密码&quot;</span> <span class=\"attr\">https</span>:<span class=\"comment\">//api.github.com/orgs/learn-cli-organization/repos</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回的结果</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">157579674</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;node_id&quot;</span>: <span class=\"string\">&quot;MDEwOlJlcG9zaXRvcnkxNTc1Nzk2NzQ=&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;demo&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;full_name&quot;</span>: <span class=\"string\">&quot;learn-cli-organization/demo&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;private&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;owner&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;login&quot;</span>: <span class=\"string\">&quot;learn-cli-organization&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">45043923</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;node_id&quot;</span>: <span class=\"string\">&quot;MDEyOk9yZ2FuaXphdGlvbjQ1MDQzOTIz&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;avatar_url&quot;</span>: <span class=\"string\">&quot;https://avatars2.githubusercontent.com/u/45043923?v=4&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;gravatar_id&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;html_url&quot;</span>: <span class=\"string\">&quot;https://github.com/learn-cli-organization&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;followers_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/followers&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;following_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/following&#123;/other_user&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;gists_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/gists&#123;/gist_id&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;starred_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;subscriptions_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/subscriptions&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;organizations_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/orgs&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;repos_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/repos&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;events_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/events&#123;/privacy&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;received_events_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/users/learn-cli-organization/received_events&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Organization&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;site_admin&quot;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;html_url&quot;</span>: <span class=\"string\">&quot;https://github.com/learn-cli-organization/demo&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;description&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;fork&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;forks_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/forks&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;keys_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/keys&#123;/key_id&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;collaborators_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/collaborators&#123;/collaborator&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;teams_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/teams&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hooks_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/hooks&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;issue_events_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/issues/events&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;events_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/events&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;assignees_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/assignees&#123;/user&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;branches_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/branches&#123;/branch&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;tags_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/tags&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;blobs_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/git/blobs&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;git_tags_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/git/tags&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;git_refs_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/git/refs&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;trees_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/git/trees&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;statuses_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/statuses/&#123;sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;languages_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/languages&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;stargazers_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/stargazers&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;contributors_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/contributors&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;subscribers_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/subscribers&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;subscription_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/subscription&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;commits_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/commits&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;git_commits_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/git/commits&#123;/sha&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;comments_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/comments&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;issue_comment_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/issues/comments&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;contents_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/contents/&#123;+path&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;compare_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/compare/&#123;base&#125;...&#123;head&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;merges_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/merges&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;archive_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/&#123;archive_format&#125;&#123;/ref&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;downloads_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/downloads&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;issues_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/issues&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pulls_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/pulls&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;milestones_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/milestones&#123;/number&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;notifications_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/notifications&#123;?since,all,participating&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;labels_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/labels&#123;/name&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;releases_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/releases&#123;/id&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;deployments_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/deployments&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;created_at&quot;</span>: <span class=\"string\">&quot;2018-11-14T16:41:01Z&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;updated_at&quot;</span>: <span class=\"string\">&quot;2018-11-14T16:42:39Z&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pushed_at&quot;</span>: <span class=\"string\">&quot;2018-11-14T16:43:18Z&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;git_url&quot;</span>: <span class=\"string\">&quot;git://github.com/learn-cli-organization/demo.git&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ssh_url&quot;</span>: <span class=\"string\">&quot;git@github.com:learn-cli-organization/demo.git&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;clone_url&quot;</span>: <span class=\"string\">&quot;https://github.com/learn-cli-organization/demo.git&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;svn_url&quot;</span>: <span class=\"string\">&quot;https://github.com/learn-cli-organization/demo&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;homepage&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;stargazers_count&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watchers_count&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;language&quot;</span>: <span class=\"string\">&quot;JavaScript&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;has_issues&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;has_projects&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;has_downloads&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;has_wiki&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;has_pages&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;forks_count&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mirror_url&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;archived&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;open_issues_count&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;license&quot;</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;forks&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;open_issues&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watchers&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;default_branch&quot;</span>: <span class=\"string\">&quot;master&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;admin&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;push&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;pull&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>拿到这个数组说明我们已经能够获取到项目组中的所有项目啦, 一波猝不及防的商业互吹 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli5.gif\"></p>\n<h3 id=\"获取指定项目的版本号-文档\"><a href=\"#获取指定项目的版本号-文档\" class=\"headerlink\" title=\"获取指定项目的版本号 文档\"></a>获取指定项目的版本号 <a href=\"https://developer.github.com/v3/repos/#list-tags\">文档</a></h3><p>通过前一个接口, 我们成功的获取到了项目组中所有的项目信息, 接下来我们可以通过以下接口获取到指定项目的版本信息(就是 tags)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl <span class=\"attr\">https</span>:<span class=\"comment\">//api.github.com/repos/learn-cli-organization/demo/tags</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果报了上图所示错误, 在 curl 和接口地址中间加入 -u &quot;你的github账号:你的github密码&quot; 中间的冒号不要删除, 作为分割</span></span><br><span class=\"line\">curl -u <span class=\"string\">&quot;你的github账号:你的github密码&quot;</span> <span class=\"attr\">https</span>:<span class=\"comment\">//api.github.com/repos/learn-cli-organization/demo/tags</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;v0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;zipball_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/zipball/v0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;tarball_url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/tarball/v0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;commit&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;sha&quot;</span>: <span class=\"string\">&quot;00f0dda86e5f922e2ae406c25e19b44b2463f690&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://api.github.com/repos/learn-cli-organization/demo/commits/00f0dda86e5f922e2ae406c25e19b44b2463f690&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;node_id&quot;</span>: <span class=\"string\">&quot;MDM6UmVmMTU3NTc5Njc0OnYwLjAuMQ==&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>下集预告: 到目前为止, 我们已经能够获取到项目信息. 下一步我们会将结合 <code>inquirer.js</code> 实现命令行交互式的动态获取这些信息</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627165831.png\" alt=\"20240627165831\"></p>\n","categories":["blog","手把手撸一个脚手架"],"tags":["blog"]},{"title":"第二步, 搭建开发环境","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/%E7%AC%AC%E4%BA%8C%E6%AD%A5,%20%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","content":"<blockquote>\n<p>工欲善其事, 必先利其器. 一个好的开发环境能让你事半功倍. 大家一起来, 把刀磨快加油干 ^_^</p>\n</blockquote>\n<blockquote>\n<p>宝宝们请注意, 由于项目中用到了 async 函数, 所以 node 需要 v7.6.0+ 的版本</p>\n</blockquote>\n<h2 id=\"配置-eslint-开启-vscode-自动修复\"><a href=\"#配置-eslint-开启-vscode-自动修复\" class=\"headerlink\" title=\"配置 eslint 开启 vscode 自动修复\"></a>配置 eslint 开启 vscode 自动修复</h2><h3 id=\"配置-eslint\"><a href=\"#配置-eslint\" class=\"headerlink\" title=\"配置 eslint\"></a>配置 eslint</h3><span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240625233846.png\" alt=\"20240625233846\"></p>\n<ul>\n<li>首先, 安装 <code>eslint</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint -D</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其次, 初始化 <code>eslint</code> 在项目的根目录下执行 <code>./node_modules/.bin/eslint --init</code></p>\n</li>\n<li><p>在命令行提示中选择第一个 <code>Use a popular style guide</code> 回车<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150625.png\" alt=\"20240626150625\"></p>\n</li>\n<li><p>接下来的提示中, 仍然选择第一个 <code>Airbnb</code>, 相对严格<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150635.png\" alt=\"20240626150635\"></p>\n</li>\n<li><p><code>Do you use React?</code> 写 <code>n</code>  然后回车.</p>\n</li>\n<li><p>配置文件格式选择默认即可<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150645.png\" alt=\"20240626150645\"></p>\n</li>\n<li><p>设置完配置文件格式以后, eslint 会自动检测依赖这里我们直接回车就可以啦~<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150655.png\" alt=\"20240626150655\"></p>\n</li>\n<li><p>下一步, 等<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli.gif\"></p>\n</li>\n<li><p>下一步, 编辑器安装 <code>eslint</code> 插件<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150915.png\" alt=\"20240626150915\"></p>\n</li>\n<li><p>安装完成后重启编辑器, 我们把示例代码行尾的封号去掉后发现编辑器已经标红, 说明 eslint 已经能够正常工作. 配置成功, 是不是心跳蹦蹦迪~<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150929.png\" alt=\"20240626150929\"></p>\n</li>\n</ul>\n<h3 id=\"开启-vscode-自动修复\"><a href=\"#开启-vscode-自动修复\" class=\"headerlink\" title=\"开启 vscode 自动修复\"></a>开启 vscode 自动修复</h3><blockquote>\n<p>通过上一步的配置我们已经能够让编辑器识别出我们代码中不规范的地方, 但是还不够. 既然编辑器能够识别出错误, 它要是还能修正错误岂不是爽死</p>\n</blockquote>\n<ul>\n<li><p>第一步, 打开 vscode 配置文件 <code>command + ,</code></p>\n</li>\n<li><p>第二步, 在功能搜索框中输入 <code>autofix</code></p>\n</li>\n<li><p>第三步, 按照如下图所示的方式配置.<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150944.png\" alt=\"20240626150944\"></p>\n</li>\n</ul>\n<p>至此, 我们的编辑器已经可以自动修复 eslint 中发现的 <strong>代码规范</strong> 相关的一些错误啦, 就像下边酱紫.<br><img src=\"https://handle-note-img.niubishanshan.top/20240626150953.png\" alt=\"20240626150953\"></p>\n<p>删除封号以后, 保存编辑器自动把封号给我们加上啦, 开发体验 666, 爽到飞起 ^_^<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli2.gif\"></p>\n<p>ps: 至此, vscode 配置自动修复功能完成, 告诉你个秘密, <code>vue react</code> 都可以自动修复的哟, 有兴趣的小伙伴请评论区交流~</p>\n<h3 id=\"兼容-es6\"><a href=\"#兼容-es6\" class=\"headerlink\" title=\"兼容 es6\"></a>兼容 es6</h3><h2 id=\"大写的-PS-以下配置用于普通的-node-项目没有问题-但是在脚手架项目中会出现时而好用时而不好用的问题-具体原因我还没有搞清楚-希望老司机不吝赐教-评论区-我等你\"><a href=\"#大写的-PS-以下配置用于普通的-node-项目没有问题-但是在脚手架项目中会出现时而好用时而不好用的问题-具体原因我还没有搞清楚-希望老司机不吝赐教-评论区-我等你\" class=\"headerlink\" title=\"大写的 PS: 以下配置用于普通的 node 项目没有问题, 但是在脚手架项目中会出现时而好用时而不好用的问题, 具体原因我还没有搞清楚. 希望老司机不吝赐教, 评论区, 我等你\"></a><span style=\"color: red;\">大写的 PS:</span> 以下配置用于普通的 node 项目没有问题, 但是在脚手架项目中会出现时而好用时而不好用的问题, 具体原因我还没有搞清楚. 希望老司机不吝赐教, 评论区, 我等你</h2><p><img src=\"https://handle-note-img.niubishanshan.top/20240626151109.png\" alt=\"20240626151109\"></p>\n<h2 id=\"目前我的解决方案是-把-es6-的模块导入规则手动改成了-commonjs-规范-实在不喜欢-babel-转码然后还给更改目录-目前线上跑着的代码地址为-github\"><a href=\"#目前我的解决方案是-把-es6-的模块导入规则手动改成了-commonjs-规范-实在不喜欢-babel-转码然后还给更改目录-目前线上跑着的代码地址为-github\" class=\"headerlink\" title=\"目前我的解决方案是, 把 es6 的模块导入规则手动改成了 commonjs 规范(实在不喜欢 babel 转码然后还给更改目录), 目前线上跑着的代码地址为 github\"></a>目前我的解决方案是, 把 es6 的模块导入规则手动改成了 commonjs 规范(实在不喜欢 babel 转码然后还给更改目录), 目前线上跑着的代码地址为 <a href=\"https://github.com/luoquanquan/learn-cli/tree/0.0.3\">github</a></h2><blockquote>\n<p>现代的前端开发人员, es6 已经成为了刚需, 然鹅, node 对 es6 并没有完全兼容(到目前为止), 为了全方位使用最新的语法. 我们引入 babel</p>\n</blockquote>\n<p>首先, 安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i @babel/core@7.1.6 babel-core@^6.26.3 babel-plugin-transform-es2015-modules-commonjs@6.26.2 babel-polyfill@6.26.0 babel-preset-env@1.7.0 babel-preset-latest-node@2.0.2 babel-register@6.26.0 -S</span><br></pre></td></tr></table></figure>\n\n<p>在项目的根目录中添加 <code>.babelrc</code> 在该文件中粘贴以下内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;env&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;transform-es2015-modules-commonjs&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建入口文件 <code>index.js</code> 并粘贴以下内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-register&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> babelPresetLatestNode = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-latest-node&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">babel.<span class=\"title function_\">transform</span>(<span class=\"string\">&#x27;code();&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [[babelPresetLatestNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;current&#x27;</span>,</span><br><span class=\"line\">  &#125;]],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-polyfill&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./src&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>src</code> 目录, 并添加 index.js a.js 文件, 文件内容如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span>;</span><br><span class=\"line\">a.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;12345&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>此时执行 <code>node index.js</code> 顺利打印出 12345<br><img src=\"https://handle-note-img.niubishanshan.top/20240626151125.png\" alt=\"20240626151125\"></p>\n<p>最后改造 <code>bin/learn.js</code> 内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../&#x27;</span>); <span class=\"comment\">// 执行入口文件</span></span><br></pre></td></tr></table></figure>\n\n<p>此时在命令行中执行 learn<br><img src=\"https://handle-note-img.niubishanshan.top/20240626151136.png\" alt=\"20240626151136\"></p>\n<p>兼容 es6 成功</p>\n<p>到目前为止, 我们的开发环境搭建完成. 撒花庆祝 ^_^</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/14/167126ff120e3af5?w=150&h=150&f=gif&s=81374\" alt=\"6af89bc8gw1f8swu2wk2tg2046046gnj\"></p>\n<p>下集预告: 下一节, 我们将会对接 <a href=\"https://developer.github.com/v3/repos/\">gayhub 公共 api</a> 获取项目信息, 有兴趣的小伙伴可以提前预习一哈, 大家玩儿的开心 😄</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627164824.png\" alt=\"20240627164824\"></p>\n","categories":["blog","手把手撸一个脚手架"],"tags":["blog"]},{"title":"第四步, 通过撸码获取项目信息","url":"/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/blog/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/%E7%AC%AC%E5%9B%9B%E6%AD%A5,%20%E9%80%9A%E8%BF%87%E6%92%B8%E7%A0%81%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF/","content":"<blockquote>\n<p>前面的章节中我们已经能够获取到命令行中输入的参数, 也能通过 gayhub 开放 api 中获取到项目模板信息, 这里我们开始把之前的功能连缀起来 ^_^</p>\n</blockquote>\n<p>本节用到的工具较多, list 一哈:</p>\n<ul>\n<li>获取命令行指令 <a href=\"https://www.npmjs.com/package/commander\">commander</a></li>\n<li>命令行交互工具 <a href=\"https://github.com/SBoudrias/Inquirer.js#documentation\">inquirer.js</a></li>\n<li>命令行显示加载中 <a href=\"https://www.npmjs.com/package/ora\">ora</a></li>\n<li>ajax 封装库 <a href=\"https://www.npmjs.com/package/axios\">axios</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170014.png\" alt=\"20240627170014\"></p>\n<h2 id=\"首先展示一下目录结构代码地址\"><a href=\"#首先展示一下目录结构代码地址\" class=\"headerlink\" title=\"首先展示一下目录结构代码地址\"></a>首先展示一下目录结构<a href=\"https://github.com/luoquanquan/learn-cli/tree/0.0.1\">代码地址</a></h2><p><img src=\"https://handle-note-img.niubishanshan.top/20240627170129.png\" alt=\"20240627170129\"></p>\n<h2 id=\"各个文件介绍\"><a href=\"#各个文件介绍\" class=\"headerlink\" title=\"各个文件介绍\"></a>各个文件介绍</h2><p>bin&#x2F;learn.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>仍然作为项目的引导文件, 直接引入项目根目录下的 index.js</p>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-register&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> babelPresetLatestNode = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-latest-node&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">babel.<span class=\"title function_\">transform</span>(<span class=\"string\">&#x27;code();&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [[babelPresetLatestNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;current&#x27;</span>,</span><br><span class=\"line\">  &#125;]],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-polyfill&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./src&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>根目录下的 index 作为项目的入口文件, 它的职责主要是兼容 es6, 并导入项目主文件 <code>src/index.js</code></p>\n<p>src&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// colors console.log 文本添加字体颜色, 美观</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;colors&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收命令行参数, 提供基础信息提示功能</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> commander <span class=\"keyword\">from</span> <span class=\"string\">&#x27;commander&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内部模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; existsSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; version &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../package.json&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">commander.<span class=\"title function_\">version</span>(version)</span><br><span class=\"line\">  .<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取命令行中传入的第一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [todo = <span class=\"string\">&#x27;&#x27;</span>] = commander.<span class=\"property\">args</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断如果 command 目录下是否存在用户输入的命令对应的文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">existsSync</span>(<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">`command/<span class=\"subst\">$&#123;todo&#125;</span>.js`</span>))) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">`./command/<span class=\"subst\">$&#123;todo&#125;</span>.js`</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">    <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      你输入了未知指令, 小哥哥我已经受不了挂了...</span></span><br><span class=\"line\"><span class=\"string\">    `</span>.<span class=\"property\">red</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  process.<span class=\"title function_\">exit</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个是项目的主文件, 也是整个程序的<strong>总控</strong>. 正如注释, 执行命令前, 从这里检测我们的命令目录下是否已经存在了用户请求的命令, 避免了用户误操作程序报错的风险.</p>\n<p>command&#x2F;download.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令管理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> commander <span class=\"keyword\">from</span> <span class=\"string\">&#x27;commander&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命令行交互工具</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> inquirer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;inquirer&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命令行中显示加载中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ora <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ora&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Git</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../tools/git&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Download</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">git</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Git</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">commander</span> = commander;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inquirer</span> = inquirer;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getProList</span> = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;获取项目列表...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getTagList</span> = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;获取项目版本...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">downLoad</span> = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;正在加速为您下载代码...&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">commander</span></span><br><span class=\"line\">      .<span class=\"title function_\">command</span>(<span class=\"string\">&#x27;download&#x27;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">description</span>(<span class=\"string\">&#x27;从远程下载代码到本地...&#x27;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">action</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"title function_\">download</span>(); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">commander</span>.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">download</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> getProListLoad;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> getTagListLoad;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> repos;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> version;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      getProListLoad = <span class=\"variable language_\">this</span>.<span class=\"property\">getProList</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">      repos = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">git</span>.<span class=\"title function_\">getProjectList</span>();</span><br><span class=\"line\">      getProListLoad.<span class=\"title function_\">succeed</span>(<span class=\"string\">&#x27;获取项目列表成功&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">      getProListLoad.<span class=\"title function_\">fail</span>(<span class=\"string\">&#x27;获取项目列表失败...&#x27;</span>);</span><br><span class=\"line\">      process.<span class=\"title function_\">exit</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (repos.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\n可以开发的项目数为 0, 肯定是配置错啦~~\\n&#x27;</span>.<span class=\"property\">red</span>);</span><br><span class=\"line\">      process.<span class=\"title function_\">exit</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> choices = repos.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> name);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> questions = [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;list&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;repo&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;请选择你想要开发的项目类型&#x27;</span>,</span><br><span class=\"line\">        choices,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; repo &#125; = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">inquirer</span>.<span class=\"title function_\">prompt</span>(questions);</span><br><span class=\"line\">    <span class=\"comment\">// 获取项目的版本, 这里默认选择确定项目的最近一个版本</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      getTagListLoad = <span class=\"variable language_\">this</span>.<span class=\"property\">getTagList</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">      [&#123; <span class=\"attr\">name</span>: version &#125;] = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">git</span>.<span class=\"title function_\">getProjectVersions</span>(repo);</span><br><span class=\"line\">      getTagListLoad.<span class=\"title function_\">succeed</span>(<span class=\"string\">&#x27;获取项目版本成功&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">      getTagListLoad.<span class=\"title function_\">fail</span>(<span class=\"string\">&#x27;获取项目版本失败...&#x27;</span>);</span><br><span class=\"line\">      process.<span class=\"title function_\">exit</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`您选择的项目是<span class=\"subst\">$&#123;repo&#125;</span>, 即将下载版本<span class=\"subst\">$&#123;version&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> D = <span class=\"keyword\">new</span> <span class=\"title class_\">Download</span>();</span><br><span class=\"line\">D.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>command 目录下存放的是我们整个项目中所有的命令文件, 不同的命令对应不同的文件, 体现了单一职责的设计. download 命令用到了我们上一节中提到的两个接口(即获取项目列表和获取版本号列表)有疑问的同学请回头参考系列文章第三步 ^_^.</p>\n<p>tools&#x2F;git.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./request&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; orgName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Git</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">orgName</span> = orgName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getProjectList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(<span class=\"string\">`/orgs/<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.orgName&#125;</span>/repos`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getProjectVersions</span>(<span class=\"params\">repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(<span class=\"string\">`/repos/<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.orgName&#125;</span>/<span class=\"subst\">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getProjectUrl</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">downloadProject</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Git</span>;</span><br></pre></td></tr></table></figure>\n\n<p>此文件是 git 相关的操作的文件, 由于脚手架的核心功能就是获取项目的 github 地址, 并下载, 所以我的 Git 类规划了以上几个功能, <code>获取项目列表 获取项目版本号列表 获取项目地址 下载项目</code>, 虽然后两个功能在这一节还用不到, 我也先留下了代码桩</p>\n<p>tools&#x2F;request.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; baseURL &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  baseURL,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1e4</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add a request interceptor</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> config,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add a response interceptor</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"property\">data</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> instance;</span><br></pre></td></tr></table></figure>\n\n<p>这个文件仅仅是对 axios 做了一层简单的封装, 封装的手法我还不是掌握的很好, 如果有精通的小伙伴欢迎评论区赐教.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170200.png\" alt=\"20240627170200\"></p>\n<p>config&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// github 接口基础地址</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> baseURL = <span class=\"string\">&#x27;https://api.github.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// organization 名称</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> orgName = <span class=\"string\">&#x27;learn-cli-organization&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>作为整个项目的配置文件, 承担了保存项目运行过程中需要的配置信息的功能.</p>\n<p>介绍完几个文件, 感到如释重负. 如果有手懒的小伙伴, 可以直接 github clone <a href=\"https://github.com/luoquanquan/learn-cli/tree/0.0.1\">本阶段代码</a>按照第一步的方法配置即可</p>\n<p>ps: <code>git clone https://github.com/luoquanquan/learn-cli.git</code><br>ps: <code>git checkout 0.0.1</code><br>ps: 完成后要执行 <code>npm i</code> 和 <code>npm link</code> 的哟 ^_^</p>\n<h2 id=\"验证代码\"><a href=\"#验证代码\" class=\"headerlink\" title=\"验证代码\"></a>验证代码</h2><p>终于到了验证的环节. 小伙伴们, 自己写完或者 git clone 完代码以后可以打开终端啦, 484 有点小小的鸡冻 ^_^</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170216.png\" alt=\"20240627170216\"></p>\n<p>输入 <code>learn download</code></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170227.png\" alt=\"20240627170227\"></p>\n<p>出现上图所示的项目名称和版本号, 说明我们已经通过代码获取 git 项目信息成功啦.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20240627170234.png\" alt=\"20240627170234\"></p>\n<p>下集预告: 到现在, 我们已经能够从 github 获取到项目的名称和版本号, 下一步会尝试把项目 download 到本地用到了工具 <a href=\"https://www.npmjs.com/package/download-git-repo\">download-git-repo</a>, 热爱动手的小伙伴已经可以开始着手啦, 说不定下一步就是你来写喲 😄</p>\n<h1 id=\"x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-更新-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D\"><a href=\"#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-更新-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p>由于 github 开放 api 访问次数的限制(未授权每小时只有 60 次), 所以我们不得不加上授权.其实就是申请一个 github 授权 token 写到代码里. 申请 token 的步骤在这里<br><img src=\"https://handle-note-img.niubishanshan.top/gifs/cli4.gif\" alt=\"get-token\"></p>\n<p>最后贴上添加 token 以后的一次<a href=\"https://github.com/luoquanquan/learn-cli/commit/a74901dc373373d5d7ff425ddb66203cb689cd28\">提交记录</a></p>\n<p>为什么要把 token 先改成乱码在反转回来呢? 因为脚手架代码要上传到 github, 上传时候如果你的代码中存在 github token 明文的话, 该 token 就会被删除. (不说了都是泪….)</p>\n<p>最终的<a href=\"https://github.com/luoquanquan/learn-cli/tree/0.0.5\">代码</a></p>\n","categories":["blog","手把手撸一个脚手架"],"tags":["blog"]},{"title":"隐藏滚动条","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/css/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/css/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1/","content":"<p>使用纯 CSS 实现隐藏滚动条, 内容比较少直接放代码链接了:</p>\n<p><a href=\"https://github.com/luoquanquan/learn-fe/tree/main/css/hidden-scroll-bar\">Reference</a></p>\n","categories":["开发笔记","css"],"tags":["开发笔记"]},{"title":"常见的 css 坑","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/css/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/css/%E5%B8%B8%E8%A7%81%E7%9A%84%20css%20%E5%9D%91/","content":"<h2 id=\"Safari-中-flex-包含图片高度暴走\"><a href=\"#Safari-中-flex-包含图片高度暴走\" class=\"headerlink\" title=\"Safari 中 flex 包含图片高度暴走\"></a>Safari 中 flex 包含图片高度暴走</h2><p>详情:</p>\n<p>Safari 中 flex 容器包含一个图片时图片加载完成后高度会暴走</p>\n<p>解决方案:</p>\n<ul>\n<li>不这样用</li>\n<li>限制宽度的图片利用竖向 flex</li>\n<li>限制高度的图片利用横向 flex</li>\n</ul>\n<h2 id=\"安卓文本无法垂直居中问题\"><a href=\"#安卓文本无法垂直居中问题\" class=\"headerlink\" title=\"安卓文本无法垂直居中问题\"></a>安卓文本无法垂直居中问题</h2><blockquote>\n<p>默认情况下使用 <code>line-height: height</code> 就可以实现单行文字内容的垂直居中对齐, 但是当文字字体小于 12px 的时候(或者是基数的倍数的时候) 实际上字体就会向上偏移一点. 有的手机上表现着实离谱, 完全没法忽悠设计的地步了…</p>\n</blockquote>\n<h3 id=\"缩放的方法\"><a href=\"#缩放的方法\" class=\"headerlink\" title=\"缩放的方法\"></a>缩放的方法</h3><p>既然字体是基数的倍数的时候会偏移, 那么先把字体大小放大 1 倍, 然后再通过 transform 缩小就搞定了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 32px; line-height: 32px; font-size: 20px; transform: scale(0.5, 0.5); transform-origin: left top;&quot;</span>&gt;</span></span><br><span class=\"line\">    我就是要居中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"flex-or-内边距-line-height-nomal\"><a href=\"#flex-or-内边距-line-height-nomal\" class=\"headerlink\" title=\"flex or 内边距 + line-height: nomal\"></a>flex or 内边距 + line-height: nomal</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex; align-item: center; line-height: normal; font-size: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">    我就是要居中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;box-sizing: border-box; padding: 0 10px; line-height: normal; font-size: 10px;&quot;</span>&gt;</span></span><br><span class=\"line\">    我就是要居中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"position-fixed-作为-transform-元素子元素\"><a href=\"#position-fixed-作为-transform-元素子元素\" class=\"headerlink\" title=\"position: fixed; 作为 transform 元素子元素\"></a>position: fixed; 作为 transform 元素子元素</h2><p>这是一个十年前就有人问过的问题 <a href=\"https://stackoverflow.com/questions/2637058/positions-fixed-doesnt-work-when-using-webkit-transform\">stackoverflow</a>当你的 position: fixed; 的元素包裹在使用了 transform 属性的元素的时候, fixed 定位就会失效, 不能固定定位了.</p>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://xinpure.com/position-fixed-encountered-an-invalid-event/\">那些遇到的position-fixed无效事件</a></li>\n<li><a href=\"https://drafts.csswg.org/css-transforms-1/#containing-block-for-all-descendants\">https://drafts.csswg.org/css-transforms-1/#containing-block-for-all-descendants</a></li>\n</ul>\n<h2 id=\"iOS-10-直接使用-ele-style-x3D-“”-bug\"><a href=\"#iOS-10-直接使用-ele-style-x3D-“”-bug\" class=\"headerlink\" title=\"iOS 10 直接使用 ele.style &#x3D; “” bug\"></a>iOS 10 直接使用 ele.style &#x3D; “” bug</h2><p>在写 js 蒙层的时候为了方便直接写了 <code>modalEle.style = &quot;width: 100%; height: 100%;&quot;</code> 在安卓中没啥问题. 但是在 <code>iOS 10</code> 上报了错误 <font color=\"red\">attempted to assign to readonly property</font> 尝试分配只读属性. 也就是说 <code>ele.style</code> 不能重新赋值不能只能修改其属性, 修改为一下代码即可解决:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">modalEle.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br><span class=\"line\">modalEle.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>参考文档: <a href=\"https://blog.csdn.net/weixin_45532305/article/details/107319854\">ios设备出现attempted-to-assign-to-readonly-property报错</a></p>\n","categories":["开发笔记","css"],"tags":["开发笔记"]},{"title":"=== vs ==","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/===%20vs%20==/","content":"<h2 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h2><ol>\n<li>&#x3D;&#x3D;&#x3D; 为恒等符, 当两边的变量类型相等的时候进行对比, 值相等返回 true 不相等则返回 false</li>\n<li>&#x3D;&#x3D; 为等值符, 两边变量类型相同时直接比较是否相等, 否则会进行转化</li>\n</ol>\n<h2 id=\"转化规则\"><a href=\"#转化规则\" class=\"headerlink\" title=\"转化规则\"></a>转化规则</h2><ol>\n<li>如果一个是 null 一个是 undefined, 相等</li>\n<li>如果一个是字符串一个是数字, 把字符串转化成数字再比较</li>\n<li>如果一个是Boolean 那么把布尔值转化成数字再比较</li>\n<li>如果一个是对象,  另外一个是数字 or 字符串. 把对象转成原始值在比较</li>\n<li>其他类型的都不相等</li>\n</ol>\n<p>对象转原始值其实就是调用其Symbol.toPrimitive, 你可以改写对象的这个方法参考: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive</a><br>默认情况下大多是优先调用自身的 valueOf 方法. 只有 Date 对象除外, 会优先调用 toString 方法</p>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"eventLoop","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/eventLoop/","content":"<h2 id=\"为什么会有-eventLoop\"><a href=\"#为什么会有-eventLoop\" class=\"headerlink\" title=\"为什么会有 eventLoop\"></a>为什么会有 eventLoop</h2><p>JS 的任务分为同步和异步两种, 由于 js 执行引擎为单线程. 他们的处理方式有所不同. 同步任务直接放在主线程上依次执行. 异步任务则会存放在任务队列中, 如果有多个异步任务需执行则需要在任务队列中等待执行.</p>\n<p>单线程的 js 只能同时做一件事情, 而对于有些异步事件(如 ajax 请求) 往往耗时较长. 主线程会在请求发出后去干别的事情. 浏览器先通过事件注册 ajax 的回调函数. 待响应返回后再添加到任务队列中等待处理. 而主线程也会在空闲时检查任务队列中是否有新添加的异步任务. 如果任务队列中存在待执行任务则拿出来执行. 整个把异步任务添加到异步队列中, 主线程空闲时检查异步任务队列非空则执行的过程就是事件环, 也是 js 实现异步逻辑的核心</p>\n<span id=\"more\"></span>\n\n<h2 id=\"浏览器中的-eventLoop\"><a href=\"#浏览器中的-eventLoop\" class=\"headerlink\" title=\"浏览器中的 eventLoop\"></a>浏览器中的 eventLoop</h2><p>浏览器中的异步任务分为两种:</p>\n<ul>\n<li>宏任务(macro-task)</li>\n<li>微任务(micro-task)</li>\n</ul>\n<p>常见的 macro-task:</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>script</li>\n</ul>\n<p>常见的 micro-task:</p>\n<ul>\n<li>Promise.prototype.then(回调)</li>\n<li>MutationObserve</li>\n</ul>\n<p>requestAnimationFrame 也属于异步执行的方法, 但是该方法既不属于宏任务也不属于微任务. 按照 mdn 的定义:</p>\n<p>requestAnimationFrame(cb) 告诉浏览器希望执行一个动画. 并且并且要求浏览器在下一次重绘之前调用指定的回调函数更新动画. 该方法需要传入一个回调函数. 此回调函数会在浏览器下一次重绘之前执行但是会在微任务之后. requestAnimationFrame 不一定会在当前帧必须执行. 由浏览器根据当前策略自行决定在哪一帧执行.</p>\n<h3 id=\"eventLoop-的过程\"><a href=\"#eventLoop-的过程\" class=\"headerlink\" title=\"eventLoop 的过程\"></a>eventLoop 的过程</h3><ol>\n<li>检查宏任务队列是否为空, 非空执行第二步, 为空执行第三步</li>\n<li>取出宏任务队列中的第一个任务并执行</li>\n<li>检查微任务队列是否为空, 非空之心第四步, 为空执行第五步</li>\n<li>取出微任务队列中的第一个任务并执行, 执行完成后返回上一步</li>\n<li>执行视图更新</li>\n</ol>\n<p>当某个宏任务执行完成后, 查看微任务队列中是否有待执行任务存在. 若存在则清空微任务队列再继续. 如果不存在则执行下一个宏任务. 在执行宏任务的过程中加入了新的微任务也会先添加到微任务队列. 待当前宏任务执行完成后查看微任务队列此时已不再为空.</p>\n<h2 id=\"node-中的-eventLoop\"><a href=\"#node-中的-eventLoop\" class=\"headerlink\" title=\"node 中的 eventLoop\"></a>node 中的 eventLoop</h2><p>node 的事件环和浏览器中不同, 其采用 v8 作为 js 的解析引擎. I&#x2F;O 处理则使用了自己设计的 libuv, 作为事件驱动模型的跨平台抽象层 libuv 封装了不同操作系统的一些底层特性. 对外提供了统一的 api, 事件环机制也由此实现.</p>\n<h3 id=\"六大阶段\"><a href=\"#六大阶段\" class=\"headerlink\" title=\"六大阶段\"></a>六大阶段</h3><ol>\n<li>timer 阶段: 这个阶段执行 timer(setTimeout, setInterval) 的回调, 并且是由 poll 阶段控制的</li>\n<li>I&#x2F;O callbacks 阶段: 处理一些上一轮循环中的少数未执行的 I&#x2F;O 回调</li>\n<li>idle, prepare 阶段: 仅 node 内部使用</li>\n<li>poll 阶段: 获取新的  I&#x2F;O 事件, 适当条件下 node 将阻塞在这里</li>\n<li>check 阶段: 执行 setImmediate 的回调</li>\n<li>close callbacks 阶段: 执行 socket 的 close 事件回调</li>\n</ol>\n<h4 id=\"poll-阶段描述\"><a href=\"#poll-阶段描述\" class=\"headerlink\" title=\"poll 阶段描述\"></a>poll 阶段描述</h4><p>poll 阶段中, 熊会做两件事:</p>\n<ol>\n<li>回到 timer 阶段执行回调</li>\n<li>执行 I&#x2F;O 回调, 如果在进入该阶段时如果没有设定 timer 的话, 会执行以下步骤:<ol>\n<li>如果有 setImmediate 回调需要执行, poll 阶段会停止并且进入到 check 阶段执行回调</li>\n<li>如果没有 setImmediate 回调需要执行, 会等待回调被加入到队列中并立即执行回调, 这里同样会有个超时时间防止一直等待下去. 若设定了 timer 且 poll 队列为空, 则会判断是否有 timer 超时, 如果有的话回到 timer 阶段执行回调.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h3><p>宏任务: setTimeout, setInterval, setImmediate, script, I&#x2F;O<br>微任务: process.nextTick, Promise.prototype.then(回调)</p>\n<h3 id=\"setImmediate-vs-setTimeout\"><a href=\"#setImmediate-vs-setTimeout\" class=\"headerlink\" title=\"setImmediate vs setTimeout\"></a>setImmediate vs setTimeout</h3><p>两者非常相似, 区别主要在于调用时机的不同:</p>\n<ul>\n<li>setImmediate 在 poll 阶段完成时执行, 即 check 阶段</li>\n<li>setTimeout 在 poll 阶段为空闲时且设定时间达到后执行, 在 timer 阶段执行回调</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setImmediate&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于上述代码来说 setTimeout 可能先执行也可能后执行</li>\n<li>首先, setTimeout(fn, 0) &#x3D;&#x3D;&#x3D; setTimeout(fn, 1), 由于任务加入到事件循环也需要成本<ul>\n<li>如果花费的时间大于 1ms, 那么在 timer 阶段会直接执行 setTimeout 回调</li>\n<li>如果准备花费的时间小于 1ms, 就会先执行 setImmediate 回调了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h3><p>process.nextTick 独立于 eventLoop 之外, 它有一个自己的队列. 当每个阶段执行完成后如果存在 nextTick 队列, 就会清空队列中的所有任务. 并且优先于其他微任务执行.</p>\n<h2 id=\"node-vs-浏览器-eventLoop\"><a href=\"#node-vs-浏览器-eventLoop\" class=\"headerlink\" title=\"node vs 浏览器 eventLoop\"></a>node vs 浏览器 eventLoop</h2><ul>\n<li>node 端: 微任务在事件循环的各个阶段之间执行</li>\n<li>浏览器端: 微任务在事件循环的宏任务执行完成之后执行</li>\n</ul>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"js 基础 - 1","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/js%20%E5%9F%BA%E7%A1%80%20-%201/","content":"<h2 id=\"null-vs-undefined\"><a href=\"#null-vs-undefined\" class=\"headerlink\" title=\"null vs undefined\"></a>null vs undefined</h2><h3 id=\"默认为-null-的情况\"><a href=\"#默认为-null-的情况\" class=\"headerlink\" title=\"默认为 null 的情况:\"></a>默认为 null 的情况:</h3><ul>\n<li>手动设置变量的值或者对象的某一属性值为 null(表示此时没有值, 以后可能会赋值)</li>\n<li>js DOM 元素获取的方法中, 如果没有获取到指定的元素对象. 默认返回 null</li>\n<li>Object.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; null</li>\n<li>正则捕获时, 捕获不到匹配的模式时会返回 null</li>\n</ul>\n<h3 id=\"默认为-undefined-的情况\"><a href=\"#默认为-undefined-的情况\" class=\"headerlink\" title=\"默认为 undefined 的情况:\"></a>默认为 undefined 的情况:</h3><ul>\n<li>变量提升, 只声明未定义的变量值就是 undefined</li>\n<li>严格模式下, 没有指定函数的执行上下文, 其内部的 this 就是 undefined</li>\n<li>获取对象没有的属性时, 返回 undefined</li>\n<li>函数定义了形参但是没有传入实参, 默认值 undefined</li>\n<li>函数没有显式的返回值, 默认返回 undefined</li>\n</ul>\n<h2 id=\"vuex-vs-localStorage\"><a href=\"#vuex-vs-localStorage\" class=\"headerlink\" title=\"vuex vs localStorage\"></a>vuex vs localStorage</h2><h3 id=\"本质区别\"><a href=\"#本质区别\" class=\"headerlink\" title=\"本质区别\"></a>本质区别</h3><ul>\n<li>vuex 存储在内存中, 读取速度快.</li>\n<li>localStorage 以文件的形式存储在本地硬盘, 相对而言内存中读取内容速度更快.</li>\n</ul>\n<h3 id=\"应用场景不同\"><a href=\"#应用场景不同\" class=\"headerlink\" title=\"应用场景不同\"></a>应用场景不同</h3><p>vuex 是专门为 vue 应用程序开发的状态管理工具. 采用了集中的方案管理所有组件的状态. 并以对应的规则约定了状态只能以一种可预测的方式改变. 保证了应用状态的一致性和可维护性…</p>\n<p>localStorage 是 html5 新增的本地存储 api, 是通过 js 将数据存储到本地的方法. 一般用于跨页面的数据传递</p>\n<p>PS: vuex 能够做到数据的响应式, localStorage 不能做到响应式. 需要自行处理</p>\n<h3 id=\"存续时长不同\"><a href=\"#存续时长不同\" class=\"headerlink\" title=\"存续时长不同\"></a>存续时长不同</h3><ul>\n<li>vuex 存储的数据均为会话级别, 刷新浏览器之后所有数据都会丢失.</li>\n<li>localStorage 存储的数据是长期的, 只要用户不主动删除数据, 其值可以保持存在</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由于 localStorage 存储的数据不具备响应式特性, 数据改变时无法通知引用它的组件更新. 所以无法用 localStorage 替换 vuex. 但是由于其长效存储的特性, 可以用 localStorage 存储用户编辑一半的表单. 实现本地的草稿箱</p>\n<h2 id=\"判断变量是否为数组\"><a href=\"#判断变量是否为数组\" class=\"headerlink\" title=\"判断变量是否为数组\"></a>判断变量是否为数组</h2><ol>\n<li>Array#prototype#isPrototypeOf(obj)</li>\n<li>obj instanceof Array</li>\n<li>Object#protorype#toString#call(obj) &#x3D;&#x3D;&#x3D; ‘[object Array]’</li>\n<li>Array#isArray(obj)</li>\n</ol>\n<h2 id=\"script-中的-defer-和-async-的区别\"><a href=\"#script-中的-defer-和-async-的区别\" class=\"headerlink\" title=\"script 中的 defer 和 async 的区别\"></a>script 中的 defer 和 async 的区别</h2><ul>\n<li><p>默认的 script 标签引入 js 浏览器会立即加载并执行相应的 js 文件. 同时会阻塞后续文档的渲染.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;demo.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 async 属性之后, 表示 js 的加载和执行和文档的渲染是并行进行的, 也就是说是异步执行的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;demo.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 defer 属性后, js 文件的加载和文档的渲染是并行的. 但是 js 文件只有在文档渲染完成后(DOMContentLoaded 触发后)才会执行. 如果是需要获取 dom 元素的 js 文件需要使用 defer</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;demo.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>两者的加载过程是一样的, 都是异步加载</li>\n<li>两者的区别在于加载完成之后的执行时机, async 为加载完成之后立即执行. 但是 defer 为加载完成之后等待 DOMContentLoaded 才会执行</li>\n</ol>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"代码执行结果-1","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C-1/","content":"<h2 id=\"推断以下代码执行的结果\"><a href=\"#推断以下代码执行的结果\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!foo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bar</span>()</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升</li>\n<li>代码自上而下执行</li>\n<li>函数调用<ul>\n<li>形参赋值</li>\n<li>变量提升, var foo; 提升到函数作用域的顶端</li>\n<li>代码自上而下执行<br>由于代码执行到 if 判断时 foo 已经被声明默认值为 undefined 所以 !foo &#x3D;&gt; true 最终打印的结果就是 10</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-1\"><a href=\"#推断以下代码执行的结果-1\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        n++</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">b</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"title function_\">a</span>()</span><br><span class=\"line\"><span class=\"title function_\">c</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升</li>\n<li>var n; var c; function a; a &#x3D; AAAFFF111(内存地址)</li>\n<li>代码由上向下执行</li>\n<li>n &#x3D; 0</li>\n<li>c &#x3D; a() 创建私有作用域<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升</li>\n<li>var n; function b; b &#x3D; BBBFFF111; n &#x3D; 10;</li>\n<li>b() 创建私有作用<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升 - 无</li>\n<li>代码由上向下执行</li>\n<li>私有变量没有 n 变量 -&gt; 查找父级作用域 n &#x3D; 10 n++ &#x3D;&gt; n &#x3D; 11</li>\n<li>console.log(n) &#x3D;&gt; 11</li>\n</ul>\n</li>\n<li>返回 b &#x3D; BBBFFF111 引用赋值给 c 堆内存不得销毁</li>\n</ul>\n</li>\n<li>c() &#x3D;&gt; b() &#x3D;&gt; BBBFFF111() 创建私有作用<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升 - 无</li>\n<li>代码由上向下执行</li>\n<li>私有变量没有 n 变量 -&gt; 查找父级作用域 n &#x3D; 11 n++ &#x3D;&gt; n &#x3D; 12</li>\n<li>console.log(n) &#x3D;&gt; 12</li>\n</ul>\n</li>\n<li>console.log(n) &#x3D;&gt; 0</li>\n</ul>\n<p>经过以上的分析, 本例最终打印的结果为 11, 12, 0</p>\n<h2 id=\"推断以下代码执行的结果-2\"><a href=\"#推断以下代码执行的结果-2\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">11</span>, c = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    c = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升 var a, b, c; text &#x3D; AAAFFF111; a &#x3D; 10; b &#x3D; 11; c &#x3D; 12</li>\n<li>代码自上而下执行</li>\n<li>test(10) 创建私有作用域<ul>\n<li>形参赋值 a &#x3D; 10</li>\n<li>变量提升 var b</li>\n<li>代码自上而下执行</li>\n<li>a &#x3D; 1</li>\n<li>b &#x3D; 2</li>\n<li>c &#x3D; 3 &#x3D;&gt; 私有作用域中没有定义 c, 从全局作用域中找到 c 并赋值</li>\n</ul>\n</li>\n<li>console.log(a) &#x3D;&gt; 10</li>\n<li>console.log(b) &#x3D;&gt; 11</li>\n<li>console.log(c) &#x3D;&gt; 3<br>最终执行的结果为 10, 11, 3</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-3\"><a href=\"#推断以下代码执行的结果-3\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 输出 undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码考核的点有两个:</p>\n<ul>\n<li>变量提升, 不管条件是否满足都会提升</li>\n<li>非严格模式下, 在全局作用域创建的变量(使用 var)将会作为 window 的属性<ul>\n<li>编译阶段 var a; 提升到全局</li>\n<li>执行阶段 window.a &#x3D; undefined</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-4\"><a href=\"#推断以下代码执行的结果-4\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 形参赋值 a = 10</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    a = <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码考核的点为:<br>在非严格模式下, 函数的实参集合与形参变量存在 “映射” 关系, 不管其中一方谁改变了, 另外一个都会跟着改变.<br>严格模式下, 两者之间的映射关系会被切断, 相互之间不会影响</p>\n<p>所以以上代码执行的结果为 10, 10, 100, 1000</p>\n<h2 id=\"推断以下代码执行的结果-5\"><a href=\"#推断以下代码执行的结果-5\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\">x, y, a</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域 x = 1; y = 2, a = 3</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span> <span class=\"comment\">// 映射关系</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a = <span class=\"title function_\">b</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码考察的点为, 函数没有显式的返回值时默认的返回值是 undefined</p>\n<p>所以执行的结果为 3, 10, undefined</p>\n<h2 id=\"amp-amp-vs\"><a href=\"#amp-amp-vs\" class=\"headerlink\" title=\"&amp;&amp; vs ||\"></a>&amp;&amp; vs ||</h2><ul>\n<li>在条件判断中<ul>\n<li>&amp;&amp;: 一假必假</li>\n<li>||: 一真必真</li>\n</ul>\n</li>\n<li>在赋值操作中<ul>\n<li>A || B &#x3D;&gt; 如果 A 为真返回 A 的值, 否则返回 B 的值(无论真假)<ul>\n<li>1 || 2 &#x3D;&gt; 1</li>\n<li>0 ||  false &#x3D;&gt; false</li>\n</ul>\n</li>\n<li>A &amp;&amp; B &#x3D;&gt; 如果 A 为假返回 A 的值, 否则返回 B 的值<ul>\n<li>1 &amp;&amp; 2 &#x3D;&gt; 2</li>\n<li>0 &amp;&amp; false &#x3D;&gt; 0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>逻辑 &amp;&amp; 的优先级高于 ||<ul>\n<li>0 || 2 &amp;&amp; false || 3 &#x3D;&gt; 3<ul>\n<li>由于 &amp;&amp; 优先级高, 所以先执行了 2 &amp;&amp; false &#x3D;&gt; false</li>\n<li>0 || false || 3</li>\n<li>从左向右执行 0 || false &#x3D;&gt; false</li>\n<li>false || 3 &#x3D;&gt; 3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-6\"><a href=\"#推断以下代码执行的结果-6\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">~(<span class=\"keyword\">function</span>(<span class=\"params\">foo</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = foo || <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo)</span><br><span class=\"line\">&#125;)(foo)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码结果为 hello, hello, hello</p>\n<h2 id=\"推断以下代码执行的结果-7\"><a href=\"#推断以下代码执行的结果-7\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b + a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn</span>() <span class=\"comment\">// a = 0 f = function(b)...</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 1 打印 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fn</span>()(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 1 打印 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 2 打印 6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行逻辑如下:<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-08-00-09-06.png\" alt=\"2020-03-08-00-09-06\"></p>\n<p>综上, 打印的结果为 5, 5, 6, 2</p>\n<h2 id=\"推断以下代码执行的结果-8\"><a href=\"#推断以下代码执行的结果-8\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">ary</span>) &#123;</span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    ary = [<span class=\"number\">0</span>]</span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = <span class=\"title function_\">fn</span>(ary)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ary)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的流程为<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-08-10-24-04.png\" alt=\"2020-03-08-10-24-04\"></p>\n<p>对于引用类型的参数, 函数调用时会按引用传递. 也就是说函数内部可以修改全局同名你变量的实际内容. 尽管是以形参的方式传入的.</p>\n<h2 id=\"推断以下代码执行的结果-9\"><a href=\"#推断以下代码执行的结果-9\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n + (--i))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的流程为<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-08-10-29-46.png\" alt=\"2020-03-08-10-29-46\"></p>\n<p>当四则运算符遇到小括号, 小括号里边只有自增 &#x2F; 自减运算符时. 运算还是会按照预定的方式执行, 并不会限执行小括号里边的自增 &#x2F; 自减运算符…</p>\n<p>例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> + (--a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> + (a--) <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - (--a) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - (a--) <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> * (--a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> * (a--) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span> / (--a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span> / (a--) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"推断以下代码执行的结果-10\"><a href=\"#推断以下代码执行的结果-10\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>  <span class=\"comment\">// 60</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">num</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">obj.<span class=\"property\">fn</span> = (<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">num</span> = num * <span class=\"number\">3</span></span><br><span class=\"line\">    num++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">num</span> += n</span><br><span class=\"line\">        num++</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(obj.<span class=\"property\">num</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.<span class=\"property\">fn</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">obj.<span class=\"title function_\">fn</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num, obj.<span class=\"property\">num</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的流程为<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-08-10-51-53.png\" alt=\"2020-03-08-10-51-53\"></p>\n<p>所以, 以上代码执行的结果为 22, 23, 65, 30</p>\n<h2 id=\"推断以下代码执行的结果-11\"><a href=\"#推断以下代码执行的结果-11\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getX</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">    <span class=\"title function_\">getX</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getY</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">y</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">y</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">getX</span> === f2.<span class=\"property\">getX</span>)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">getY</span> === f2.<span class=\"property\">getY</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">__proto__</span>.<span class=\"property\">getY</span> === <span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getY</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">__proto__</span>.<span class=\"property\">getX</span> === f2.<span class=\"property\">getX</span>)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">getX</span> === <span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getX</span>)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f1.<span class=\"property\">constructor</span>) <span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>)  <span class=\"comment\">// Object</span></span><br><span class=\"line\">f1.<span class=\"title function_\">getX</span>() <span class=\"comment\">// this: f1 f1.x = 100</span></span><br><span class=\"line\">f1.<span class=\"property\">__proto__</span>.<span class=\"title function_\">getX</span>() <span class=\"comment\">// this: f1.__proto__(Fn.prototype) Fn.prototype.x = undefined</span></span><br><span class=\"line\">f2.<span class=\"title function_\">getY</span>() <span class=\"comment\">// this: f2 f2.y = 200</span></span><br><span class=\"line\"><span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">getY</span>() <span class=\"comment\">// this: Fn.prototype Fn.prototype.y = 400</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码执行的流程为:<br><img src=\"https://handle-note-img.niubishanshan.top/2020-03-08-11-07-03.png\" alt=\"2020-03-08-11-07-03\"></p>\n<p>最终打印的结果已经在注释中标记出来了~</p>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"内部属性[[class]]","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E5%86%85%E9%83%A8%E5%B1%9E%E6%80%A7%5B%5Bclass%5D%5D/","content":"<p>所有 typeof 返回值为 object 的对象, 都会包含一个内部属性[[class]]. 一般来说把它当成一个内部的分类. 这个分类的值无法直接访问, 需要通过 Object.prototype.toString() 来查看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([])</span><br><span class=\"line\"><span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"常见的 content-type 值","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E5%B8%B8%E8%A7%81%E7%9A%84%20content-type%20%E5%80%BC/","content":"<ol>\n<li>application&#x2F;x-www-form-urlencoded: form 表单默认格式, 数据被编码为键值对</li>\n<li>application&#x2F;json: restful 接口常用方案, 以序列化 json 的形式传递数据</li>\n<li>text&#x2F;xml: 以 xml 方式传递数据, 现在已经不常用了</li>\n<li>multipart&#x2F;form-data: 这个类型主要用于表单需要上传文件的时候, 因为文件需要以二进制的方式展示. 不设置这个类型无法上传文件</li>\n<li>application&#x2F;octet-stream: 用于响应头中, 表示未分类的二进制数据. 浏览器遇到这个响应头之后会直接下载文件. 还可以通过设置 Content-Disposition: attachment; filename&#x3D;fileName.ext 指定下载文件名</li>\n</ol>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"描述下 xhr 对象的几种状态","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E6%8F%8F%E8%BF%B0%E4%B8%8B%20xhr%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81/","content":"<table>\n<thead>\n<tr>\n<th>readyState</th>\n<th>对应的时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化, 也就是 new 完 XMLHttpRequest 之后的状态</td>\n</tr>\n<tr>\n<td>1</td>\n<td>启动, 调用 xhr 实例 open 方法后的状态</td>\n</tr>\n<tr>\n<td>2</td>\n<td>调用 xhr 实例 send 方法后请求已经完全发送, 服务端收到请求但是尚未解析</td>\n</tr>\n<tr>\n<td>3</td>\n<td>开始接收来自服务端的响应</td>\n</tr>\n<tr>\n<td>4</td>\n<td>完成, 接收服务端响应结束</td>\n</tr>\n</tbody></table>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"数字添加逗号","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E6%95%B0%E5%AD%97%E6%B7%BB%E5%8A%A0%E9%80%97%E5%8F%B7/","content":"<h2 id=\"原生\"><a href=\"#原生\" class=\"headerlink\" title=\"原生\"></a>原生</h2><p>直接使用数字的 <code>toLocaleString</code> 方法, 就可以实现数字每 3 位添加一个逗号了, 缺点是针对浮点数, 只保留小数点后三位数并进行了四舍五入.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thousands</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.<span class=\"title function_\">toLocaleString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串硬干\"><a href=\"#字符串硬干\" class=\"headerlink\" title=\"字符串硬干\"></a>字符串硬干</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">numToThousand</span> = num =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringNum = (num || <span class=\"number\">0</span>).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stringNum.<span class=\"property\">length</span> &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"string\">&#x27;,&#x27;</span> + stringNum.<span class=\"title function_\">slice</span>(-<span class=\"number\">3</span>) + result;</span><br><span class=\"line\">        stringNum = stringNum.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, stringNum.<span class=\"property\">length</span> - <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stringNum) &#123;</span><br><span class=\"line\">        result = stringNum + result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thousands</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> str = num.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> reg = str.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">            ? <span class=\"regexp\">/(\\d)(?=(\\d&#123;3&#125;)+\\.)/g</span></span><br><span class=\"line\">            : <span class=\"regexp\">/(\\d)(?=(?:\\d&#123;3&#125;)+$)/g</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(reg,<span class=\"string\">&quot;$1,&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串打散\"><a href=\"#字符串打散\" class=\"headerlink\" title=\"字符串打散\"></a>字符串打散</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thousands</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> splits=[],res=[];</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> splits = num.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\tsplits[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item,i</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; i!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>)+(splits.<span class=\"property\">length</span>&gt;<span class=\"number\">1</span> ? <span class=\"string\">&quot;.&quot;</span>+splits[<span class=\"number\">1</span>] : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"谈谈你对闭包的理解","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3/","content":"<h2 id=\"作用域的实现机制\"><a href=\"#作用域的实现机制\" class=\"headerlink\" title=\"作用域的实现机制\"></a>作用域的实现机制</h2><p>编程语言的基础能力就是能够定义变量并存储其值, 并且允许程序员对于变量的值进行访问和修改. 变量定义, 访问和修改的规则就是我们常说的作用域实现规则…</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;quanquan&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于该 js 语句, 在 js 引擎中包含两层意思</span></span><br><span class=\"line\"><span class=\"comment\">// var name</span></span><br><span class=\"line\"><span class=\"comment\">// name = &#x27;quanquan&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript 虽然不会提前编译, 但是并不是说它不会进行编译. 在浏览器下载 js 文件后会迅速对 js 文件进行编译处理. 并且在编译之后立即进入执行阶段.</p>\n<h3 id=\"编译阶段\"><a href=\"#编译阶段\" class=\"headerlink\" title=\"编译阶段\"></a>编译阶段</h3><p>编译器会遍历当前作用域内是否包含 name 变量, 如果包含的话则忽略 var name 这个申明, 如果没有则在当前作用域里新增一个 name.</p>\n<h3 id=\"执行阶段\"><a href=\"#执行阶段\" class=\"headerlink\" title=\"执行阶段\"></a>执行阶段</h3><p>js 执行引擎在执行代码的时候也会寻找当前作用域内是否存在 name 如果存在则直接赋值. 如果不存在则会从当前作用域”探出头去”看看外层作用域是否存在. 如果找到了全局作用域都没有找到 name 变量的定义. 在普通模式下就会在全局(window 属性)创建这个变量并赋值. 如果是在严格模式下则会抛出一个引用错误.</p>\n<p>从作用域中不断”伸出头去”的过程, 就是向”作用域链”中的下一级查找的过程.</p>\n<h3 id=\"作用域和作用域链\"><a href=\"#作用域和作用域链\" class=\"headerlink\" title=\"作用域和作用域链\"></a>作用域和作用域链</h3><ol>\n<li>全局作用域, 声明在任何函数之外的顶层作用域的变量就是全局变量. 其拥有全局作用域</li>\n<li>函数作用域, 在函数内部定义的变量, 只拥有函数体作为其作用域. 在全局作用域和其他函数作用域内都访问不到他们.</li>\n<li>块级作用域, 指的是 es6 中引入的新的变量声明关键词 let 和 const. 如果他们定义的变量被一组 {} 包裹起来的话, 那么这一组 {} 就限定了他们活动的范围. 实现了和函数作用域一样的效果, 外部无法访问到内部的变量. 由 {} 限定的区域就被称为”块级作用域”</li>\n<li>作用域链, 实际开发过程中, 函数作用域或者块级作用域内往往需要引用其外部的块级 or 函数作用域甚至全局作用域内的变量. 此作用域嵌套的现象就是作用域链.</li>\n</ol>\n<h2 id=\"闭包的定义\"><a href=\"#闭包的定义\" class=\"headerlink\" title=\"闭包的定义\"></a>闭包的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addABC</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addABC</span>()()) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码中, a, b, c 三个变量在 add 函数中使用, 但是既非函数作用域内定义的变量,  又非函数的参数. 而是函数作用域外部的变量, 这样的变量被称为 “自由变量”. 像 add 这样的引用了自由变量的函数就被称为闭包.</p>\n<p>当内部函数, 在定义它的作用域的外部被引用时. 就创建了该内部函数的闭包. 如果这个函数引用了定义他的外部函数的变量, 外部函数执行完毕后其定义的变量并不会被回收. 因为闭包需要他们.</p>\n<h2 id=\"闭包的使用\"><a href=\"#闭包的使用\" class=\"headerlink\" title=\"闭包的使用\"></a>闭包的使用</h2><h3 id=\"保护\"><a href=\"#保护\" class=\"headerlink\" title=\"保护\"></a>保护</h3><p>利用闭包可以为作用域内部的函数提供自由变量, 但是在外部就无法访问和修改这些变量. 起到了对自由变量的保护效果 —&gt; 模块模式实现的原理.</p>\n<h3 id=\"保存\"><a href=\"#保存\" class=\"headerlink\" title=\"保存\"></a>保存</h3><p>对于一些组件级的变量不适合放在全局上下文中. 通过闭包不会被回收的特性做到保存内部变量 —&gt; 三顾茅庐示例, 在实现柯里化 or 偏函数的过程中, 我们往往需要 “记住” 函数的一部分参数. 利用闭包可以提供自由变量的能力恰好可以完美实现 ~</p>\n<h4 id=\"柯里化和偏函数\"><a href=\"#柯里化和偏函数\" class=\"headerlink\" title=\"柯里化和偏函数\"></a>柯里化和偏函数</h4><ul>\n<li>柯里化, 是把接收多个参数的函数转化成多个接收单一参数(原始函数的第一个参数)的函数. 并且返回接收余下参数并且返回结果的新函数的过程. 通俗解释就是: 柯里化是只给函数传递一个参数并调用它, 并让他返回一个函数去处理剩下参数的过程.</li>\n<li>偏函数, 的作用就是. 把一个函数的某些参数固定住. 并返回一个新的函数, 使得后续调用这个函数更加简单的过程.</li>\n</ul>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"brew 安装应用免等待 Updating Homebrew...","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/brew-%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E5%85%8D%E7%AD%89%E5%BE%85-Updating-Homebrew/","content":"<h2 id=\"使用-control-c-取消本次操作\"><a href=\"#使用-control-c-取消本次操作\" class=\"headerlink\" title=\"使用 control + c 取消本次操作\"></a>使用 control + c 取消本次操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Updating Homebrew...</span><br></pre></td></tr></table></figure>\n\n<p>使用 brew 安装应用, 当命令行出现以上状态时, 按下组合键 <code>control + c</code>, 当命令行变成以下状态的时候, 说明已经成功取消了, 切记只能执行一次 <code>control + c</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Updating Homebrew...</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用掉每次安装前的更新\"><a href=\"#禁用掉每次安装前的更新\" class=\"headerlink\" title=\"禁用掉每次安装前的更新\"></a>禁用掉每次安装前的更新</h2><p>一次性方案, 命令行执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>长久方案, 把以下命令添加到 zshrc 配置文件中~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.zshrc</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>需要更新时, 使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</span><br><span class=\"line\">brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup ; say mission complete</span><br></pre></td></tr></table></figure>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"Mac 切换 zsh 和 bash","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/Mac%20%E5%88%87%E6%8D%A2%20zsh%20%E5%92%8C%20bash/","content":"<h2 id=\"zsh-gt-bash\"><a href=\"#zsh-gt-bash\" class=\"headerlink\" title=\"zsh -&gt; bash\"></a>zsh -&gt; bash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bash-gt-zsh\"><a href=\"#bash-gt-zsh\" class=\"headerlink\" title=\"bash -&gt; zsh\"></a>bash -&gt; zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PS-两种操作之后都需要重启终端才能生效\"><a href=\"#PS-两种操作之后都需要重启终端才能生效\" class=\"headerlink\" title=\"PS: 两种操作之后都需要重启终端才能生效\"></a>PS: 两种操作之后都需要重启终端才能生效</h2>","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"防抖和节流","url":"/%E9%9D%A2%E8%AF%95/JavaScript/%E9%9D%A2%E8%AF%95/JavaScript/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/","content":"<p>在诸多浏览器时间中, 有一类需要特殊处理. 那就是容易过度触发的事件. 例如: scroll, resize, mousemove… 为了防止这类事件的频繁触发. 我们就可以对事件处理函数进行防抖和节流的处理 ~</p>\n<span id=\"more\"></span>\n\n<h2 id=\"节流-throttle-第一个人说了算\"><a href=\"#节流-throttle-第一个人说了算\" class=\"headerlink\" title=\"节流 throttle - 第一个人说了算\"></a>节流 throttle - 第一个人说了算</h2><p>节流的核心是, 在某段时间内不管你触发了多少次事件. 我都只认第一次. 并在计时结束时给予响应.</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ol>\n<li>拖拽</li>\n<li>浏览器缩放</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"时间差版本\"><a href=\"#时间差版本\" class=\"headerlink\" title=\"时间差版本\"></a>时间差版本</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, timeout = <span class=\"number\">1e3</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - last &lt; timeout) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 直接使用外层的 this</span></span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">        last = now</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间差版本存在一个 bug, 如果最后一次调用正好在倒数第二次 now + timeout 时间断内. 就获取不到最后一次的状态的. 往往这里有坑. 于是就有了通过 setTimeout 驱动的版本</p>\n<h4 id=\"定时器版本\"><a href=\"#定时器版本\" class=\"headerlink\" title=\"定时器版本\"></a>定时器版本</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, timeout = <span class=\"number\">1e3</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 直接使用外层的 this</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防抖-debounce-最后一个人说了算\"><a href=\"#防抖-debounce-最后一个人说了算\" class=\"headerlink\" title=\"防抖 debounce - 最后一个人说了算\"></a>防抖 debounce - 最后一个人说了算</h2><p>某段时间内, 无论事件触发了多少次. 只有最后一次能够调用事件处理函数.</p>\n<h3 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ol>\n<li>按钮提交</li>\n<li>搜素框 sug</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, timeout</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前在定时区间内说明这段时间内有了新的最后一次删除定时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 认为当前为 &quot;最后&quot; 一次触发, 启动定时器</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["面试","JavaScript"],"tags":["面试"]},{"title":"github hosts 变快","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/github%20hosts%20%E5%8F%98%E5%BF%AB/","content":"<p>到这个 <a href=\"https://ipaddress.com/\">https://ipaddress.com/</a>, 分别搜索:</p>\n<ul>\n<li>github.global.ssl.fastly.net</li>\n<li>github.com</li>\n<li>assets-cdn.github.com</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>三个域名, 并复制搜索到的 ip 地址(ipv4)</p>\n<p>然后构造 hosts 文件内容</p>\n<p>xxx.xxx.xxx.xxx github.com</p>\n<p>xxx.xxx.xxx.xxx assets-cdn.github.com</p>\n<p>xxx.xxx.xxx.xxx github.global.ssl.fastly.net</p>\n<p>复制到 <code>/etc/hosts</code> 文件中</p>\n<p>最后, 刷新 dns 缓存 <code>sudo killall -HUP mDNSResponder;say DNS cache has been flushed</code></p>\n<p>亲测好使</p>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"一个命令同时提交 github 和 gitee","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%20github%20%E5%92%8C%20gitee/","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>回家以后没法科学上网了 <code>github</code> 访问巨慢, 非常影响拥抱开源社区的热情…</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><p><code>github</code> 被墙了怎么办, 怎么办…</p>\n<p>用码云</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>首先, 克隆项目</li>\n<li>其次, 修改项目根目录下的 <code>.git/config</code> 文件. 添加如下内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ............................................................</span><br><span class=\"line\"># .................... 其他配置  ..............................</span><br><span class=\"line\"># ............................................................</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\t# gitee</span><br><span class=\"line\">\turl = https://gitee.com/quanquandequan/learn-fe.git</span><br><span class=\"line\">\t# github</span><br><span class=\"line\">\turl = https://github.com/luoquanquan/learn-fe.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\"># ............................................................</span><br><span class=\"line\"># .................... 其他配置  ..............................</span><br><span class=\"line\"># ............................................................</span><br></pre></td></tr></table></figure>\n\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"patch-package","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/patch-package/","content":"<blockquote>\n<p>昨天着实被同事给上了一课. 事情是这样的, 项目中之前打包用到了老式打包工具 (相对编译时间很长那种), 于是就要把项目升级成编译速度更快的 esbuild. 特么的就我负责的模块出了问题…</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在我们的项目从 <code>gulp</code> 编译切换到 <code>esbuild</code> 的过程中, 其他同学负责的代码都是使用的非常常规的三方库. 而我的代码中用到了 <code>crypto</code>. 在 <code>gulp</code> 中可以使用 <code>browserify</code> 插件. 直接给把 <code>node</code> 模块给 shim 进来了. 但是 <code>esbuild</code> 负责处理 node 模块的 <code>@esbuild-plugins/node-modules-polyfill</code> 木有这个逻辑…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p>首先, 发现 <code>crypto</code> 缺失之后肯定是看病用药. 先观察 <code>@esbuild-plugins/node-modules-polyfill</code> 的源码 <a href=\"https://github.com/remorses/esbuild-plugins/tree/master/node-modules-polyfill/src\">github</a>, 说实话看到这种两个 years 没有动过的只有 203 star 的开源项目心里实在是打鼓. 顺手一个 star 当然是少不了的.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20220929145340.png\" alt=\"20220929145340\"></p>\n<p>下一步打开 <a href=\"https://github.com/remorses/esbuild-plugins/blob/master/node-modules-polyfill/src/polyfills.ts\">polyfills.ts</a> 源码发现原来这就是 <code>rollup-plugin-node-polyfills</code> 的套壳呀. 那不就好办了. 直接把 crypto 模块也放出来就完事儿. 而且官方也曾经规划过要干这个事儿的 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20220929150349.png\" alt=\"20220929150349\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>面对这种已经已经给出答案的题目, 我最喜欢了:</p>\n<ol>\n<li>clone 这个项目.</li>\n<li>本地硬改代码.</li>\n<li>引用包改成本地</li>\n<li>完事</li>\n</ol>\n<p>然后, 我的同事淡淡地说: 要不打个 patch 试试呢?</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20220929153204.png\" alt=\"20220929153204\"></p>\n<p>patch 又是什么鬼?</p>\n<p>网上搜了一把才发现, 打开了新世界.</p>\n<h3 id=\"方案一-用-patch-package-给-npm-包打补丁\"><a href=\"#方案一-用-patch-package-给-npm-包打补丁\" class=\"headerlink\" title=\"方案一: 用 patch-package 给 npm 包打补丁\"></a>方案一: 用 patch-package 给 npm 包打补丁</h3><h4 id=\"第一步-生成补丁文件\"><a href=\"#第一步-生成补丁文件\" class=\"headerlink\" title=\"第一步, 生成补丁文件\"></a>第一步, 生成补丁文件</h4><ul>\n<li>首先, 安装 patch-package <code>npm i patch-package -D</code></li>\n<li>修改 node_modules 里边的包内容并验证</li>\n<li>执行 <code>npx patch-package @esbuild-plugins/node-modules-polyfill</code> 生成补丁文件</li>\n</ul>\n<p>执行上述步骤之后就会生成 <code>patches/@esbuild-plugins+node-modules-polyfill+0.1.4.patch</code> 这个文件. 文件内容为:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">diff --git a/node_modules/@esbuild-plugins/node-modules-polyfill/dist/polyfills.js b/node_modules/@esbuild-plugins/node-modules-polyfill/dist/polyfills.js</span></span><br><span class=\"line\"><span class=\"comment\">index 4f4f953..6f6263e 100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/node_modules/@esbuild-plugins/node-modules-polyfill/dist/polyfills.js</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/node_modules/@esbuild-plugins/node-modules-polyfill/dist/polyfills.js</span></span><br><span class=\"line\"><span class=\"meta\">@@ -43,18 +43,18 @@</span> function builtinsPolyfills() &#123;</span><br><span class=\"line\">     libs.set(&#x27;repl&#x27;, EMPTY_PATH);</span><br><span class=\"line\">     libs.set(&#x27;tls&#x27;, EMPTY_PATH);</span><br><span class=\"line\">     libs.set(&#x27;fs&#x27;, EMPTY_PATH);</span><br><span class=\"line\"><span class=\"deletion\">-    libs.set(&#x27;crypto&#x27;, EMPTY_PATH);</span></span><br><span class=\"line\"><span class=\"addition\">+    // libs.set(&#x27;crypto&#x27;, EMPTY_PATH);</span></span><br><span class=\"line\">     // libs.set(</span><br><span class=\"line\">     //     &#x27;fs&#x27;,</span><br><span class=\"line\">     //     require.resolve(&#x27;rollup-plugin-node-polyfills/polyfills/browserify-fs&#x27;),</span><br><span class=\"line\">     // )</span><br><span class=\"line\">     // TODO enable crypto and fs https://github.com/ionic-team/rollup-plugin-node-polyfills/issues/20</span><br><span class=\"line\"><span class=\"deletion\">-    // libs.set(</span></span><br><span class=\"line\"><span class=\"deletion\">-    //     &#x27;crypto&#x27;,</span></span><br><span class=\"line\"><span class=\"deletion\">-    //     require.resolve(</span></span><br><span class=\"line\"><span class=\"deletion\">-    //         &#x27;rollup-plugin-node-polyfills/polyfills/crypto-browserify&#x27;,</span></span><br><span class=\"line\"><span class=\"deletion\">-    //     ),</span></span><br><span class=\"line\"><span class=\"deletion\">-    // )</span></span><br><span class=\"line\"><span class=\"addition\">+    libs.set(</span></span><br><span class=\"line\"><span class=\"addition\">+        &#x27;crypto&#x27;,</span></span><br><span class=\"line\"><span class=\"addition\">+        require.resolve(</span></span><br><span class=\"line\"><span class=\"addition\">+            &#x27;rollup-plugin-node-polyfills/polyfills/crypto-browserify&#x27;,</span></span><br><span class=\"line\"><span class=\"addition\">+        ),</span></span><br><span class=\"line\"><span class=\"addition\">+    )</span></span><br><span class=\"line\">     return libs;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> exports.builtinsPolyfills = builtinsPolyfills;</span><br></pre></td></tr></table></figure>\n\n<p>不难看出, <code>patch-package</code> 就是将你修改后的代码和修改前的代码做了一次 diff. 并依据此 diff 文件来确定你本次的修改. 然后就是想办法应用到我们的真实项目中了.</p>\n<h4 id=\"应用补丁文件\"><a href=\"#应用补丁文件\" class=\"headerlink\" title=\"应用补丁文件\"></a>应用补丁文件</h4><p>在 package.json 中添加 <code>npm-script</code> 即可在后续每次安装依赖后都调用 patch-package 实现补丁的替换</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖安装完成后执行 patch-package</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;postinstall&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;patch-package&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>移除项目中的 <code>node_modules</code> 目录, 重新 <code>npm i</code>, 查看 <code>node_modules/@esbuild-plugins/node-modules-polyfill/dist/polyfills.js</code> 文件就能发现文件内容如下, patch 成功 ~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Taken from https://github.com/ionic-team/rollup-plugin-node-polyfills/blob/master/src/modules.ts</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&quot;__esModule&quot;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">builtinsPolyfills</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">EMPTY_PATH</span> = <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;rollup-plugin-node-polyfills/polyfills/empty.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">builtinsPolyfills</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> libs = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ==========  其他代码  =====================================</span></span><br><span class=\"line\">    <span class=\"comment\">// ==========  ......  =====================================</span></span><br><span class=\"line\">    <span class=\"comment\">// ==========  其他代码  =====================================</span></span><br><span class=\"line\">    libs.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;fs&#x27;</span>, <span class=\"variable constant_\">EMPTY_PATH</span>);</span><br><span class=\"line\">    <span class=\"comment\">// libs.set(&#x27;crypto&#x27;, EMPTY_PATH);</span></span><br><span class=\"line\">    <span class=\"comment\">// libs.set(</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#x27;fs&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\">//     require.resolve(&#x27;rollup-plugin-node-polyfills/polyfills/browserify-fs&#x27;),</span></span><br><span class=\"line\">    <span class=\"comment\">// )</span></span><br><span class=\"line\">    <span class=\"comment\">// TODO enable crypto and fs https://github.com/ionic-team/rollup-plugin-node-polyfills/issues/20</span></span><br><span class=\"line\">    libs.<span class=\"title function_\">set</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;crypto&#x27;</span>,</span><br><span class=\"line\">        <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">            <span class=\"string\">&#x27;rollup-plugin-node-polyfills/polyfills/crypto-browserify&#x27;</span>,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> libs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">builtinsPolyfills</span> = builtinsPolyfills;</span><br></pre></td></tr></table></figure>\n\n<p>PS: 测试项目我上传到 <a href=\"\">github</a> 了…</p>\n<h3 id=\"方案二-三方包魔改\"><a href=\"#方案二-三方包魔改\" class=\"headerlink\" title=\"方案二: 三方包魔改\"></a>方案二: 三方包魔改</h3><h4 id=\"修改一个文件\"><a href=\"#修改一个文件\" class=\"headerlink\" title=\"修改一个文件\"></a>修改一个文件</h4><p>复制问题库的一个文件放到本地, 还是监听 <code>postinstall</code> 每次 <code>install</code> 完成后替换 node_modules 里的文件为本地文件</p>\n<h4 id=\"维护整个库\"><a href=\"#维护整个库\" class=\"headerlink\" title=\"维护整个库\"></a>维护整个库</h4><p>克隆这个项目下来, 修改代码后存放在自己的项目库中自己维护整个项目. 具体实现有两种方案</p>\n<h5 id=\"项目中维护\"><a href=\"#项目中维护\" class=\"headerlink\" title=\"项目中维护\"></a>项目中维护</h5><p>就是把自己修改的第三方包作为页面代码的一个目录, 跟随项目代码迭代</p>\n<h5 id=\"发布私包\"><a href=\"#发布私包\" class=\"headerlink\" title=\"发布私包\"></a>发布私包</h5><p>修改三方包的 bug 后改个名发布到 npm 或者 内部的 npm 镜像上</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>综合比较, 使用 patch 方案最为靠谱, 原因主要有:</p>\n<ol>\n<li>锁定了版本号, 如果三方包升级后 patch 脚本会报错. 用户有感知</li>\n<li>每次安装后会修改 node_modules 里的代码. 下个人想要打新的补丁直接继续修改自己本地的 node_modules 即会基于之前的补丁修改. 理论上不会有冲突</li>\n<li>占用空间最小, diff 文件和 git diff 一致. 修改了哪里一目了然.</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://juejin.cn/post/6962554654643191815\">手把手教你使用patch-package给npm包打补丁</a></li>\n<li><a href=\"https://github.com/ds300/patch-package\">https://github.com/ds300/patch-package</a></li>\n</ul>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"历史版本浏览器下载","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD/","content":"<h2 id=\"历史版本浏览器-用于-debug\"><a href=\"#历史版本浏览器-用于-debug\" class=\"headerlink\" title=\"历史版本浏览器, 用于 debug\"></a>历史版本浏览器, 用于 debug</h2><ul>\n<li><a href=\"https://www.chromedownloads.net/\">Chrome</a></li>\n<li><a href=\"http://ftp.mozilla.org/pub/firefox/releases/\">Fire Fox</a></li>\n</ul>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"同时配置 gitlab 和 github","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AE%20gitlab%20%E5%92%8C%20github/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><blockquote>\n<p>日常工作中, 公司内部项目通常是 git 来管理. 自己做的开源项目 Or 学习第三方的大佬开源的项目往往在 github 或者 coding 之类的平台上也由 git 来管理. 那么问题来了…</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class=\"line\">正克隆到 &#x27;handle-note&#x27;...</span><br><span class=\"line\">ssh: Could not resolve hostname github.com2: nodename nor servname provided, or not known</span><br><span class=\"line\">fatal: 无法读取远程仓库。</span><br><span class=\"line\"></span><br><span class=\"line\">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>\n\n<p>当要 <code>clone</code> GitHub 上的项目时会发现没有权限了. 面对这种情况有三种方案</p>\n<h2 id=\"直接下载\"><a href=\"#直接下载\" class=\"headerlink\" title=\"直接下载\"></a>直接下载</h2><ul>\n<li>点击 Clone or download 的绿色按钮</li>\n<li>在弹出的下拉框中点击右下角 <code>Download Zip</code> 下载代码库的安装包</li>\n</ul>\n<p>使用此方案下载的代码包解压后不包含 <code>.git</code> 项目配置目录无法跟踪项目并提交</p>\n<h2 id=\"使用-https-方案\"><a href=\"#使用-https-方案\" class=\"headerlink\" title=\"使用 https 方案\"></a>使用 https 方案</h2><ul>\n<li>点击 Clone or download 的绿色按钮</li>\n<li>在弹出的下拉框中点击左上角 Use HTTPS 输入框中的链接变成了以 https 开头</li>\n<li>执行以下命令<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/luoquanquan/handle-note.git</span><br></pre></td></tr></table></figure></li>\n<li>展示的结果如下<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">正克隆到 &#x27;handle-note&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 220, done.</span><br><span class=\"line\">remote: Counting objects: 100% (220/220), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (154/154), done.</span><br><span class=\"line\">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class=\"line\">接收对象中: 100% (220/220), 593.36 KiB | 70.00 KiB/s, 完成.</span><br><span class=\"line\">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure></li>\n<li>完成</li>\n</ul>\n<p>使用以上方法克隆的项目可以正常跟踪和提交</p>\n<h2 id=\"创建配置文件支持-ssh-方式\"><a href=\"#创建配置文件支持-ssh-方式\" class=\"headerlink\" title=\"创建配置文件支持 ssh 方式\"></a>创建配置文件支持 ssh 方式</h2><ul>\n<li>打开命令行, 执行 <code>sh $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li>\n<li><code>Enter file in which to save the key</code> 在这一步的时候切记创建一个新的 key 名字, 否则会覆盖掉当前正在用的秘钥文件; 示例: <code>/Users/quanquanluo/.ssh/id_github_rsa</code></li>\n<li>一路回车…</li>\n<li>完成后进入用户的秘钥目录 Mac: <code>~/.ssh</code> Windows: <code>C:/Users/quanquan/.ssh</code> 此时该目录下文件列表<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">id_github_rsa.pub id_rsa.pub id_github_rsa</span><br><span class=\"line\">id_rsa            known_hosts</span><br></pre></td></tr></table></figure>\n包含了公司 git 的配置文件和 github 项目的配置文件</li>\n<li>把生成文件 id_github_rsa.pub 中的内容粘贴到这里 <a href=\"https://github.com/settings/ssh/new\">https://github.com/settings/ssh/new</a> 在登录的 github 的前提下</li>\n<li>最后, 在当前目录创建 config 文件, 并粘贴一下内容<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host 我的公司</span><br><span class=\"line\">    HostName baidu.gitlab.com</span><br><span class=\"line\">    IdentityFile &quot;~/.ssh/id_rsa&quot;</span><br><span class=\"line\">Host GitHub</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    IdentityFile &quot;~/.ssh/id_github_rsa&quot;</span><br></pre></td></tr></table></figure></li>\n<li>验证:<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class=\"line\">正克隆到 &#x27;handle-note&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 220, done.</span><br><span class=\"line\">remote: Counting objects: 100% (220/220), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (154/154), done.</span><br><span class=\"line\">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class=\"line\">接收对象中: 100% (220/220), 593.36 KiB | 84.00 KiB/s, 完成.</span><br><span class=\"line\">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"https-和-ssh-的区别\"><a href=\"#https-和-ssh-的区别\" class=\"headerlink\" title=\"https 和 ssh 的区别\"></a>https 和 ssh 的区别</h2><h3 id=\"clone-项目\"><a href=\"#clone-项目\" class=\"headerlink\" title=\"clone 项目\"></a>clone 项目</h3><p>使用 ssh 方式 clone 项目, 你必须是该项目的拥有者或者管理者. 并且已经成功配置了 ssh key, 然而使用 http 方式 clone 项目没有这个限制, 你可以随意克隆 github 上的项目</p>\n<h3 id=\"push-项目\"><a href=\"#push-项目\" class=\"headerlink\" title=\"push 项目\"></a>push 项目</h3><p>使用 ssh 方式 push 代码时, 你不需要验证用户名和密码. 但是如果你再创建 <code>ssh key</code> 时设置了密码就需要验证配对密码了. 而对于使用 https 的用户每次 push 代码的时候需要验证用户名和密码(首次推送可以选择缓存)</p>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"唤端方案","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%94%A4%E7%AB%AF%E6%96%B9%E6%A1%88/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>关于网页唤起端能力的问题, 我想到了美团的大佬王兴的一个博客 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-07-19-11-56-00.png\" alt=\"2021-07-19-11-56-00\"></p>\n<span id=\"more\"></span>\n\n<p>由于当时在创新部门, 团队时不时就要搞一个新的 App, 遍观当时项目中关于唤端的逻辑代码, 要么只兼容安卓. 要么只兼容苹果. 明明安卓的 QQ 下可以打开, 可到了苹果的 QQ 就点不动了…</p>\n<p>鉴于这种情况, 我就尝试要不写个库. 以后的代码全部 <code>npm i</code> 一把梭就可以去划水美滋滋 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-07-19-14-30-20.png\" alt=\"2021-07-19-14-30-20\"></p>\n<h2 id=\"各类唤端方案简介\"><a href=\"#各类唤端方案简介\" class=\"headerlink\" title=\"各类唤端方案简介\"></a>各类唤端方案简介</h2><p>经过了一系列的调研工作, 我们了解到目前还没有一种可以实现跨所有终端所有 app 的唤端方案. 根据不同的终端和 app 的限制, 目前常用的方案有以下几种:</p>\n<ul>\n<li>弹出蒙层提示用户下载打开 app</li>\n<li>location + Scheme Url</li>\n<li>a 标签 + Scheme Url</li>\n<li>微信开放标签 (微信 &gt;&#x3D; 7.0.12)</li>\n<li>universal link (iOS &gt;&#x3D; 9; iOS 微信 &gt;&#x3D; 7.0.7 放开限制)</li>\n</ul>\n<h3 id=\"弹出引导下载的弹窗\"><a href=\"#弹出引导下载的弹窗\" class=\"headerlink\" title=\"弹出引导下载的弹窗\"></a>弹出引导下载的弹窗</h3><p>解决问题最直接的方法往往是简单的. 所以最初的方案就是弹个蒙层提示用户去 app 打开.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-07-13-16-01-29.png\" alt=\"2021-07-13-16-01-29\"></p>\n<p>优点:</p>\n<ul>\n<li>简单易行</li>\n<li>快发体验好</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>转化率低</li>\n<li>用户体验不好</li>\n</ul>\n<h3 id=\"location-Scheme-Url\"><a href=\"#location-Scheme-Url\" class=\"headerlink\" title=\"location + Scheme Url\"></a>location + Scheme Url</h3><p>从<a href=\"https://www.jianshu.com/p/fdc00c4fbb83\">这篇文章</a>中, 我学习到了 location + Scheme Url 的唤端方案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">button.<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    location.<span class=\"property\">href</span> = <span class=\"string\">&#x27;imv://tab/feed&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/scheme.gif\" alt=\"scheme\"></p>\n<p>看到这个效果之后大大的松了一口气, 难怪没有大佬写过相关的库. 这么简单的一行代码, 写出来简直贻笑大方. 那么 <code>git push</code> 上线, 直到测试体验同学找过来:</p>\n<p>A: 圈圈, 我在苹果手机 QQ 里点开分享页打不开 app 呀<br>B: 圈圈, 我在微信里点开分享页打不开 app 呀<br>C: 圈圈, 我在微博里点开分享页打不开 app 呀<br>D: 圈圈, 我在 Kim 里点开分享页打不开 app 呀, WTF<br>….</p>\n<p>经测试, <code>location + Scheme Url</code> 唤端方案在目前只有在我的 Safari 浏览器上好使.</p>\n<h3 id=\"a-标签-Scheme-Url\"><a href=\"#a-标签-Scheme-Url\" class=\"headerlink\" title=\"a 标签 + Scheme Url\"></a>a 标签 + Scheme Url</h3><p>由于我们的产品的主要用户是年轻的朋友, 所以 QQ 的问题就显得很棘手. 于是, 在组里前端老鸟 @伟哥 的提示把 iOS QQ 环境下的唤端方案改成了 A 标签唤端的伪代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">a.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">a.<span class=\"property\">href</span> = <span class=\"string\">&#x27;imv://tab/feed&#x27;</span></span><br><span class=\"line\">a.<span class=\"title function_\">click</span>()</span><br></pre></td></tr></table></figure>\n\n<p>修改后苹果手机 QQ 上的效果如下, 唤端成功</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/tagA.gif\" alt=\"tagA\"></p>\n<p>经过上述两种方案, 我们实现了安卓 iOS 双端的系统浏览器和 QQ 上唤起 App 的能力. 但是面对 app 界的顶流微信还是无计可施.</p>\n<h3 id=\"微信开放标签\"><a href=\"#微信开放标签\" class=\"headerlink\" title=\"微信开放标签\"></a>微信开放标签</h3><p>好在找到了<a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#22\">微信开放标签</a>的文档. 微信在 7.0.12 版本加入了微信开放标签. <strong>认证的服务号</strong> 可以通过在网页中添加微信开放标签实现唤端操作.</p>\n<h3 id=\"universal-link\"><a href=\"#universal-link\" class=\"headerlink\" title=\"universal link\"></a>universal link</h3><p><code>universal link</code> 是 ios 9 推出的一种方案, 可以方便用户以访问一个链接的形式唤起 App, 这种唤端的方案体验就像是 App 端内切换页面用户无感知. 微信在其 &gt;&#x3D; 7.0.7 版本放开了对其的限制.</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/fdc00c4fbb83\">h5唤起app技术deeplink方案总结</a></li>\n<li><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#22\">微信开放标签</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW1\">Support Universal Links</a></li>\n</ul>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"常用工具","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/","content":"<blockquote>\n<p>这里列举了我常用的效率工具, 免去了每次用的时候都需要百度一下的环节…</p>\n</blockquote>\n<h2 id=\"常用链接类-web-工具\"><a href=\"#常用链接类-web-工具\" class=\"headerlink\" title=\"常用链接类(web 工具)\"></a>常用链接类(web 工具)</h2><ul>\n<li><a href=\"http://autoprefixer.github.io/\">Autoprefixer CSS online</a></li>\n<li><a href=\"http://webchart.ihuhai.cn/index.html\">时序图</a></li>\n<li>js 压缩混淆代码智能恢复工具<a href=\"http://jsnice.org/\">jsnice</a></li>\n<li>代码美化, 生成图片 <a href=\"https://carbon.now.sh/\">carbon</a></li>\n<li>代码生成图片 <a href=\"https://codeimg.io/\">codeimg</a></li>\n<li>ip 查询工具 <a href=\"https://www.ipip.net/ip.html\">ip</a></li>\n<li>通过 ip 反查域名工具 <a href=\"https://tools.ipip.net/ipdomain.php\">ipip</a></li>\n<li>笔记工具<a href=\"https://mubu.com/\">幕布</a>可生成思维导图</li>\n<li><a href=\"https://www.yunpanjingling.com/\">云盘精灵</a></li>\n</ul>\n<h2 id=\"常用-npm-包\"><a href=\"#常用-npm-包\" class=\"headerlink\" title=\"常用 npm 包\"></a>常用 npm 包</h2><ul>\n<li>npm 代码包离线版 <a href=\"https://unpkg.com/\">unpkg</a></li>\n<li>自动生成 changelog <a href=\"https://www.npmjs.com/package/conventional-changelog\">conventional-changelog</a></li>\n<li>fs 增强工具 <a href=\"https://www.npmjs.com/package/fs-extra\">fs-extra</a></li>\n<li>压缩工具 <a href=\"https://www.npmjs.com/package/compression\">compression</a></li>\n</ul>\n<h2 id=\"那些带我飞的博客\"><a href=\"#那些带我飞的博客\" class=\"headerlink\" title=\"那些带我飞的博客\"></a>那些带我飞的博客</h2><ul>\n<li><a href=\"https://juejin.im/post/59097cd7a22b9d0065fb61d2\">手摸手，带你用 vue 撸后台</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\">冴羽的博客</a></li>\n<li><a href=\"https://github.com/justjavac/the-front-end-knowledge-you-may-not-know\">你可能不知道的前端知识点</a></li>\n</ul>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"解决国内 vscode 下载慢问题","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7/%E8%A7%A3%E5%86%B3%20vscode%20%E5%9B%BD%E5%86%85%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<h2 id=\"首先点击官网的下载链接\"><a href=\"#首先点击官网的下载链接\" class=\"headerlink\" title=\"首先点击官网的下载链接\"></a>首先点击官网的下载链接</h2><p>到下载内容页面, 就能看到下载 vscode 的任务<br><img src=\"https://handle-note-img.niubishanshan.top/2021-05-28-18-52-51.png\" alt=\"2021-05-28-18-52-51\"></p>\n<h2 id=\"替换域名\"><a href=\"#替换域名\" class=\"headerlink\" title=\"替换域名\"></a>替换域名</h2><p>把之前步骤中下载任务的域名切换成 <code>vscode.cdn.azure.cn</code>, 替换后的链接如下</p>\n<p><a href=\"https://vscode.cdn.azure.cn/stable/054a9295330880ed74ceaedda236253b4f39a335/VSCode-darwin-universal.zip\">https://vscode.cdn.azure.cn/stable/054a9295330880ed74ceaedda236253b4f39a335/VSCode-darwin-universal.zip</a></p>\n<p>然后在下载, 基本上可以秒下</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/112215618\">国内下载vscode速度慢问题解决</a></li>\n</ul>\n","categories":["开发笔记","工具"],"tags":["开发笔记"]},{"title":"9 种方式实现数组去重","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/9%20%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/","content":"<blockquote>\n<p>业务需求跟的太久了, 回首技术真的落后好多. 即将而立之年, 重拾基础. 不知该感到荣幸还是有点酸楚</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"方法一-两层循环-通过标记判断是否更新结果数组\"><a href=\"#方法一-两层循环-通过标记判断是否更新结果数组\" class=\"headerlink\" title=\"方法一, 两层循环, 通过标记判断是否更新结果数组\"></a>方法一, 两层循环, 通过标记判断是否更新结果数组</h2><ul>\n<li>定义 ret &#x3D; [] 用于存放结果数组</li>\n<li>定义 repeat 变量作为当前元素是否存在的标记值, 并默认赋值为 false</li>\n<li>外层循环, 遍历原数组中的每一个元素, 遍历前先把 repeat 置为 false 假设当前元素没有未在结果数组中出现</li>\n<li>内层循环, 遍历当前的结果数组. 如果当前的结果数组中已经包含了外层循环中遍历的元素, 标记 repeat 为 ture</li>\n<li>判断 repeat 的值, 如果当前元素没有存在于结果数组中, 则向结果数组中添加当前值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/57d583c49d8d6119976659fe3bf9f456a899a706\">地址</a></p>\n<p>通过 github 上的评论可以看到当前提交的代码有 bug, 修改的代码为<a href=\"https://github.com/luoquanquan/learn-fe/commit/8a0fc3ae271c2f703d21f2ac281d961dfbeea1c7\">地址</a></p>\n<h2 id=\"方法二-先给数组排序-在逐个比较\"><a href=\"#方法二-先给数组排序-在逐个比较\" class=\"headerlink\" title=\"方法二, 先给数组排序, 在逐个比较\"></a>方法二, 先给数组排序, 在逐个比较</h2><ul>\n<li>定义 ret &#x3D; [] 用于存放结果数组</li>\n<li>备份原数组并对备份的数组进行排序</li>\n<li>启动循环, 一次对比当前元素和结果数组中的最后一个元素, 相等则跳过, 不相等加入结果数组</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/c69aabd43dc0dc0166f1d7cbbaba17579acb89b2\">地址</a></p>\n<h2 id=\"方法三-利用对象的属性不能重复的特性\"><a href=\"#方法三-利用对象的属性不能重复的特性\" class=\"headerlink\" title=\"方法三, 利用对象的属性不能重复的特性\"></a>方法三, 利用对象的属性不能重复的特性</h2><ul>\n<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>\n<li>创建结果数组</li>\n<li>遍历原数组, 把各个值当做对象的 key 存入对象, 如果对象的 key 出现重复值后边的会直接覆盖掉前边的</li>\n<li>遍历对象, 并把所有的 key 作为元素 push 到结果数组中</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/1f04c7391ca27c7c1ac6d9a0f09551cf19925614\">地址</a></p>\n<h2 id=\"方法四-还是利用对象的属性不能重复的特性\"><a href=\"#方法四-还是利用对象的属性不能重复的特性\" class=\"headerlink\" title=\"方法四, 还是利用对象的属性不能重复的特性\"></a>方法四, 还是利用对象的属性不能重复的特性</h2><ul>\n<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>\n<li>创建结果数组</li>\n<li>遍历原数组, 判断对象是否已经存在当前 item 为 key 的成员, 如果有说明之前的遍历中出现过该值-跳过, 如果没有对象中添加对应的属性同时给结果数组中添加相应的值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/0f50bab95474fadf6d828c90f70c7bc0fa5f5764\">地址</a></p>\n<h2 id=\"方法五-找到一个元素看他的后边还有没有和他一样的元素\"><a href=\"#方法五-找到一个元素看他的后边还有没有和他一样的元素\" class=\"headerlink\" title=\"方法五, 找到一个元素看他的后边还有没有和他一样的元素\"></a>方法五, 找到一个元素看他的后边还有没有和他一样的元素</h2><ul>\n<li>备份原数组, 并作为结果数组</li>\n<li>遍历备份的数组</li>\n<li>取出当前的元素</li>\n<li>遍历当前元素到数组的结尾, 如果有和当前元素相等的元素则 splice 掉</li>\n<li>len– 因为删除了一个元素故数组的长度减一</li>\n<li>j– 因为和当前元素相等的后位元素已经被删除, 之后的元素迁移, 所以需要 j– 修正内部遍历的索引值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/43539818cea6c0e91bd6ed2b340dab491f8be2d0\">地址</a></p>\n<h2 id=\"方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归\"><a href=\"#方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归\" class=\"headerlink\" title=\"方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归\"></a>方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归</h2><p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/3378001ce9424d10a0cb4df318b4d723f0502080\">地址</a></p>\n<h2 id=\"方法七-遍历数组-看前方有没有和当前值相等的值\"><a href=\"#方法七-遍历数组-看前方有没有和当前值相等的值\" class=\"headerlink\" title=\"方法七, 遍历数组, 看前方有没有和当前值相等的值\"></a>方法七, 遍历数组, 看前方有没有和当前值相等的值</h2><ul>\n<li>定义 ret &#x3D; [] 用于存放结果数组</li>\n<li>遍历原数组, 取出当前项, 如果当前项的前方存在相等的项跳过, 否则说明这是当前项最后一次在数组中出现将其加入到结果数组</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/8e9f384f9adf391ad8afc71c46096dd80d8df335\">地址</a></p>\n<h2 id=\"方法八-使用-reduce-原理同方法一\"><a href=\"#方法八-使用-reduce-原理同方法一\" class=\"headerlink\" title=\"方法八, 使用 reduce 原理同方法一\"></a>方法八, 使用 reduce 原理同方法一</h2><p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/4b314b641eeaa0da4ae0ccf6ba1bbfff96bf4852\">地址</a></p>\n<h2 id=\"方法九-利用-Set-值不能重复的特性实现数组的去重\"><a href=\"#方法九-利用-Set-值不能重复的特性实现数组的去重\" class=\"headerlink\" title=\"方法九, 利用 Set 值不能重复的特性实现数组的去重\"></a>方法九, 利用 Set 值不能重复的特性实现数组的去重</h2><p>过于简单, 不再赘述</p>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/29526d14c6e7a27315b6d4bdb1cc457f9144cf2c\">地址</a></p>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"字符串中的 substring 和 substr 方法","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/substr-vs-substring/","content":"<h2 id=\"substring-方法\"><a href=\"#substring-方法\" class=\"headerlink\" title=\"substring 方法\"></a>substring 方法</h2><p><code>substring</code> 方法用于截取某个字符串位于起始位置到终点位置中间的字符, <code>substring(start[, end])</code>. 其中 <code>start</code> 指的是截取子串的起始下标, <code>end</code> 指的是截取子串的结束下标.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;012345&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>))  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>))     <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>))  <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>))  <span class=\"comment\">// &#x27;01&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substring</span>(-<span class=\"number\">5</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// &#x27;01&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过示例可知:</p>\n<ul>\n<li><code>substring</code> 的效果是包前不包后的截取</li>\n<li>当忽略第二个参数的时候, 默认从第一个位置截取到字符串的末尾位置.</li>\n<li>当两个参数相等的时候, 会截取一个空的字符串</li>\n<li>当第二个参数小于第一个参数的时候, 会交换两个参数的位置</li>\n<li>当参数中存在负数的时候会先将负数转为 0</li>\n</ul>\n<h2 id=\"substr-方法\"><a href=\"#substr-方法\" class=\"headerlink\" title=\"substr 方法\"></a>substr 方法</h2><p><code>substr</code> 方法用于截取字符串从指定位置开始的指定长度的字符, <code>substr(start[, length])</code>. 其中 <code>start</code> 指的是截取子串的起始下标, <code>length</code> 指的是截取子串的长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;012345&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>))  <span class=\"comment\">// 1234</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>))     <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>))  <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, -<span class=\"number\">1</span>)) <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">substr</span>(-<span class=\"number\">2</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// &#x27;45&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过示例可知:</p>\n<ul>\n<li>没有传入 <code>length</code> 属性的时候会截取整个字符串</li>\n<li>当 <code>length</code> 属性传 0 或者负数的时候会截取空字符串</li>\n<li>如果 <code>start</code> 参数传负数, 认为从字符串末尾开始倒数</li>\n</ul>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"Cookie","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/cookie/","content":"<h2 id=\"添加一条-cookie\"><a href=\"#添加一条-cookie\" class=\"headerlink\" title=\"添加一条 cookie\"></a>添加一条 cookie</h2><h3 id=\"简单粗暴的方法\"><a href=\"#简单粗暴的方法\" class=\"headerlink\" title=\"简单粗暴的方法\"></a>简单粗暴的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>=<span class=\"string\">&quot;key=quanquan&quot;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"文艺一点的方法\"><a href=\"#文艺一点的方法\" class=\"headerlink\" title=\"文艺一点的方法\"></a>文艺一点的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setCookie</span>(<span class=\"params\">key, value, expiresHours</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = key + <span class=\"string\">&quot;=&quot;</span> + value</span><br><span class=\"line\">    <span class=\"comment\">//判断是否设置过期时间, 0代表关闭浏览器时失效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiresHours &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + expiresHours * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">        cookie = cookie + <span class=\"string\">&quot;; expires=&quot;</span> + date.<span class=\"title function_\">toGMTString</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除指定的-cookie\"><a href=\"#删除指定的-cookie\" class=\"headerlink\" title=\"删除指定的 cookie\"></a>删除指定的 cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deleteCookie</span> (key)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() - <span class=\"number\">1</span>) <span class=\"comment\">// 过去的时间</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = key + <span class=\"string\">&quot;=value; expires=&quot;</span> + date.<span class=\"title function_\">toGMTString</span>() <span class=\"comment\">// 此时这条记录就已经是过期的啦</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新指定的-cookie\"><a href=\"#更新指定的-cookie\" class=\"headerlink\" title=\"更新指定的 cookie\"></a>更新指定的 cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">modify</span>(<span class=\"params\">key, value, expiresHours</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = key + <span class=\"string\">&quot;=&quot;</span> + value</span><br><span class=\"line\">    <span class=\"comment\">//判断是否设置过期时间,0代表关闭浏览器时失效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiresHours &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + expiresHours * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>) <span class=\"comment\">// 设置失效时间, 单位为小时</span></span><br><span class=\"line\">        cookie = cookie + <span class=\"string\">&quot;; expires=&quot;</span> + date.<span class=\"title function_\">toGMTString</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取指定的-cookie-的值\"><a href=\"#获取指定的-cookie-的值\" class=\"headerlink\" title=\"获取指定的 cookie 的值\"></a>获取指定的 cookie 的值</h2><h3 id=\"把-cookie-转化成一个对象获取对象的值\"><a href=\"#把-cookie-转化成一个对象获取对象的值\" class=\"headerlink\" title=\"把 cookie 转化成一个对象获取对象的值\"></a>把 cookie 转化成一个对象获取对象的值</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCookie</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieMap = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cookie.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        c = cookie.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;; &#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; c.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            cookieMap[c[i].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">trim</span>()] = c[i].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieMap[key] || <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切断-cookie-遍历数组找到同名-key-直接返回\"><a href=\"#切断-cookie-遍历数组找到同名-key-直接返回\" class=\"headerlink\" title=\"切断 cookie 遍历数组找到同名 key 直接返回\"></a>切断 cookie 遍历数组找到同名 key 直接返回</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCookie</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieArr = cookie.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cookieArr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = cookieArr[i].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.<span class=\"title function_\">trim</span>())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生猛的使用字符串截取\"><a href=\"#生猛的使用字符串截取\" class=\"headerlink\" title=\"生猛的使用字符串截取\"></a>生猛的使用字符串截取</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCookie</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> search = key + <span class=\"string\">&quot;=&quot;</span> <span class=\"comment\">//查询检索的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> start = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">indexOf</span>(search);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            start += search.<span class=\"property\">length</span>;</span><br><span class=\"line\">            end = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;;&quot;</span>, start);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end == -<span class=\"number\">1</span>) end = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">            returnValue = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">substring</span>(start, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCookie</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;(^| )&quot;</span> + key + <span class=\"string\">&quot;=([^;]*)(;|$)&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">match</span>(reg))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCookie</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieMap = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([^=; ]*)=([^; ]*)/g</span></span><br><span class=\"line\">    cookie.<span class=\"title function_\">replace</span>(reg, <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [, k, v] = args</span><br><span class=\"line\">        cookieMap[k] = v</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieMap[key] || <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"package.json 中库的版本号符号","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/package.json%20%E4%B8%AD%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AC%A6%E5%8F%B7/","content":"<blockquote>\n<p>package.json 的依赖库版本号前大多有一个 ^ ~ 这两者有什么区别呢</p>\n</blockquote>\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><ul>\n<li>波浪符号(~): 当依赖的<strong>修订号</strong>发生升级后, 使用 <code>npm i</code> 会自动升级最新版本</li>\n<li>插入符号(^): 当依赖的<strong>次版本号</strong>发生升级后, 使用 <code>npm i</code> 会自动升级最新版本</li>\n</ul>\n<p>以上两者均不会更新 <code>package.json</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"原理及使用步骤\"><a href=\"#原理及使用步骤\" class=\"headerlink\" title=\"原理及使用步骤\"></a>原理及使用步骤</h2><p>使用 <code>npm i gulp@4.0.0 hexo@4.1.0</code> 之后修改 <code>package.json</code> 文件如下:</p>\n<p>PS: 修改的原因是当前利用 <code>npm</code> 安装的模块默认使用的是 <code>^</code> 修饰符</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;gulp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~4.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hexo&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码中, <code>gulp</code> 版本符号使用了 <code>~</code> 而 <code>hexo</code> 的版本符号使用了 <code>^</code>. 根据概念, 如果存在 <code>gulp</code> 的修订号更新或者 <code>hexo</code> 的次版本号更新. 通过 <code>npm i</code> 安装依赖时应该都会更新…</p>\n<p>然而, 执行后结果如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;gulp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~4.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hexo&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>看上去似乎没有什么改变, 执行 <code>npm list</code> 会得到以下结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├─┬ gulp@4.0.0</span><br><span class=\"line\">│ ├─ 似乎有那么一点点的失败</span><br><span class=\"line\">└─┬ hexo@4.1.0</span><br><span class=\"line\">  ├── 其他各种依赖包的版本</span><br></pre></td></tr></table></figure>\n\n<p>他还真没有什么改变…</p>\n<p>经过查阅各种资料我发现</p>\n<p>之所以出现以上的情况是因为, 项目中存在了 <code>package-lock.json</code> 文件. 删除该文件后再次 <code>npm i</code></p>\n<p>再看 <code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;gulp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hexo&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>卧槽, 卧槽槽槽… 还是没有变化呀, 然后执行 <code>npm list</code> 会得到以下结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">├─┬ gulp@4.0.2</span><br><span class=\"line\">│ ├─┬ 实际的版本号是更更新了的</span><br><span class=\"line\">└─┬ hexo@4.2.0</span><br><span class=\"line\">  ├── 还有各种依赖的信息</span><br><span class=\"line\">  ├── ......</span><br></pre></td></tr></table></figure>\n\n<p>可以看出, 虽然 <code>package.json</code> 里边记录的内容没有变化, 但是实际下载到的版本是升级以后的版本, 这个可谓是天坑, 刚刚在公司项目里边踩到…</p>\n<h2 id=\"其他常用的版本号修饰符\"><a href=\"#其他常用的版本号修饰符\" class=\"headerlink\" title=\"其他常用的版本号修饰符\"></a>其他常用的版本号修饰符</h2><ul>\n<li>* &#x3D;&#x3D;&#x3D; “” 代表任意版本的版本号</li>\n<li>&gt; 必须大于版本号</li>\n<li>&gt;&#x3D; 大于或等于版本号</li>\n<li>&lt; 必须小于版本号</li>\n<li>&lt;&#x3D; 小于或等于版本号</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://semver.org/lang/zh-CN/\">语义化版本 2.0.0</a></li>\n<li><a href=\"https://blog.csdn.net/u011584949/article/details/80447862\">node 版本控制 package.json</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json\">What’s the difference between tilde(~) and caret(^) in package.json?</a></li>\n</ul>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"parseInt vs Math.floor","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/parseInt-vs-Math-floor/","content":"<blockquote>\n<p>parseInt 和 Math.floor 都可以实现取整, 但是处理的方式存在差别</p>\n</blockquote>\n<h2 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt\"></a>parseInt</h2><p>parseInt(string, radix) 将一个字符串 string 转换为 radix 进制的整数, radix 为介于 2 - 36 之间的整数, 如果 radix 传入的是 0, 会以默认值 10 处理.</p>\n<p>其中</p>\n<p>string: 是要被解析的字符串, 如果传入的值不是一个字符串则会将其转化成字符串(toString 方法), 字符串开头结尾的空白字符会被忽略</p>\n<p>radix: 一个介于 2 - 36 的整数, 表示的是上述字符串的基数. 默认值是 10, 如果传入的 radix 小于 2 或者大于 36 则返回 NaN</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>可以处理数字(调用数字的 toString 方法将其转化成字符串)<ul>\n<li>parseInt(1.1) -&gt; 1</li>\n<li>parseInt(1.9) -&gt; 1</li>\n<li>parseInt(0.9) -&gt; 0</li>\n<li>parseInt(-1.9) -&gt; -1</li>\n</ul>\n</li>\n<li>可以处理 <font color=\"red\">数字开头的字符串</font><ul>\n<li>parseInt(‘-1’) -&gt; -1</li>\n<li>parseInt(‘10px’) -&gt; 10</li>\n<li>…</li>\n</ul>\n</li>\n<li>可以把 2 - 36 进制的数转为 10 进制<ul>\n<li>parseInt(11, 2) -&gt; 3</li>\n<li>parseInt(11, 8) -&gt; 9</li>\n<li>parseInt(11, 10) -&gt; 11</li>\n<li>parseInt(11, 16) -&gt; 17</li>\n<li>parseInt(11, 36) -&gt; 37</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Math-floor\"><a href=\"#Math-floor\" class=\"headerlink\" title=\"Math.floor\"></a>Math.floor</h2><p>Math.floor(x) &#x3D;&#x3D;&#x3D;  向下取整, 返回小于或者等于给定数字的最大整数</p>\n<p>其中 x 是需要解析的数字</p>\n<ul>\n<li>Math.floor(1.2) -&gt; 1</li>\n<li>Math.floor(1.9) -&gt; 1</li>\n<li><font color=\"red\">Math.floor(-1.2) -&gt; -2</font> 真正的向下取整</li>\n<li>Math.floor(‘1.9’) -&gt; 1 也可以处理字符串(不建议用)</li>\n</ul>\n<h2 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat\"></a>parseFloat</h2><p>parseFloat(x) 函数可解析一个字符串, 并返回一个浮点数</p>\n<p>其中 x 是需要解析的字符串</p>\n<p>parseFloat 将它的字符串参数解析成为浮点数并返回. 如果在解析过程中遇到了正负号 (+ 或 -) 数字 (0-9) 小数点, 或者科学记数法中的指数 (e 或 E) 以外的字符, 则它会忽略该字符以及之后的所有字符, 返回当前已经解析到的浮点数. 同时参数字符串首位的空白符会被忽略</p>\n<p>PS: 如果字符串的第一个字符不能被转换为数字, 那么 parseFloat() 会返回 NaN.</p>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"常见的 html 坑","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%B8%B8%E8%A7%81%E7%9A%84%20js%20%E5%9D%91/","content":"<h2 id=\"不要用-js-进行小数计算\"><a href=\"#不要用-js-进行小数计算\" class=\"headerlink\" title=\"不要用 js 进行小数计算\"></a>不要用 js 进行小数计算</h2><p>在以前的认识中, 小数的计算确实不好用. 但是可以通过乘以 10 的整数倍, 转成整数之后再进行整数计算 <code>16.666 * 1e3 =&gt; 16666</code>. 直到有一天 <code>16.368 * 1e3 =&gt; 16367.999999999998</code>, 卧槽, 卧槽, 卧槽…</p>\n<p>鉴于此, 对于用户输入的小数点后三位有值的 input 可以先用字符串处理 <code>&#39;16.368&#39;.split(&#39;.&#39;)</code> 然后转化成 <code>16 * 1e3 + 368</code> 来避免因精度误差可能带来的坑 ~</p>\n<p>当然, 时至今日. 我们可以使用 <a href=\"https://www.npmjs.com/package/bignumber.js\">bignumber.js</a> 来处理数字计算, 可以避免小数精度丢失和大数超出范围的问题</p>\n<h2 id=\"数据统计相关小-Tips\"><a href=\"#数据统计相关小-Tips\" class=\"headerlink\" title=\"数据统计相关小 Tips\"></a>数据统计相关小 Tips</h2><ul>\n<li>凡是计算平均值, 百分比的运算, 都要考虑所有项都是 0 的情况, 因为 0 &#x2F; 0 &#x3D; NaN</li>\n<li>遇到需要全局唯一的变量时, 用一个自增变量比费劲搞随机字符串时间戳之类的东西靠谱方便</li>\n<li>始终返回值都是布尔值的函数, 函数名称推荐用 is 开头, ex: isSameColor</li>\n</ul>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"生成随机数","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/JavaScript/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><p><code>Math.ceil(n)</code> 向上取整, 返回大于等于 n 的整数</p>\n</li>\n<li><p><code>Math.floor(n)</code> 向下取整, 返回 n 的整数部分</p>\n</li>\n<li><p><code>parseInt(n)</code> 向下取整, 返回 n 的整数部分</p>\n</li>\n<li><p><code>Math.round(n)</code> 四舍五入取整, 返回 n 四舍五入后的整数</p>\n</li>\n<li><p><code>Math.random(n)</code> 生成 [0, 1) 的随机数</p>\n</li>\n<li><p><code>Math.ceil(Math.random()*10)</code> 均衡获取 [1, 10] 之间的随机整数</p>\n<details>\n  <summary>代码示例详情</summary>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomNum = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[randomNum]) &#123;</span><br><span class=\"line\">    ret[randomNum]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[randomNum] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">table</span>(ret)</span><br></pre></td></tr></table></figure>\n<p>  上述代码运行的结果如下:</p>\n<p>  node 中:</p>\n  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬───────────┐</span><br><span class=\"line\">│ (index) │  Values   │</span><br><span class=\"line\">├─────────┼───────────┤</span><br><span class=\"line\">│    1    │ 100004455 │</span><br><span class=\"line\">│    2    │ 99992092  │</span><br><span class=\"line\">│    3    │ 99995733  │</span><br><span class=\"line\">│    4    │ 99989966  │</span><br><span class=\"line\">│    5    │ 100006012 │</span><br><span class=\"line\">│    6    │ 100004826 │</span><br><span class=\"line\">│    7    │ 99999108  │</span><br><span class=\"line\">│    8    │ 99994649  │</span><br><span class=\"line\">│    9    │ 100004694 │</span><br><span class=\"line\">│   10    │ 100008465 │</span><br><span class=\"line\">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>\n\n<p>  浏览器中:</p>\n  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">1: 100002116</span><br><span class=\"line\">2: 99998960</span><br><span class=\"line\">3: 100010656</span><br><span class=\"line\">4: 99996773</span><br><span class=\"line\">5: 100005989</span><br><span class=\"line\">6: 99999774</span><br><span class=\"line\">7: 99997476</span><br><span class=\"line\">8: 100003979</span><br><span class=\"line\">9: 99989204</span><br><span class=\"line\">10: 99995073</span><br></pre></td></tr></table></figure>\n</details>\n</li>\n<li><p><code>Math.floor(Math.random()*10)</code> 均衡获取 [0, 9] 的随机整数</p>\n<details>\n  <summary>代码示例详情</summary>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomNum = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[randomNum]) &#123;</span><br><span class=\"line\">    ret[randomNum]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[randomNum] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">table</span>(ret)</span><br></pre></td></tr></table></figure>\n<p>  上述代码运行的结果如下:</p>\n<p>  node 中:</p>\n  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬───────────┐</span><br><span class=\"line\">│ (index) │  Values   │</span><br><span class=\"line\">├─────────┼───────────┤</span><br><span class=\"line\">│    0    │ 100015160 │</span><br><span class=\"line\">│    1    │ 100006201 │</span><br><span class=\"line\">│    2    │ 99989259  │</span><br><span class=\"line\">│    3    │ 99988278  │</span><br><span class=\"line\">│    4    │ 100005566 │</span><br><span class=\"line\">│    5    │ 100001095 │</span><br><span class=\"line\">│    6    │ 100003096 │</span><br><span class=\"line\">│    7    │ 99981274  │</span><br><span class=\"line\">│    8    │ 100007022 │</span><br><span class=\"line\">│    9    │ 100003049 │</span><br><span class=\"line\">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>\n\n<p>  浏览器中:</p>\n  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">0: 100006310</span><br><span class=\"line\">1: 100000609</span><br><span class=\"line\">2: 100001411</span><br><span class=\"line\">3: 99998525</span><br><span class=\"line\">4: 99991009</span><br><span class=\"line\">5: 100001548</span><br><span class=\"line\">6: 100004093</span><br><span class=\"line\">7: 99989084</span><br><span class=\"line\">8: 100013441</span><br><span class=\"line\">9: 99993970</span><br></pre></td></tr></table></figure>\n</details></li>\n<li><p><code>Math.round(Math.random())</code> 均衡比例获取 0 或者 1</p>\n</li>\n<li><p><code>Math.round(Math.random()*10)</code> 获取 [0, 10]的随机整数, 其中获取 0 和 10的几率为获取其他值的一半.</p>\n<details>\n  <summary>详细原因, 概率一目了然</summary><br>\n\n<table>\n<thead>\n<tr>\n<th>随机值范围</th>\n<th>得到的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[0, 0.5)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>[0.5, 1.5)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1.5, 2.5)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[2.5, 3.5)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>[3.5, 4.5)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>[4.5, 5.5)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>[5.5, 6.5)</td>\n<td>6</td>\n</tr>\n<tr>\n<td>[6.5, 7.5)</td>\n<td>7</td>\n</tr>\n<tr>\n<td>[7.5, 8.5)</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[8.5, 9.5)</td>\n<td>9</td>\n</tr>\n<tr>\n<td>[9.5, 10)</td>\n<td>10</td>\n</tr>\n</tbody></table>\n</details></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"生成一个-min-max-的随机整数\"><a href=\"#生成一个-min-max-的随机整数\" class=\"headerlink\" title=\"生成一个 [min, max] 的随机整数\"></a>生成一个 [min, max] 的随机整数</h2><ul>\n<li>生成随机数坑定要用到 <code>Math.random() -&gt; [0, 1)</code></li>\n<li>可以把一个数变成整数的方法有: <code>parseInt() Math.floor() Math.round() Math.ceil()</code></li>\n<li>这里选择功能强劲(<a href=\"https://luoquanquan.github.io/note/2020/02/04/basic-js/parseInt-vs-Math-floor\">为什么这么说呢</a>)的 parseInt 直接截取数字的整数部分向下取整</li>\n<li>那么不难得到 <code>parseInt(Math.random() * 10) -&gt; [0, 9]</code></li>\n<li>所以, 如果我们想要得到一个 [0, max] 的随机数只需要 <code>parseInt(Math.random() * (max + 1))</code></li>\n<li>想要得到一个 [1, max] 的随机数只需要 <code>parseInt(Math.random() * (max - 1 + 1)) + 1</code></li>\n<li>进而可得出, 想要得到一个 [min, max] 的随机数. 把括号里的 -1 和括号外的 +1 等量代换成 min <code>parseInt(Math.random() * (max - min + 1)) + min</code></li>\n</ul>\n<p>最终可以得出, 生成一个 [min, max] 的随机整数的代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min = <span class=\"number\">0</span>, max = min</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max === min) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (min + <span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>) + min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成一个-min-max-的长度为-len-的随机整数数组\"><a href=\"#生成一个-min-max-的长度为-len-的随机整数数组\" class=\"headerlink\" title=\"生成一个 [min, max] 的长度为 len 的随机整数数组\"></a>生成一个 [min, max] 的长度为 len 的随机整数数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min = <span class=\"number\">0</span>, max = min</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max === min) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (min + <span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>) + min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomArr</span> = (<span class=\"params\">len, min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    ret[i] = <span class=\"title function_\">randomNum</span>(min, max)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成两个数之间的随机数-范围数字\"><a href=\"#生成两个数之间的随机数-范围数字\" class=\"headerlink\" title=\"生成两个数之间的随机数(范围数字)\"></a>生成两个数之间的随机数(范围数字)</h2><h3 id=\"四种情况\"><a href=\"#四种情况\" class=\"headerlink\" title=\"四种情况\"></a>四种情况</h3><h4 id=\"min-max\"><a href=\"#min-max\" class=\"headerlink\" title=\"[min, max]\"></a>[min, max]</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(random * range)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬────────┐</span><br><span class=\"line\">│ (index) │ Values │</span><br><span class=\"line\">├─────────┼────────┤</span><br><span class=\"line\">│    0    │  487   │</span><br><span class=\"line\">│    1    │  989   │</span><br><span class=\"line\">│    2    │  1007  │</span><br><span class=\"line\">│    3    │  1009  │</span><br><span class=\"line\">│    4    │  1029  │</span><br><span class=\"line\">│    5    │  967   │</span><br><span class=\"line\">│    6    │  994   │</span><br><span class=\"line\">│    7    │  1004  │</span><br><span class=\"line\">│    8    │  980   │</span><br><span class=\"line\">│    9    │  1044  │</span><br><span class=\"line\">│   10    │  490   │</span><br><span class=\"line\">└─────────┴────────┘</span><br></pre></td></tr></table></figure></p>\n<p>  通过扩大 min max 的范围并掐头去尾, 解决最大最小值概率为一半的问题<br>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;min 不能小于 1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  min = min - <span class=\"number\">1</span></span><br><span class=\"line\">  max = max + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(random * range)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([min, max].<span class=\"title function_\">includes</span>(num)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">randomNum</span>(min + <span class=\"number\">1</span>, max - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  修改后运行结果:<br>  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    1    │ 998826  │ &#x27;9.99%&#x27;  │</span><br><span class=\"line\">│    2    │ 1000556 │ &#x27;10.01%&#x27; │</span><br><span class=\"line\">│    3    │ 999015  │ &#x27;9.99%&#x27;  │</span><br><span class=\"line\">│    4    │ 997972  │ &#x27;9.98%&#x27;  │</span><br><span class=\"line\">│    5    │ 1000372 │ &#x27;10.00%&#x27; │</span><br><span class=\"line\">│    6    │ 1000381 │ &#x27;10.00%&#x27; │</span><br><span class=\"line\">│    7    │ 1000665 │ &#x27;10.01%&#x27; │</span><br><span class=\"line\">│    8    │ 1001230 │ &#x27;10.01%&#x27; │</span><br><span class=\"line\">│    9    │ 1001341 │ &#x27;10.01%&#x27; │</span><br><span class=\"line\">│   10    │ 999642  │ &#x27;10.00%&#x27; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-1\"><a href=\"#min-max-1\" class=\"headerlink\" title=\"[min, max)\"></a>[min, max)</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(random * range)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    1    │ 1110540 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    2    │ 1109941 │ &#x27;11.10%&#x27; │</span><br><span class=\"line\">│    3    │ 1111700 │ &#x27;11.12%&#x27; │</span><br><span class=\"line\">│    4    │ 1110570 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    5    │ 1111081 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    6    │ 1112978 │ &#x27;11.13%&#x27; │</span><br><span class=\"line\">│    7    │ 1112090 │ &#x27;11.12%&#x27; │</span><br><span class=\"line\">│    8    │ 1111245 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    9    │ 1109855 │ &#x27;11.10%&#x27; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-2\"><a href=\"#min-max-2\" class=\"headerlink\" title=\"(min, max]\"></a>(min, max]</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 四舍五入存在最小值和最大值出现的概率是中间值一半的误差, 正好给他均匀过去了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(range * random) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(random * range);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    2    │ 1109886 │ &#x27;11.10%&#x27; │</span><br><span class=\"line\">│    3    │ 1110669 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    4    │ 1113279 │ &#x27;11.13%&#x27; │</span><br><span class=\"line\">│    5    │ 1111945 │ &#x27;11.12%&#x27; │</span><br><span class=\"line\">│    6    │ 1110154 │ &#x27;11.10%&#x27; │</span><br><span class=\"line\">│    7    │ 1111446 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    8    │ 1111335 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│    9    │ 1111244 │ &#x27;11.11%&#x27; │</span><br><span class=\"line\">│   10    │ 1110042 │ &#x27;11.10%&#x27; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-3\"><a href=\"#min-max-3\" class=\"headerlink\" title=\"(min, max)\"></a>(min, max)</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(random * range);</span><br><span class=\"line\">  <span class=\"comment\">// 命中最大值和最小值时直接忽略</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([min, max].<span class=\"title function_\">includes</span>(num)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">randomNum</span>(min, max)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  执行结果:<br>  <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    2    │ 1249708 │ &#x27;12.50%&#x27; │</span><br><span class=\"line\">│    3    │ 1248357 │ &#x27;12.48%&#x27; │</span><br><span class=\"line\">│    4    │ 1248988 │ &#x27;12.49%&#x27; │</span><br><span class=\"line\">│    5    │ 1251120 │ &#x27;12.51%&#x27; │</span><br><span class=\"line\">│    6    │ 1250390 │ &#x27;12.50%&#x27; │</span><br><span class=\"line\">│    7    │ 1252465 │ &#x27;12.52%&#x27; │</span><br><span class=\"line\">│    8    │ 1248322 │ &#x27;12.48%&#x27; │</span><br><span class=\"line\">│    9    │ 1250650 │ &#x27;12.51%&#x27; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PS-本系列代码的测试用例\"><a href=\"#PS-本系列代码的测试用例\" class=\"headerlink\" title=\"PS 本系列代码的测试用例\"></a>PS 本系列代码的测试用例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomNum</span> = (<span class=\"params\">min, max</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">    <span class=\"keyword\">const</span> random = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(random * range)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e7</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"title function_\">randomNum</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[random]) &#123;</span><br><span class=\"line\">    ret[random]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[random] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ret = ret.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> [i, <span class=\"string\">`<span class=\"subst\">$&#123;(i / <span class=\"number\">1e7</span> * <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>)&#125;</span>%`</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">table</span>(ret)</span><br></pre></td></tr></table></figure>\n","categories":["开发笔记","JavaScript"],"tags":["开发笔记"]},{"title":"React中的setState执行机制","url":"/%E9%9D%A2%E8%AF%95/React/%E9%9D%A2%E8%AF%95/React/React%E4%B8%AD%E7%9A%84setState%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/","content":"<h2 id=\"state-含义\"><a href=\"#state-含义\" class=\"headerlink\" title=\"state 含义\"></a>state 含义</h2><p>控制组件展示形态的数据主要为数据状态和外部参数, 组件的数据结构指的就是 state. 组件作为一个状态机. 会把自身可控的信息存储到 state 中. 并通过 setState 改变 ~</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;quanquan&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;this.state.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeName.bind(this)&#125;</span>&gt;</span>changeName<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">changeName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;luoxiaoluo&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同步-or-异步\"><a href=\"#同步-or-异步\" class=\"headerlink\" title=\"同步 or 异步\"></a>同步 or 异步</h2><p>使用 setState 更新数据的时候有两种更新模式, 同步 &#x2F; 异步</p>\n<ul>\n<li>异步更新</li>\n<li>同步更新</li>\n</ul>\n<h3 id=\"同步更新\"><a href=\"#同步更新\" class=\"headerlink\" title=\"同步更新\"></a>同步更新</h3><p>当 setState 写到 setTimeout 或者原生事件中的时候 state 会同步更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改写上述 changeName 方法</span></span><br><span class=\"line\"><span class=\"title function_\">changeName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 写在 setTimeout 中会同步修改</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;luoxiaoluo&#x27;</span>&#125;)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">name</span>) <span class=\"comment\">// luoxiaoluo</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> btnEle = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;button&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原生事件中的 setState 也会同步更新</span></span><br><span class=\"line\">    btnEle.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;luoxiaoluo&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">name</span>) <span class=\"comment\">// luoxiaoluo</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步更新\"><a href=\"#异步更新\" class=\"headerlink\" title=\"异步更新\"></a>异步更新</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">changeName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;luoxiaoluo&#x27;</span>&#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只有在回调函数中获取的状态才是最新设置的状态</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">name</span>) <span class=\"comment\">// luoxiaoluo</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接在 setState 之后获取的还是之前的状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">name</span>) <span class=\"comment\">// quanquan</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>组件生命周期或者 React 合成事件中, setState 是异步的</li>\n<li>setTimeout 或者原生 dom 事件中, setState 是同步的</li>\n</ul>\n<h2 id=\"批量更新\"><a href=\"#批量更新\" class=\"headerlink\" title=\"批量更新\"></a>批量更新</h2><p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设初始状态为 &#123;count: 1&#125;</span></span><br><span class=\"line\"><span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    三次打印的结果均为 1</span></span><br><span class=\"line\"><span class=\"comment\">    1. 首先 React 事件系统中 setState 是异步执行的</span></span><br><span class=\"line\"><span class=\"comment\">    2. 其次, 上述代码的执行模型如下代码所示, React 会对传入的 Object 进行一次合并</span></span><br><span class=\"line\"><span class=\"comment\">    批处理, 批处理过程中后续的状态会覆盖前边的, 所以最后的效果是 state.count == 2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(</span><br><span class=\"line\">    prevState,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>&#125;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如果想要每一次 setState 都基于最新的状态, 可以给 setState 传入一个函数. Object.assign 没法时间函数参数的合并. 自然不会覆盖了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改成这种函数的写法就不会存在被</span></span><br><span class=\"line\"><span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">&#123;count&#125;</span>) =&gt;</span> (&#123;<span class=\"attr\">count</span>: count + <span class=\"number\">1</span>&#125;))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">&#123;count&#125;</span>) =&gt;</span> (&#123;<span class=\"attr\">count</span>: count + <span class=\"number\">1</span>&#125;))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">&#123;count&#125;</span>) =&gt;</span> (&#123;<span class=\"attr\">count</span>: count + <span class=\"number\">1</span>&#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["面试","React"],"tags":["面试"]},{"title":"生命周期函数","url":"/%E9%9D%A2%E8%AF%95/React/%E9%9D%A2%E8%AF%95/React/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/","content":"<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>创建阶段</li>\n<li>更新阶段</li>\n<li>卸载阶段</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"对应的-life-hook\"><a href=\"#对应的-life-hook\" class=\"headerlink\" title=\"对应的 life hook\"></a>对应的 life hook</h2><h3 id=\"创建阶段\"><a href=\"#创建阶段\" class=\"headerlink\" title=\"创建阶段\"></a>创建阶段</h3><ul>\n<li>constructor: 创建组件实例调用</li>\n<li>static getDerivedStateFromProps: 静态方法, 故不能访问到组件的实例. 运行时机为 props || state 变化的时候. 第一个参数为即将更新的 props 第二个参数为上一次的 state 可以在此 hook 中对比两者来判断确定是否需要更新. 如果需要更新则返回一个新的对象作为新的状态. 否则返回 null 表示本次 props 变化不影响当前组件. 无需更新</li>\n<li>render: 类组件中必须定义的方法, 用于渲染 DOM 结构.</li>\n<li>componentDidMount: 组件挂载到真实 DOM 之后执行, 主要用于 DOM 元素的获取和操作</li>\n</ul>\n<h3 id=\"更新阶段\"><a href=\"#更新阶段\" class=\"headerlink\" title=\"更新阶段\"></a>更新阶段</h3><ul>\n<li>getDerivedStateFromProps: 和创建阶段逻辑一致</li>\n<li>shouldComponentUpdate: 顾名思义, 就是判断当前组件是否需要更新. 通过返回 true or false 告知 react</li>\n<li>render: 同创建阶段</li>\n<li>getSnapshotBeforeUpdate: 该生命周期函数在 render 之后 DOM 更新之前执行. 该方法返回一个 Snapshot 值, 该值将作为 componentDidUpdate 第三个参数: 例如滚动位置, 列表更新后依然滚动到合适的状态</li>\n<li>componentDidUpdate: 组件更新后触发, DOM 也修改完成. 此时可以获取前一次的 props 和 state. 也可以安全的获取和修改最新的 DOM</li>\n</ul>\n<h3 id=\"卸载阶段\"><a href=\"#卸载阶段\" class=\"headerlink\" title=\"卸载阶段\"></a>卸载阶段</h3><ul>\n<li>componentWillUnmount: 组件卸载前执行主要用于清理副作用. 例如发布订阅, ajax 请求等等…</li>\n</ul>\n<h2 id=\"16-4-前后的生命周期函数变更\"><a href=\"#16-4-前后的生命周期函数变更\" class=\"headerlink\" title=\"16.4 前后的生命周期函数变更\"></a>16.4 前后的生命周期函数变更</h2><p>16.4 的生命周期函数</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-18-18-25-04.png\" alt=\"2021-12-18-18-25-04\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-19-18-59-12.png\" alt=\"2021-12-19-18-59-12\"></p>\n<p>vs 之前的版本</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-18-18-25-45.png\" alt=\"2021-12-18-18-25-45\"></p>\n<p>可以看出, 在 react 16.4 版本中删除了三个 will 类型的生命周期函数</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>同时新增了两个生命周期函数</p>\n<ul>\n<li>getDerivedStateFromProps</li>\n<li>getSnapshotBeforeUpdate</li>\n</ul>\n","categories":["面试","React"],"tags":["面试"]},{"title":"super() vs super(props)","url":"/%E9%9D%A2%E8%AF%95/React/%E9%9D%A2%E8%AF%95/React/super()%20vs%20super(props)/","content":"<h2 id=\"super-的作用\"><a href=\"#super-的作用\" class=\"headerlink\" title=\"super 的作用\"></a>super 的作用</h2><p>首先写一个基于 es5 prototype 的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Human</span> (name, age) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Human</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">walking</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">walking</span> ()&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i can walking ~&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> human = <span class=\"keyword\">new</span> <span class=\"title class_\">Human</span>()</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Coder</span> (name, age, job) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果想要实现 Coder 继承 Human 的实例成员, 就需要在当前实例的</span></span><br><span class=\"line\">    <span class=\"comment\">// this 上调用一下父类的构造方法</span></span><br><span class=\"line\">    human.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age, job)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承父类的原型方法直接将子类的原型指向父类实例即可</span></span><br><span class=\"line\"><span class=\"title class_\">Coder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = human</span><br><span class=\"line\"><span class=\"comment\">// 修正子类原型中绑定的构造函数</span></span><br><span class=\"line\"><span class=\"title class_\">Coder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Coder</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> quanquan = <span class=\"keyword\">new</span> <span class=\"title class_\">Coder</span>(<span class=\"string\">&#x27;quanquan&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;fe&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(quanquan.<span class=\"property\">name</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(quanquan.<span class=\"property\">job</span>)</span><br><span class=\"line\">quanquan.<span class=\"title function_\">walking</span>()</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>在 es5 的继承中, 我们不难发现: 继承父类的原型方法的时候直接修改子类原型即可, 但是想要继承父类的实例成员时候就需要在子类构造函数中调用父类的构造函数(每个人走路都一样, 但是肯定名字和年纪不能是一样的). 在 es6 中 constructor 其实就是 es5 中构造函数的语法糖. 那么肯定也需要调用一下父类构造函数实现继承实例成员…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">walking</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i can walking ~&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Coder</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Human</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, job</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> quanquan = <span class=\"keyword\">new</span> <span class=\"title class_\">Coder</span>(<span class=\"string\">&#x27;quanquan&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;fe&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(quanquan.<span class=\"property\">name</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(quanquan.<span class=\"property\">job</span>)</span><br><span class=\"line\">quanquan.<span class=\"title function_\">walking</span>()</span><br></pre></td></tr></table></figure>\n\n<p>通过以上代码可以一目了然, super 其实就是 <code>human.__proto__.constructor.call(this, name, age, job)</code> 这个环节. 如果没有这一步, 父类的实例成员就不会挂载到子类上边来了. 根据 es6 规范, 想要在构造函数中使用 this 也必须先调用 super</p>\n<h2 id=\"类组件的实现\"><a href=\"#类组件的实现\" class=\"headerlink\" title=\"类组件的实现\"></a>类组件的实现</h2><p>在 React 里的类组件其实也是基于 es6 的语法的. 所有的组件都继承自 React.Component. 所以只要用到 constructor 的组件中必须调用 super. 在 react 内部初始化的伪代码为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">YourComponent</span>(props);</span><br><span class=\"line\">instance.<span class=\"property\">props</span> = props;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说即使你调用 super 的时候没有传 props, react 也会在组件创建完成之后强行给你挂上. 那么问题就来了, react 强行挂载的时机是组件创建完成后. 如果在组件创建的过程中想要获取 <code>this.props</code> 该怎么办呢?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果 super(props)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>) <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以直接在子组件的构造函数中拿到 this.props 对象了</p>\n<h2 id=\"综上所述\"><a href=\"#综上所述\" class=\"headerlink\" title=\"综上所述\"></a>综上所述</h2><ol>\n<li>React 组件是基于 ES6 语法实现时, constructor 必须使用 super 这是 es6 规定</li>\n<li>如果调用 super 没有传入 props react 也会强行挂载到实例上, 但是如果想要在构造函数中使用 this.props 就必须在 super 中传入了</li>\n</ol>\n","categories":["面试","React"],"tags":["面试"]},{"title":"Vue 中计算属性和 method 的区别","url":"/%E9%9D%A2%E8%AF%95/Vue/%E9%9D%A2%E8%AF%95/Vue/Vue%20%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%20method%20%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<p>计算属性是数据层到视图层的数据转化映射, 会基于其所依赖的属性进行缓存. 只有在相关依赖变化时才会重新求值. 如果依赖没有变化每次访问计算属性都会立即返回之前计算的结果, 不再执行 get 函数. Method 则不同, 每次调用都会执行. 具体区别如下:</p>\n<ol>\n<li>computed 是响应式的 method 不具备响应式能力</li>\n<li>调用方式不一样, computed 可以想访问vue 实例的成员一样调用, method 只能执行函数调用</li>\n<li>computed 可以指定以一个函数作为只读属性, 也可以定义 get&#x2F;set 变成可读写属性. 这个是 method 做不到的</li>\n<li>computed 不能执行异步的逻辑, 当 computed 中包含异步逻辑时会导致取值无效</li>\n</ol>\n","categories":["面试","Vue"],"tags":["面试"]},{"title":"loader vs plugin","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/loader%20vs%20plugin/","content":"<h2 id=\"作用不同\"><a href=\"#作用不同\" class=\"headerlink\" title=\"作用不同\"></a>作用不同</h2><p>loader 直译为加载器, webpack 将一切文件视为模块, 但是其原生只能解析 js 文件, 如果想要打包其他文件的话就需要用到 loader 进行一次转化. Loader 赋予了 webpack 解析非 js 文件的能力. plugin 直译为插件, 其可以拓展 webpack 的功能, 让 webpack 具备更多的灵活性. 在 webpack 运行的生命周期中会广播出很多事件. Plugin 可以监听这些事件. 在合适的时机通过 webpack 提供的 api 改变输出的结果</p>\n<span id=\"more\"></span>\n\n<h2 id=\"用法不同\"><a href=\"#用法不同\" class=\"headerlink\" title=\"用法不同\"></a>用法不同</h2><p>loader 在 module#rules 中配置, 也就是说作为模块的解析规则存在. 类型为数组, 每一项都是一个 Object, 里边除了配置类型匹配规则还指定了 loader 以及 loader 的 options. Plugin 在 plugins 中单独配置. 类型为一个数组每一项都是一个 plugin 实例, 参数由构造函数传入</p>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"vue 双向数据绑定实现的原理","url":"/%E9%9D%A2%E8%AF%95/Vue/%E9%9D%A2%E8%AF%95/Vue/vue%20%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86/","content":"<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>Vue 采用了数据劫持结合发布-订阅的模式, 通过 Object#defineProperty 方法劫持各个成员的 getter, setter. 在数据变动的时候发布消息给订阅者触发相应的回调, 由于是在不同数据变动时触发的消息. 也就可以精确的将变更发送给绑定的视图. 而不是对所有的数据都进行更新. 具体的步骤为:</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>对于需要 observer 的数据进行递归遍历, 给每个成员都加上 getter 和 setter. 这样将来给对应的成员赋值的时候就会触发 setter 实现数据变化的监听</li>\n<li>Compile 解析模板指令, 将模板中的变量替换成数据. 并将每个指令对应的节点绑定更新函数. 添加监听数据的订阅者. 一旦数据有了变动便能收到通知更新视图</li>\n<li>Watcher 订阅者是 Observer 和 compile 之间的通信桥梁<ul>\n<li>在自生实例化时往订阅器(dep)里添加自己</li>\n<li>自生存在一个 update 方法</li>\n<li>待属性变动接收到 dep#update 通知时, 调用自生的 update 方法触发 compile 中绑定的回调</li>\n</ul>\n</li>\n<li>mvvm 作为数据绑定的入口, 整合了 observer, compile, watcher 三者. 通过 observer 监听自己的 modal 数据变化. 通过 compile 来编译模板指令. 最终通过 watcher 作为沟通两者的桥梁. 达到了数据变化可以更新视图, 视图变化也可以更新数据的双向绑定效果.</li>\n</ol>\n<h2 id=\"3-0-之前和-3-0-的比较\"><a href=\"#3-0-之前和-3-0-的比较\" class=\"headerlink\" title=\"3.0 之前和 3.0 的比较\"></a>3.0 之前和 3.0 的比较</h2><h3 id=\"基于数据劫持-x2F-依赖收集的双向绑定优点\"><a href=\"#基于数据劫持-x2F-依赖收集的双向绑定优点\" class=\"headerlink\" title=\"基于数据劫持 &#x2F; 依赖收集的双向绑定优点\"></a>基于数据劫持 &#x2F; 依赖收集的双向绑定优点</h3><ol>\n<li>不需要显式调用, 通过数据劫持 + 发布订阅的方案. 可以直接通知视图的更新</li>\n<li>直接精确得到变化的数据, 因为劫持了所有成员的 setter, 当属性值变化的时候我们可以精确的获取变化的内容 newValue 不需要进行额外的 diff 操作去查找变化的部分.</li>\n</ol>\n<h3 id=\"Proxy-vs-Object-defineProperty\"><a href=\"#Proxy-vs-Object-defineProperty\" class=\"headerlink\" title=\"Proxy vs Object.defineProperty\"></a>Proxy vs Object.defineProperty</h3><h4 id=\"Proxy-的好处\"><a href=\"#Proxy-的好处\" class=\"headerlink\" title=\"Proxy 的好处\"></a>Proxy 的好处</h4><ol>\n<li>可以监听数组</li>\n<li>13 种监听方法, 比 defineProperty 的 getter &#x2F; setter 更强大. get, set, has, deleteProperty, ownKeys, getOwnPropertyDescriptor, defineProperty, preventExtensions, getPrototypeOf, isExtensible, setPrototypeOf, apply, construct</li>\n<li>返回新的对象, 而非直接修改原对象.</li>\n</ol>\n<h4 id=\"Proxy-的缺点\"><a href=\"#Proxy-的缺点\" class=\"headerlink\" title=\"Proxy 的缺点\"></a>Proxy 的缺点</h4><p>兼容性不给力, 而且低版本浏览器中没法用 pollfill 实现</p>\n","categories":["面试","Vue"],"tags":["面试"]},{"title":"sourcemap 是什么有何作用","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/sourcemap%20%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E4%BD%95%E4%BD%9C%E7%94%A8/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>source map 是将编译, 打包, 压缩后的文件映射回源代码的工具. 由于打包压缩后的代码可读性不足, 于是在开发生产过程中就需要通过 source map 定位到源代码并调试.</p>\n<h2 id=\"常用方案\"><a href=\"#常用方案\" class=\"headerlink\" title=\"常用方案\"></a>常用方案</h2><p>生产环境使用 source map 的方式主要有以下几种:</p>\n<ol>\n<li>hidden-source-map: 借助第三方监控平台 Sentry 使用</li>\n<li>nosource-source-map: 只会展示具体的行数以及源代码的错误栈, 相对于 source-map 更安全</li>\n<li>source-map: 生成完整的 source-map, 并且通过 nginx 配置只有公司内网可以访问, 其他环境直接 deny</li>\n</ol>\n<p>PS: map 文件只要用户不打开浏览器的控制台, 浏览器是不会主动加载<br>PS: 生产环境下不要启用 inline- 族和 eval- 族的 source-map 配置. 因为这会大大正价 bundle 包的大小, 降低页面加载的性能…</p>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"webpack 的构建流程","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/webpack%20%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/","content":"<h2 id=\"简述-webpack-的构建流程\"><a href=\"#简述-webpack-的构建流程\" class=\"headerlink\" title=\"简述 webpack 的构建流程\"></a>简述 webpack 的构建流程</h2><ol>\n<li>初始化参数: 从配置文件和 shell 语句中读取与合并参数, 得出最终的参数</li>\n<li>开始编译: 基于第一步的参数初始化 Compiler 对象. 加载所有配置的插件, 执行对象的 run 方法开始编译</li>\n<li>确定入口: 根据配置文件找到所有的入口文件</li>\n<li>编译所有模块: 从入口文件触发, 调用所有配置了 loader 进行模块编译. 找出该模块依赖的模块递归处理. 直到处理完成所有的模块</li>\n<li>完成编译模块: 在经过第四步的处理后得到了每个模块编译的结果, 并能获取到各个模块之间的关系.</li>\n<li>输出资源: 根据入口文件和模块间的依赖关系, 组装成一个个包含多个模块的 chunk 再把每个 chunk 转换成一个个单独文件加入到输出列表. 这里是可以修改输出资源的最后机会</li>\n<li>输出完成: 确定好输出内容后, 根据输出文件路径和文件名. 把文件写入到文件系统中</li>\n</ol>\n<p>在上述各个步骤中, webpack 都会广播特定的事件. 插件在监听到关注的事件以后就会启动自生的逻辑. 调用 webpack 提供的 api 以影响最终生成的结果</p>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"常见的 loader","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/%E5%B8%B8%E8%A7%81%E7%9A%84%20loader/","content":"<p><a href=\"https://www.webpackjs.com/loaders/\">webpack loaders 文档</a></p>\n<ul>\n<li>file-loader: 把文件拷贝到输出文件夹中, 并在代码引用文件的位置修改文件输出路径</li>\n<li>url-laoder: file-loader + 把小文件转成 base 64 的能力</li>\n<li>image-loader: 加载并压缩图片使用</li>\n<li>babel-loader: 转码高级 js 语言</li>\n<li>ts-loader: 转码 ts</li>\n<li>style-loader &#x2F; css-loader &#x2F; postcss-loader &#x2F; less-loader &#x2F; sass-loader</li>\n<li>eslint-loader: 检查代码语法</li>\n<li>vue-loader: 解析 .vue 单文件</li>\n<li>cache-loader: 可以用于缓存其他 loader 生成的文件, 优化打包速度</li>\n<li>exports-loader: 将原本没有导出语句的模块导出出来<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">hello</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;hello&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.js&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">hello</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./hello.js&#x27;</span>), <span class=\"attr\">loader</span>: <span class=\"string\">&quot;exports?hello&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其实相当于在 hello 中添加了一行导出语句</span></span><br><span class=\"line\"><span class=\"comment\">// export const hello = hello</span></span><br><span class=\"line\"><span class=\"comment\">// 所以在 a.js 中就可以直接引用了</span></span><br></pre></td></tr></table></figure></li>\n<li>imports-loader: 相当于 exports-loader 的逆运算, 你可以通过这个给指定模块添加一些 import 语句, 可以用在给模块添加通用依赖</li>\n<li>expose-loader: 有些库(例如 webuploader)需要全局的 jQ 对象, 但是我们并没有使用 cdn 的方式导入 jq. 会导致三方库访问不到报错. 测试就可以使用 <code>expose-loader</code> 将模块化的 jQ 对象挂载到全局 ~<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 expose-loader</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;expose-loader?exposes=$,jQuery!jquery&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样就会在 window 上添加 $ 和 jQuery 变量, 指向 node_modules 中的 jq</span></span><br></pre></td></tr></table></figure></li>\n<li>thread-loader: happy-pack 官方推荐的替换方案, 就是开启多进程编译用的 loader</li>\n</ul>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"常见的 plugin","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/%E5%B8%B8%E8%A7%81%E7%9A%84%20plugin/","content":"<p><a href=\"https://www.webpackjs.com/plugins/\">webpack plugins 文档</a></p>\n<ul>\n<li>html-webpack-plugin: 生成 html 模板</li>\n<li>DefinePlugin: 在项目中定义环境变量, webpack 4 之后会根据 mode 字段自动定义环境变量</li>\n<li>IgnorePlugin: 忽略部分文件的编译</li>\n<li>CmmonsChunkPlugin: 提取公共代码, wp4 之后已经不推荐使用, 提取公共代码可以通过 SplitChunksPlugin 来</li>\n<li>SplitChunksPlugin: CommonsChunkPlugin替代, 配置: optimization.splitChunks</li>\n<li>ProgressPlugin: 命令行展示打包的进度</li>\n<li>UglifyJsPlugin: 压缩 js 的插件, 不支持 es 的压缩. Wp4 之后不推荐用</li>\n<li>TerserWebpackPlugin: wp4 之后的 js 压缩工具</li>\n<li>extract-text-webpack-plugin: css 模块提取独立文件, wp 5 之后不推荐使用</li>\n<li>mini-css-extract-plugin: wp 5 之后的 css 提取工具</li>\n<li>Clean-webpack-plugin: 清理 webpack 打包结果</li>\n<li>Speed-measure-webpack-plugin: 监控 webpack 打包耗时</li>\n<li>webpack-bundle-analyzer: 可视化 webpack 输出模块的体积</li>\n</ul>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"混合使用 commonjs 和 esm","url":"/%E9%9D%A2%E8%AF%95/webpack/%E9%9D%A2%E8%AF%95/webpack/%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8%20commonjs%20%E5%92%8C%20esm/","content":"<ol>\n<li>es6 模块引用 commonjs, 可以直接使用. Commonjs 模块不会被编译而是会原样输出没有 default 属性.</li>\n<li>es6 模块引用 es6 模块, 被调用者和调用者都会添加 <code>&#123;__esModule: true&#125;</code>, 实际导出的内容都是通过 <code>__webpack_require__.d</code> 添加到导出对象上的. 仅仅导入但没有使用的内容会被 tree-shaking 掉</li>\n<li>commonjs 引用 es6 模块, es6 模块会被添加 <code>&#123;__esModule: true&#125;</code>, 如果 es6 模块中包含 export default 那么导出的模块就会被添加 default 属性. 印证了<code>require&#39;balabala&#39;).default</code> 这个玩意儿</li>\n<li>commonjs 引入 commonjs, 不会被解析. 直接原样输出</li>\n</ol>\n<p>PS: 在 es6 模块化中, export 和 export default 可以混用. 然而在 commonjs 中 exports 和 module.exports 不能混用. 无论是在 node 环境还是在 webpack 中.</p>\n","categories":["面试","webpack"],"tags":["面试"]},{"title":"语义化","url":"/%E9%9D%A2%E8%AF%95/html/%E9%9D%A2%E8%AF%95/html/%E8%AF%AD%E4%B9%89%E5%8C%96/","content":"<h2 id=\"常见的语义化标签\"><a href=\"#常见的语义化标签\" class=\"headerlink\" title=\"常见的语义化标签\"></a>常见的语义化标签</h2><p>article aside details figcaption figure footer header main mark nav section summary time and so on…</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>对于搜索引擎友好. 有了良好的语义, 网页内容更容易被搜索引擎爬虫爬取</li>\n<li>开发维护更加友好. 语义化代码有利于团队内其他成员阅读你的代码并基于你的代码进行改造和升级.</li>\n<li>提升代码的可复用性和可移植性. 方便在多种设备执行, 例如移动设备, 盲人设备等等</li>\n</ul>\n<h2 id=\"如何实现语义化\"><a href=\"#如何实现语义化\" class=\"headerlink\" title=\"如何实现语义化\"></a>如何实现语义化</h2><p>一般网站分为头部, 导航, 文章, 侧栏, 底部… 根据不同的部位可使用不同的标签进行书写: header nav article section footer aside</p>\n<p>表示具体意义的区块也可以用特定意义的标签: a, abbr, address, blockquote, caption, code, datalist, del, details…</p>\n<ul>\n<li>尽量少的使用 div span 等无语义的标签</li>\n<li>在语义化不明显时, 例如既可以用 div 也可以用 p 标签的地方尽可能用 p 标签. 因为 p 标签有默认的上下间距. 有利于兼容特殊终端</li>\n<li>不要使用纯样式标签. 比方说 b font u 而是使用 css 样式代替</li>\n<li>每个表单项 input 元素都添加对应的 label 标签, 并且关联两者优化用户体验</li>\n</ul>\n","categories":["面试","html"],"tags":["面试"]},{"title":"Link 标签和 a 标签有啥区别","url":"/%E9%9D%A2%E8%AF%95/html/%E9%9D%A2%E8%AF%95/html/Link%20%E6%A0%87%E7%AD%BE%E5%92%8C%20a%20%E6%A0%87%E7%AD%BE%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/","content":"<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><ol>\n<li>渲染结果相同, 两者渲染的结果都是 a 标签</li>\n<li>实现功能相同, 都能够实现页面的跳转</li>\n</ol>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><ol>\n<li>Link 标签的跳转只会触发与之相匹配的 Route 对应的页面内容更新. 不会触发整页的刷新, 而 a 标签的跳转会刷新整个页面</li>\n<li>Link 标签一般需要配合 Route 使用, a 标签可以随意添加</li>\n<li>Link 标签实际上是禁用了 a 标签原有的跳转能力之后自行实现的跳转<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[...<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;a&#x27;</span>)].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> &#123;</span><br><span class=\"line\">    a.<span class=\"property\">onclick</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 阻止默认跳转事件</span></span><br><span class=\"line\">        e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">        location.<span class=\"property\">href</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">href</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["面试","html"],"tags":["面试"]},{"title":"DOM 事件","url":"/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/DOM%20%E4%BA%8B%E4%BB%B6/","content":"<p>JavaScript 使用的是事件驱动的设计模式, 为元素添加事件监听函数, 当这个元素的相应事件被触发那么其添加的事件监听函数就被调用. 作为 js 和 html 沟通的基础, 任何文档或者浏览器窗口发生的交互都要通过绑定事件进行 ~</p>\n<span id=\"more\"></span>\n\n<h2 id=\"常用概念\"><a href=\"#常用概念\" class=\"headerlink\" title=\"常用概念\"></a>常用概念</h2><h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p>描述的是事件在页面中传播的顺序</p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>发生在浏览器里的动作, 这个动作可以是用户触发的. 也可以是浏览器触发的. click, mouseover, onload 等等</p>\n<h3 id=\"事件监听函数\"><a href=\"#事件监听函数\" class=\"headerlink\" title=\"事件监听函数\"></a>事件监听函数</h3><p>事件发生后, 浏览器如何响应</p>\n<h2 id=\"DOM-0-级事件\"><a href=\"#DOM-0-级事件\" class=\"headerlink\" title=\"DOM 0 级事件\"></a>DOM 0 级事件</h2><p>DOM 事件初期, 实现事件绑定的方案还比较原始. 实现的方案有两个:</p>\n<ol>\n<li>直接在 html 行内进行事件的绑定, 两者进行了强耦合<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sayHi()&quot;</span>&gt;</span>clickMe<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hi ~&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>通过 DOM api 选取 dom, 然后指定其事件属性<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>clickMe<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hi ~&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">btn.<span class=\"property\">onclick</span> = sayHi</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>比较苦逼的是, 这种事件绑定的模型作为最为广泛的处理方案(现在还有人用). 但是并没有被 w3c 协会定位正式的标准. 被人们约定俗成的定义为 DOM 0 级事件处理模型</p>\n<h2 id=\"DOM-2-级事件\"><a href=\"#DOM-2-级事件\" class=\"headerlink\" title=\"DOM 2 级事件\"></a>DOM 2 级事件</h2><p>由于 1 级 DOM 标准中并没有关于事件相关的规定, 所以并没有 1 级事件模型. 在 2 级 DOM 中定义了事件流模型. 包含了事件的冒泡和捕获两个阶段 ~</p>\n<h3 id=\"绑定事件的句柄\"><a href=\"#绑定事件的句柄\" class=\"headerlink\" title=\"绑定事件的句柄\"></a>绑定事件的句柄</h3><p>el.addEventListener(event-name, cb, useCapture)</p>\n<ul>\n<li>event-name: 事件名称</li>\n<li>cb: 触发事件的回调函数</li>\n<li>useCapture: 代表事件是否启动捕获阶段, 默认为 false，即为冒泡</li>\n</ul>\n<h3 id=\"事件流-1\"><a href=\"#事件流-1\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><ol>\n<li>捕获阶段: window -&gt; 目标, 自上而下</li>\n<li>目标阶段: 目标节点事件处理</li>\n<li>冒泡阶段: 目标 -&gt; window, 自下而上</li>\n</ol>\n<h3 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h3><p>由于事件会在冒泡阶段上传给父节点, 因此可以把子节点监听的函数定义在父节点上, 由父节点统一处理多个子元素的事件, 这种方法就是事件代理</p>\n<h2 id=\"DOM-3-级事件\"><a href=\"#DOM-3-级事件\" class=\"headerlink\" title=\"DOM 3 级事件\"></a>DOM 3 级事件</h2><p>DOM 3 级事件和 2 级事件类似, 其中第三个参数由接收一个 Boolean 变成了接收一个 Object. 还增加了部分新的事件类型:</p>\n<table>\n<thead>\n<tr>\n<th>事件类型</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UI 事件</td>\n<td>load scroll</td>\n</tr>\n<tr>\n<td>焦点事件</td>\n<td>blur focus</td>\n</tr>\n<tr>\n<td>鼠标事件</td>\n<td>dbclick mouseup</td>\n</tr>\n<tr>\n<td>滚轮事件</td>\n<td>mousewheel</td>\n</tr>\n<tr>\n<td>文本事件</td>\n<td>input</td>\n</tr>\n<tr>\n<td>键盘事件</td>\n<td>keydown keypress</td>\n</tr>\n<tr>\n<td>合成事件</td>\n<td>当为IME（输入法编辑器）输入字符时触发 compositionstar</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">参考资料</a></p>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>在事件处理函数中, 我们可以获取到的第一个参数就是事件对象. 对于事件对象中有一些常用的属性和方法, 总结如下:</p>\n<h3 id=\"currentTarget\"><a href=\"#currentTarget\" class=\"headerlink\" title=\"currentTarget\"></a>currentTarget</h3><p>记录了事件当前正在被那个元素接收, 也就是 “正在经历哪个元素”, 这个元素一直是在改变的…</p>\n<p>如果事件处理函数绑定的元素和当前触发的元素是一样的, 那么事件处理函数中的 this, event.currentTarget, event.target 相同, 都指向这个元素. 通常可以以此为依据, 判断当前元素是否就是目标元素</p>\n<h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h3><p>记录了触发事件的具体目标, 也就是最具体的那个元素. 是真正的事件源.</p>\n<p>就算事件处理函数没有绑定在具体的目标元素上, 而是绑定在目标元素的父级元素上. 事件通过冒泡到父级元素上触发的. 那么我们可以通过 target 来获取真正触发事件的元素.</p>\n<h3 id=\"preventDefault\"><a href=\"#preventDefault\" class=\"headerlink\" title=\"preventDefault\"></a>preventDefault</h3><p>阻止默认行为, 常用来阻止表单元素的默认提交和 a 标签的默认跳转</p>\n<h3 id=\"stopPropagation\"><a href=\"#stopPropagation\" class=\"headerlink\" title=\"stopPropagation\"></a>stopPropagation</h3><p>阻止冒泡, 这个方法用于终止事件在传播过程的捕获, 目标处理或起泡阶段进一步传播. 调用该方法后事件不再被分派到其他节点</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码中, 如果想要点击了按钮 A 之后 B, C 也能响应点击事件. 由于他们没有层级关系, 所以不能通过冒泡实现…</p>\n<p>于是就有了自定义事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建自定义事件对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clickAEvent = <span class=\"keyword\">new</span> <span class=\"title class_\">Event</span>(<span class=\"string\">&#x27;clickA&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定自定义事件</span></span><br><span class=\"line\">btnB.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;clickA&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A clicked&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">btnC.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;clickA&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A clicked&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 点击 A 的时候触发自定义事件</span></span><br><span class=\"line\">btnA.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    btnB.<span class=\"title function_\">dispatchEvent</span>(clickAEvent)</span><br><span class=\"line\">    btnC.<span class=\"title function_\">dispatchEvent</span>(clickAEvent)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","categories":["面试","浏览器"],"tags":["面试"]},{"title":"常见 html 问题","url":"/%E9%9D%A2%E8%AF%95/html/%E9%9D%A2%E8%AF%95/html/%E5%B8%B8%E8%A7%81%20html%20%E9%97%AE%E9%A2%98/","content":"<h2 id=\"innerHTML-vs-innerText-vs-outerHTML-vs-outerText\"><a href=\"#innerHTML-vs-innerText-vs-outerHTML-vs-outerText\" class=\"headerlink\" title=\"innerHTML vs innerText vs outerHTML vs outerText\"></a>innerHTML vs innerText vs outerHTML vs outerText</h2><ul>\n<li>innerHTML 设置或者获取标签所包含的 HTML 与文本信息, 不含标签本身</li>\n<li>innerText 设置或者获取标签所包含的文本信息, 不含标签本身</li>\n<li>outerHTML 设置或获取标签本身以及所包含的 HTML 与文本信息, 包含本身</li>\n<li>outerText 设置或获取标签本身以及所包含的文本信息, 包含本身</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div1&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;div.innerHTML&#x27;</span>, div.<span class=\"property\">innerHTML</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;div.innerText&#x27;</span>, div.<span class=\"property\">innerText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;div.outerHTML&#x27;</span>, div.<span class=\"property\">outerHTML</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;div.outerText&#x27;</span>, div.<span class=\"property\">outerText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 控制台打印的结果为</span></span><br><span class=\"line\"><span class=\"comment\">div.innerHTML &lt;p&gt;this is text&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">index.html:5 div.innerText this is text</span></span><br><span class=\"line\"><span class=\"comment\">index.html:6 div.outerHTML &lt;div id=&quot;div1&quot;&gt;&lt;p&gt;this is text&lt;/p&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">index.html:7 div.outerText this is text</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"input-可选的-type\"><a href=\"#input-可选的-type\" class=\"headerlink\" title=\"input 可选的 type\"></a>input 可选的 type</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>text</td>\n<td>文本框</td>\n</tr>\n<tr>\n<td>password</td>\n<td>密码框</td>\n</tr>\n<tr>\n<td>radio</td>\n<td>单选</td>\n</tr>\n<tr>\n<td>checkbox</td>\n<td>复选</td>\n</tr>\n<tr>\n<td>file</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>隐藏</td>\n</tr>\n<tr>\n<td>button</td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>reset</td>\n<td>重置按钮</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交按钮</td>\n</tr>\n<tr>\n<td>image</td>\n<td>图片按钮</td>\n</tr>\n</tbody></table>\n<h2 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和 import 的区别\"></a>link 和 import 的区别</h2><ol>\n<li>link 是 html 标签, 而 imort 是 css 提供的关键词</li>\n<li>Link 加载的 css 文件会在页面加载过程中加载而 import 的 css 文件则需页面加载完成后开始加载</li>\n<li>Link 方式引入的 css 文件权重高于 @import</li>\n</ol>\n","categories":["面试","html"],"tags":["面试"]},{"title":"垃圾回收机制","url":"/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/","content":"<p>所谓垃圾回收机制, 就是浏览器回收内存的方案. 在浏览器发展历程中充当了主流 GC 的方案主要有: 引用计数法和标记清除法</p>\n<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><p>比较初级的垃圾回收方案, 目前几乎已经被完全淘汰. 在引用计数法的机制下, 内存中每个值都会对应一个引用计数. 当垃圾回收器感受到某个值的引用计数已经为 0 时, 就判定为该变量已经是无用的变量了. 对应的内存就会被释放掉.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个对象 &quot;罗小螺&quot;, 并且赋值给 man 变量, 此时对象的引用次数为 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> man = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;罗小螺&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加一个 bakUp 也指向了 &quot;罗小螺&quot; 对象, 此时对象的引用次数为 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bakUp = man</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 断开 man 对 &quot;罗小螺&quot; 的引用, 此时对象的引用次数为 1</span></span><br><span class=\"line\">man = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 断开 bakUp 对 &quot;罗小螺&quot; 的引用, 此时对象的引用次数为 0, 被 GC 认为</span></span><br><span class=\"line\"><span class=\"comment\">// 是无用对象, 垃圾收集释放内存</span></span><br><span class=\"line\">bakUp = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>如上代码, 我们创建一个对象, 并且赋值给 man 时, 它有一个引用, 所以不会被删除, 再指定了 backUp 也指向它的时候. 引用变成两个. 只有当两个指向对象的句柄全部置为 null 的时候, GC 认为该对象没有了引用, 将其删除内存释放…</p>\n<h3 id=\"引用计数法的缺点\"><a href=\"#引用计数法的缺点\" class=\"headerlink\" title=\"引用计数法的缺点\"></a>引用计数法的缺点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数 func 中定义了 圈圈 和 罗小螺 两个对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> quanquan = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;圈圈&#x27;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xiaoluo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;罗小螺&#x27;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行完了 func 之后 圈圈 和 罗小螺 两个对象都会被回收</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>()</span><br></pre></td></tr></table></figure>\n\n<p>函数作用域会执行完成后回收变量, 所以 func 执行完成后quanquan 和 xiaoluo引用断开对象待释放. 但是如果我们稍微改动一下代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数 func 中定义了 圈圈 和 罗小螺 两个对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> quanquan = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;圈圈&#x27;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xiaoluo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;罗小螺&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过循环引用, 圈圈 和 罗小螺 互相引用彼此. 引用计数法统计对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 始终保持着一个引用便无法实现回收</span></span><br><span class=\"line\">  xiaoluo.<span class=\"property\">friend</span> = quanquan</span><br><span class=\"line\">  quanquan.<span class=\"property\">friend</span> = xiaoluo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按理说这里执行完了 func 之后 圈圈 和 罗小螺 两个对象都会被回收</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>()</span><br></pre></td></tr></table></figure>\n\n<p>在函数体中创建的两个对象分别添加了对彼此的引用(也就是人们常说的循环引用). 当函数执行完毕后, 原本 quanquan 和 xiaoluo 变量被回收了, 但是两个对象互相引用了彼此, 所以始终存在引用, 无法实现垃圾回收和内存释放他就泄露了…</p>\n<h2 id=\"标记清除法\"><a href=\"#标记清除法\" class=\"headerlink\" title=\"标记清除法\"></a>标记清除法</h2><p>由于引用计数法, 存在上述问题, 浏览器都开始转为使用标记清除法来实现垃圾回收. 在标记清除法中一个变量是否还有用的判断标准就是它是否可以被触达. 该算法有两个阶段:</p>\n<ul>\n<li>标记阶段: 垃圾回收器会先找到根对象, 从根对象出发, 扫描所有可以通过根对象触及的变量, 并将这些变量标记为可抵达</li>\n<li>清除阶段, 经过标记阶段没有被标记为可抵达的对象, 都被认为是不需要的, 统一清除并释放内存.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数 func 中定义了 圈圈 和 罗小螺 两个对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> quanquan = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;圈圈&#x27;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xiaoluo = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;罗小螺&#x27;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  xiaoluo.<span class=\"property\">friend</span> = quanquan</span><br><span class=\"line\">  quanquan.<span class=\"property\">friend</span> = xiaoluo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还是这张图, 函数执行完毕后从 window 算起, 无法</span></span><br><span class=\"line\"><span class=\"comment\">// 找到 圈圈 和 罗小螺 两个对象, 所以认为是无用的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 将其回收</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见的内存泄露原因\"><a href=\"#常见的内存泄露原因\" class=\"headerlink\" title=\"常见的内存泄露原因\"></a>常见的内存泄露原因</h2><ol>\n<li>函数作用域内定义变量未使用声明符, 导致生成了全局变量</li>\n<li>忘记清除的 setInterval 和 setTimeout</li>\n<li>移除 Dom 未删除其引用<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个变量, 并引用 DOM 元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;dom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除 dom 元素, 但是没有删除变量的引用</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(dom)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 小老弟, 我还在</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dom)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>PS: 对于很流行的 theThing 问题, 我本地测试了一下. 现在的浏览器好像已经做过优化了. 火焰图中内存并没有阶梯递增. 而是波形的. 应该是做了优化. 所以千万不要盲目背题. 关于 theThing 问题可以看看<a href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\">这篇文章</a>.</p>\n","categories":["面试","浏览器"],"tags":["面试"]},{"title":"浏览器缓存","url":"/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/","content":"<p>浏览器缓存分为两种: 一种是需要发送 HTTP 请求, 基于服务器的判断来决定是否使用缓存, 即协商缓存. 还有一种为不需要发送 HTTP 请求, 直接读取浏览器存储在本地的缓存内容作为结果返回, 即强缓存.</p>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>强缓存, 就是浏览器直接读取本地缓存, 无需通过服务器确认的缓存形式. 在 http  1.0 时期, 定义的 Expires 字段就是控制了响应强缓存的有效时间.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"expires-Wed-26-Oct-2022-16-00-15-GMT\"><a href=\"#expires-Wed-26-Oct-2022-16-00-15-GMT\" class=\"headerlink\" title=\"expires: Wed, 26 Oct 2022 16:00:15 GMT\"></a>expires: Wed, 26 Oct 2022 16:00:15 GMT</h3><p>表示当前资源缓存到 2022 年 10 月 26 号 16:00:25 过期, 此前无需再次向服务器发起请求. 但是此方案存在一个问题. 就是如果服务器和浏览器时间不一致. 那么会导致后端返回的时间和前端理解的有效时间不一致. 于是在 http 1.1 中添加了 cache-control 通过 max-age&#x3D;相对时间(单位秒)避免了两端时间不一致可能出现的问题</p>\n<h3 id=\"cache-control-max-age-x3D-31536000\"><a href=\"#cache-control-max-age-x3D-31536000\" class=\"headerlink\" title=\"cache-control: max-age&#x3D;31536000\"></a>cache-control: max-age&#x3D;31536000</h3><p>max-age 为 31536000 秒也就是 365 天有效期为一年. 由于使用的是相对时间. 缓存的实际有效期根据浏览器接收到资源的时间开始算. 避免了客户端 &#x2F; 服务端时间不同步的问题.</p>\n<p>cache-control 还包含以下几个属性值:</p>\n<ul>\n<li>public: 浏览器和代理服务器都可以缓存</li>\n<li>s-maxage: 启用了代理服务器缓存时用于规定代理服务器缓存的时间</li>\n<li>private: 只有浏览器可以缓存, 代理服务器不可以缓存</li>\n<li>no-cache: 跳过当前的强缓存, 发送 http 请求直接进入协商缓存阶段</li>\n<li>no-store: 跳过任何形式的缓存</li>\n<li>must-revalidate: 一旦资源过期(比如已经超过max-age), 在成功向原始服务器验证之前, 缓存不能用该资源响应后续请求</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\">查考文档</a></p>\n<p>PS: 强缓存中如果 Expires 和 cache-control 两个响应头都存在的话, 浏览器会优先考虑 cache-control</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>强缓存失效后, 浏览器就会向服务器发起 http 请求, 并携带相应的缓存 tag, 由服务器确定是否使用缓存的资源. 这个过程就是协商缓存. 这样的 tag 组要有两个 last-modified 和 etag</p>\n<h3 id=\"last-modified\"><a href=\"#last-modified\" class=\"headerlink\" title=\"last-modified\"></a>last-modified</h3><p>表示文件最后修改的时间, 浏览器第一次向服务器发送请求时服务器会在响应头上携带这个字段. 浏览器再次请求相同的内容时就会带上对应的请求头: if-modified-since 用于表示上次收到的文件的更新时间. 服务器拿到该字段以后会和服务器中该资源的最后一次修改时间做对比:</p>\n<ol>\n<li>如果请求头中的时间小于最近修改时间, 说明是时候更新了. 返回最新资源并返回最新的 last-modified</li>\n<li>如果请求头中的时间等于最后更新时间, 则返回 304 告诉浏览器直接使用缓存</li>\n</ol>\n<h3 id=\"etag\"><a href=\"#etag\" class=\"headerlink\" title=\"etag\"></a>etag</h3><p>etag 是服务器根据当前文件内容生成的一段唯一标识. 只要文件内容有改动这个标识就会更新. 当浏览器第一次访问资源时, 服务器会将该标识作为 etag 响应头返回给浏览器, 下次访问时浏览器会携带 if-none-match 请求头并以该值作为请求头的值. 服务器拿这个值和资源当前的 etag 做对比:</p>\n<ol>\n<li>如果两者不一样, 说明要更新了. 执行常规的请求响应逻辑</li>\n<li>如果两者一样, 则返回 304 通知浏览器使用缓存</li>\n</ol>\n<h3 id=\"last-modified-vs-etag\"><a href=\"#last-modified-vs-etag\" class=\"headerlink\" title=\"last-modified vs etag\"></a>last-modified vs etag</h3><ol>\n<li>在精准度上, etag 优于 last-modified. 因为 etag 是基于文件内容生成的每次文件的变动都能带来 etag 的更新. Last-modified 就存在了两种缺点:<ul>\n<li>用户通过编辑器打开了文件并保存, 期间并没有修改文件内容, last-modified 也会更新</li>\n<li>last-modified 能够感知的最精确的时间是秒, 如果 1s 内经历了多次修改. last-modified 并不能体现出文件修改的结果…</li>\n</ul>\n</li>\n<li>在性能上, last-modified 优于 etag. 优于 last-modified 的更新时间就是右键属性里边的更新时间. 读取方便. 但是 etag 就要对文件内容进行摘要生成的哈希值. 肯定资源开销更大一些</li>\n<li>两种协商缓存字段同时使用的话, 服务器会优先考虑 etag</li>\n</ol>\n<h2 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h2><p>当命中强缓存或者协商缓存的时候, 浏览器就会从本地缓存中获取资源. 那么本地的缓存是存在哪儿的呢? 浏览器的缓存位置按照优先级从高到低的排序分别是:</p>\n<h3 id=\"Service-Woker\"><a href=\"#Service-Woker\" class=\"headerlink\" title=\"Service Woker\"></a>Service Woker</h3><p>Service Woker, 可以链接浏览器的请求. 以请求粒度控制网站中各个资源的缓存情况. 在 pwa 中比较常用.</p>\n<h3 id=\"Memory-Cache-和-Disk-Cache\"><a href=\"#Memory-Cache-和-Disk-Cache\" class=\"headerlink\" title=\"Memory Cache 和 Disk Cache\"></a>Memory Cache 和 Disk Cache</h3><p>Memory Cache 和 Disk Cache 是目前比较常用的两种情况. 顾名思义, 一种是把缓存资源存储在内存中, 一种是存储在硬盘中. 两者的选择应该是遵循了 lru-cache 的最长使用原则.</p>\n<h3 id=\"Push-Cache\"><a href=\"#Push-Cache\" class=\"headerlink\" title=\"Push Cache\"></a>Push Cache</h3><p>Push Cache, 源于 http 2.0 的服务器推送功能, 我目前在业务中还没有具体的实践. 如果您有好的想法的话希望可以分享一下 ~</p>\n","categories":["面试","浏览器"],"tags":["面试"]},{"title":"DNS","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/DNS/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>DNS(Domain Names System), 域名解析系统. 是提供域名以及与之相对应的 IP 进行转换的服务器. 就是给定域名返回其对应 IP 的一项互联网服务.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"两种查询方式\"><a href=\"#两种查询方式\" class=\"headerlink\" title=\"两种查询方式\"></a>两种查询方式</h2><h3 id=\"递归查询\"><a href=\"#递归查询\" class=\"headerlink\" title=\"递归查询\"></a>递归查询</h3><p>如果 A 请求 B, 那么 B 作为请求的接收者一定要给 A 答案</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-30-54.png\" alt=\"递归查询\"></p>\n<p>这就像极了一些苦逼的前端程序员, 测试提出来一个 bug 就要带着测试找后端, 找数据库, 找对接部门. 回来发现他妈的开发不完了</p>\n<h3 id=\"迭代查询\"><a href=\"#迭代查询\" class=\"headerlink\" title=\"迭代查询\"></a>迭代查询</h3><p>如果接收者 B 不知道 A 所需的准确内容. 他就可以告诉请求者 A 怎样去获取这个内容. 自己并不会代表请求者 A 去请求内容.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-33-13.png\" alt=\"迭代查询\"></p>\n<p>这就像极了一个聪明的的前端程序员, 测试提出问题之后不是前端问题时候告诉他可能是后端问题, 让他直接找后端. 加速问题解决降低自己的负载. 美滋滋</p>\n<h2 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h2><ol>\n<li>浏览器缓存, 浏览器在获取网站域名的实际 IP 地址后会对其进行缓存，减少网络请求的损耗</li>\n<li>操作系统缓存, 操作系统的缓存其实是用户自己配置的 hosts 文件</li>\n</ol>\n<h2 id=\"DNS-查询的过程\"><a href=\"#DNS-查询的过程\" class=\"headerlink\" title=\"DNS 查询的过程\"></a>DNS 查询的过程</h2><ol>\n<li>首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表若没有命中，则继续搜索操作系统的 DNS 缓存</li>\n<li>若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果</li>\n<li>若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询<ul>\n<li>首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器</li>\n<li>本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址</li>\n<li>本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址</li>\n</ul>\n</li>\n<li>本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来</li>\n<li>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起</li>\n<li>浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-36-02.png\" alt=\"正常 DNS 解析的过程\"></p>\n<p>浏览器访问本地域名服务器时采用了递归查询的方案, 浏览器只需要发起一次请求即可获取到准确的 DNS 结果<br>本地域名服务器访问根域名服务器, 顶级域名服务器, 权限域名服务器时则采用了迭代查询的方案.不至于给公网服务器造成过大的压力</p>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"GET 和 POST 的区别","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/GET%20%E5%92%8C%20POST%20%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<ol>\n<li>参数位置, GET 请求参数通过 url 传递, post 放在 request body 中</li>\n<li>大小限制, 限于浏览器 和 nginx 对 url 长度的限制, get 的参数也会受到限制; eg: 当初在百家号我把质量检测接口搞挂的情况, 因为每次质量检测需要上传富文本中的所有内容. 我把 POST 接口改成了 GET</li>\n<li>缓存性, get 请求会被浏览器主动缓存, post 不会, 除非手动设置</li>\n<li>从表面上看 POST 似乎比 GET 更加安全. 因为普通用户看不到请求参数. 但是实际上想看的用户你是拦不住的</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式</li>\n<li>从后端角度看, 接收 GET 请求参数直接同步处理即可. 但是想要接收 POST 请求参数的话就需要异步监听 data 事件 &#x3D;&gt; 请求体的上传是流式的</li>\n<li>GET 请求参数会被完整的保留在浏览器历史记录中 POST 不会</li>\n<li>GET url 地址可以被存入书签, POST 不可以</li>\n</ol>\n<p>综上, 看上去 GET 和 POST 天差地别, 但是实际上…根据 图解 HTTP .两者的请求报文完全一致🤔</p>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"CDN","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/CDN/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>CDN(Content Delivery Network), 内容分发网络. 是根据用户的位置分配最近的服务器资源的技术. 用户在访问资源是不再是必须访问源站, 而是访问离他最近的 “边缘节点” 请求响应的过程如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-38-09.png\" alt=\"CDN 工作原理\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"原来分析\"><a href=\"#原来分析\" class=\"headerlink\" title=\"原来分析\"></a>原来分析</h2><blockquote>\n<p>常规情况下, 我们访问一个 url 时的流程主要为:<br>用于输入 域名 -&gt; 浏览器携带域名访问 DNS 服务器 -&gt; DNS 解析到目的主机 IP 地址 -&gt; 根据 IP 地址请求目标服务器 -&gt; 得到目标服务器返回</p>\n</blockquote>\n<p>应用 CDN 之后, DNS 返回的不再是一个具体的 IP 地址, 而是一个 CNAME 指向 CDN 全局负载均衡. 根据之前提到的 DNS 域名解析的流程. 由于没有返回 ip 地址. 本地 DNS 服务器会再次向 CDN 全局负载均衡发送请求. 分配权限转交给了 CDN 全局负载均衡. 调度的过程如下:</p>\n<ol>\n<li>查看用户的 ip 地址, 推断用户的地理位置并查找最近的边缘节点</li>\n<li>查看用户所在的运营商网络, 找到相同网络的边缘节点</li>\n<li>检查边缘节点的负载情况, 选择其中负载较轻的节点</li>\n<li>还会考虑边缘节点其他情况, 诸如”健康情况”, 服务能力, 带宽, 响应时间等等…</li>\n</ol>\n<p>结合上边的因素, 可以得到最合适的边缘节点. 然后把这个节点的 IP 返回给本地 DNS 服务器并由其返回给用户浏览器</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-39-50.png\" alt=\"CDN 工作流程\"></p>\n<p>本地 DNS 访问 CDN 调度中心的设计简直太秀了, 这样既保证了本次完美访问, 本地有人下次访问时也能直接读取到最优的边缘节点, 因为 DNS 服务器代为缓存了 6666</p>\n<h2 id=\"缓存代理\"><a href=\"#缓存代理\" class=\"headerlink\" title=\"缓存代理\"></a>缓存代理</h2><p>缓存系统也是 CDN 的一个关键的部分. 分为两个层次, 一级缓存和二级缓存. 一级缓存直接连源站, 二级缓存直连用户. CDN 的回源主要是指二级缓存中没有用户请求的资源而像一级缓存请求, 如果一级缓存中也没有该资源才会向真正的源站请求. 两个衡量 CDN 质量的指标:</p>\n<h3 id=\"命中率\"><a href=\"#命中率\" class=\"headerlink\" title=\"命中率\"></a>命中率</h3><p>用户访问的资源恰好在缓存系统里, 可以直接返回给用户, 命中次数与所有访问次数之比</p>\n<h3 id=\"回源率\"><a href=\"#回源率\" class=\"headerlink\" title=\"回源率\"></a>回源率</h3><p>缓存里没有, 必须用代理的方式回源站取, 回源次数与所有访问次数之比</p>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"HTTP 协议的进化史","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/HTTP%20%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/","content":"<h2 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP 0.9\"></a>HTTP 0.9</h2><ol>\n<li>只有一个 GET 命令</li>\n<li>没有 Header 等描述信息</li>\n<li>服务端内容返回成功之后便会关闭 TCP 链接</li>\n<li>只能发送文本文档, 不支持图片视频等多媒体资源</li>\n</ol>\n<h2 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP 1.0\"></a>HTTP 1.0</h2><ol>\n<li>扩充了传输内容的格式, 支持了图片, 视频, 二进制文件的数据的传递. 为多媒体互联网的大发展奠定了基础</li>\n<li>增加了 POST, PUT, HEADER 等请求方法</li>\n<li>增加了 statusCode 和 header 内容, 用于描述请求会话</li>\n<li>增加了多字符集的支持, multi-part 发送, 权限, 缓存, 和内容编码等</li>\n<li>新增了缓存能力 Expire 字段</li>\n</ol>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-43-34.png\" alt=\"HTTP 1.0 模型\"></p>\n<p>HTTP 1.0 的一个缺点, 就是每个 TCP 链接只能发送一个请求, 数据发送完毕字后就会断开 TCP 链接. 如果需要请求其他资源就需要重新创建 TCP 链接. 如果 你想要请求完毕之后保留 TCP 链接不断开可以显式设置: Connection: keep-alive</p>\n<h2 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP 1.1\"></a>HTTP 1.1</h2><ol>\n<li>持久链接, 设置了 TCP 链接在数据发送完成后默认不关闭, 可以在后续的请求中复用. 客户端或者服务端发现另外一方一段时间内没有动静也可以主动关闭链接. 比较规范的做法是: 客户端在最后一个请求时设置 Connection: close 明确告诉服务器关闭 TCP 链接</li>\n<li>增加了管道机制, 可以在同一个 TCP 管道中发送多个 http 请求, 然而在 http 1.1 中虽然可以利用同一个 TCP 管道发送多个请求. 但是利用同一管道的请求是串行的而非并行. 就像是厕所蹲坑. 如果你前边是一个”快男”, 那么恭喜你. 但是如果你的前边是一个便秘老哥. 那就 GG 了.你得等着他完事儿才能整</li>\n<li>增加了 HOST 请求头, 有了 HOST 之后就可以在一台服务器上同时跑多个 web 服务, 也就是实现了虚拟主机技术. 比方说你访问 baidu.com 的时候 HOST 就是baidu.com 提高了主机的利用率<br>4.扩充了缓存策略,  Cache-Control Etag last-modified 等缓存字段</li>\n<li>引入 range, 允许客户端请求资源的某一段</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-43-56.png\" alt=\"HTTP 1.1 模型\"></p>\n<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h2><ol>\n<li>多路复用, 复用的 TCP 链接里, 客户端和服务器都可以同时发送多个请求 or 响应, 而不是按照先后顺序一一排队. 避免了 - 队头阻塞</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-45-07.png\" alt=\"HTTP 2.0 多路复用模型\"></p>\n<p>客户端请求 js 和 css 文件的请求是同时发出的, 而服务端返回文件的返回也是同时进行的</p>\n<ol start=\"2\">\n<li>二进制分帧, 帧是 http 2 通信中最小的单位信息, 多个帧之间可以乱序发送, 接收方可以根据帧的首部信息重新进行组装, 这也是多路复用实现的条件</li>\n<li>首部压缩, http 2 在客户端和服务端启用”首部表”来跟踪和存储之前发送的键值对, 对于相同的数据不再通过每次请求和响应都携带. 该”首部表” 在链接存续期内始终存在, 由客户端和服务器共同渐进更新<br><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-48-07.png\" alt=\"首部压缩模型\"></li>\n</ol>\n<p>如图所示, 请求 1 中已经发送过的头信息到了请求 2 中不再发送. 请求只会携带之前没有发送过的部分</p>\n<ol start=\"4\">\n<li>服务器推送, http 2 引入的服务器推送允许服务器推送资源给客户端. 通过该功能服务器可以预先推断客户端将来可能需要的资源并主动推送给客户端, 如下图</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-48-46.png\" alt=\"服务器推送模型\"></p>\n<p>如图所示, 在没有服务器推送能力时, 客户端请求完 html 之后解析到 link 标签之后再发起请求, 但是开启服务器推送之后, 用户访问 html 时候服务器就预知到客户端将来会请求 css 文件, 并同 html 一起返回给客户端</p>\n<h2 id=\"常见的状态码\"><a href=\"#常见的状态码\" class=\"headerlink\" title=\"常见的状态码\"></a>常见的状态码</h2><h3 id=\"1xx-表示继续\"><a href=\"#1xx-表示继续\" class=\"headerlink\" title=\"1xx 表示继续\"></a>1xx 表示继续</h3><ul>\n<li>100: 客户端继续发送请求, 这只是个临时响应</li>\n<li>101: 根据客户端的请求切换协议, 主要用于 websocket or http2 升级</li>\n</ul>\n<h3 id=\"2xx-表示成功\"><a href=\"#2xx-表示成功\" class=\"headerlink\" title=\"2xx 表示成功\"></a>2xx 表示成功</h3><ul>\n<li>200: 请求成功, 响应结果正常返回</li>\n<li>201: 请求成功并且服务器创建了新资源</li>\n<li>202: 服务器接收到请求, 但是尚未处理</li>\n<li>203: 非授权信息, 服务端已经处理请求, 但是返回信息来自另一来源</li>\n<li>204: 无内容, 服务器成功处理请求, 但是尚未返回任何内容, options 请求</li>\n<li>205: 重置内容, 服务器成功处理请求, 但是尚未返回任何内容</li>\n<li>206: 部分内容, 服务器返回了部分内容</li>\n</ul>\n<h3 id=\"3xx-表示重定向\"><a href=\"#3xx-表示重定向\" class=\"headerlink\" title=\"3xx 表示重定向\"></a>3xx 表示重定向</h3><ul>\n<li>301: 永久重定向, 浏览器会缓存结果下次访问自动跳转不再请求源链接</li>\n<li>302: 临时重定向, 引导浏览器到新的地址请求资源, 但是不能缓存该结果, 下次访问该地址还应当询问服务器</li>\n<li>303: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li>\n<li>304: 重定向到本地, 也就是协商缓存</li>\n<li>305: 请求者只能使用代理访问请求的网页, 如果服务器返回此响应, 还表示请求者应使用代理</li>\n<li>307: 临时从定向, 和 302 的区别主要是 307 会保证请求方法不会变化. 对于老的客户端, 302 可能会将原来的请求方法转化为 GET 并进行请求. 但是 307 就能保证原来的请求方式和其数据不变</li>\n</ul>\n<h3 id=\"4xx-表示请求错误\"><a href=\"#4xx-表示请求错误\" class=\"headerlink\" title=\"4xx 表示请求错误\"></a>4xx 表示请求错误</h3><ul>\n<li>400: 请求错误, 主要是请求参数错误. 没有通过后端的校验</li>\n<li>401: 未授权, 没有登录的时候不能访问用户数据</li>\n<li>403: 禁止访问, 比方说在外网环境下访问公司内部系统</li>\n<li>404: 找不到对象, 哈哈哈哈</li>\n<li>405: 方法禁用, 我这个请求只能用 POST 你用 GET 太气人了</li>\n<li>415: 请求内容过长, GET 请求参数过长问题. 想当初我可是把百家号的诊断接口搞挂了 ~</li>\n</ul>\n<h3 id=\"5xx-服务器错误\"><a href=\"#5xx-服务器错误\" class=\"headerlink\" title=\"5xx 服务器错误\"></a>5xx 服务器错误</h3><ul>\n<li>500: 服务器内部错误</li>\n<li>502: 错误网关, 一般是重启 nginx 的时候会报这个</li>\n<li>503: 服务不可用, 目前排队过多或者服务挂掉了</li>\n<li>504: 网关超时, 请求还没有到业务服务器就超时了</li>\n</ul>\n<h2 id=\"常见状态码的用处\"><a href=\"#常见状态码的用处\" class=\"headerlink\" title=\"常见状态码的用处\"></a>常见状态码的用处</h2><ul>\n<li>100: 客户端在发送POST数据给服务器前, 征询服务器情况, 看服务器是否处理POST的数据, 如果不处理, 客户端则不上传POST数据, 如果处理, 则POST上传数据. 常用于POST大数据传输</li>\n<li>206: 一般用来做断点续传, 或者是视频文件等大文件的加载</li>\n<li>301: 永久重定向会缓存. 新域名替换旧域名, 旧的域名不再使用时, 用户访问旧域名时用301就重定向到新的域名</li>\n<li>302: 临时重定向不会缓存, 常用 于未登陆的用户访问用户中心重定向到登录页面</li>\n<li>304: 协商缓存, 告诉客户端有缓存, 直接使用缓存中的数据, 返回页面的只有头部信息, 是没有内容部分</li>\n<li>400: 参数有误, 请求无法被服务器识别</li>\n<li>403: 告诉客户端进制访问该站点或者资源, 如在外网环境下, 然后访问只有内网IP才能访问的时候则返回</li>\n<li>404: 服务器找不到资源时, 或者服务器拒绝请求又不想说明理由时</li>\n<li>503: 服务器停机维护时, 主动用503响应请求或 nginx 设置限速, 超过限速, 会返回503</li>\n<li>504: 网关超时</li>\n</ul>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"OSI 七层模型","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/OSI%20%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/","content":"<p>OSI(Open System Interconnect) 模型全称为开放式系统互联参考模型,  是国际化标准组织(ISO)提出的一个试图使各种计算机在世界范围内互连为网络的标准框架<br>OSI 将计算机网络体系结构划分为七层, 每一层实现各自的功能和协议. 并完成与相邻接口的通信. 分工明确每一层扮演固定的角色互不打扰…</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-19-32-10.png\" alt=\"OSI 七层模型\"></p>\n<ol>\n<li>应用层位于 OSI 参考模型的第七层, 也是直接为应用程序服务的一层. 其作用是通过与应用程序间的交互来完成特定的网络任务. 该层协议定义了应用进程之间的交互规则, 通过不同的应用层协议为不同的网络应用提供服务. 例如域名解析系统 DNS, 万维网的 HTTP 协议, 电子邮件系统的 SMTP 协议等等.</li>\n<li>表示层主要进行数据的压缩数据加密以及数据描述, 使得应用程序无需担心各个平台计算机中数据表示和存储方式的差异</li>\n<li>会话层负责创建, 管理和维护会话, 该层提供了数据交换的定界和同步功能, 包括简历检查点和恢复方案的方法</li>\n<li>传输层主要负责建立管理和维护端到端的链接, 连接两台电脑的媒介. 并负责处理数据包错误, 数据包次序等传输相关问题, 向上屏蔽了下层数据通信的细节. 主要的传输层协议是 TCP 和 UDP</li>\n<li>网络层主要负责 IP 选址和路由的选择, 连接两台电脑的通信链路往往不止一条, 传输的信息可能要经过很多通信子网. 网络层的主要任务就是选择合适的网间路由和交换节点, 确保数据能够按时发送. 由于在网络层使用的协议是无连接的网际协议(Internet Protocol)和路由协议, 因此网络层也简称为 IP 层</li>\n<li>数据链路层也叫链路层提供介质访问和链路管理, 两台主机之间的通信并不是直接的 one by one, 而是要经历各种节点, 诸如代理服务器. 各个节点之间相互链接便构成了数据链路层.</li>\n<li>物理层就是网线, 一拔就断网了. 不信你试试</li>\n</ol>\n<h2 id=\"7-层模型数据流转过程\"><a href=\"#7-层模型数据流转过程\" class=\"headerlink\" title=\"7 层模型数据流转过程\"></a>7 层模型数据流转过程</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-19-33-50.png\" alt=\"数据在 OSI 模型中的流转过程\"></p>\n<ol>\n<li>应用层报文被传送到运输层</li>\n<li>在最简单的情况下, 运输层收取到报文并附上附加信息, 该首部将被接收端的运输层使用</li>\n<li>应用层报文和运输层首部信息一道构成了运输层报文段. 附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息. 该信息让接收端能够判断报文中的比特是否在途中已被改变</li>\n<li>运输层则向网络层传递该报文段, 网络层增加了如源和目的端系统地址等网络层首部信息, 生成了网络层数据报</li>\n<li>网络层数据报接下来被传递给链路层, 在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧</li>\n<li>在物理层数据帧被封装成比特流, 之后通过传输介质传送到对端</li>\n<li>对端再一步步解开封装, 获取到传送的数据</li>\n</ol>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"http vs https","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/http%20vs%20https/","content":"<h2 id=\"什么是-http-x2F-https\"><a href=\"#什么是-http-x2F-https\" class=\"headerlink\" title=\"什么是 http &#x2F; https\"></a>什么是 http &#x2F; https</h2><p>http(HyperText Transfer Protocol), 超文本传输协议, 是实现网络通信的一种规范.<br>作为一种传输协议, 即将数据由 A 传递给 B, 再由 B 传递给 A. A &#x2F; B 之间可能存在很多第三方代理: A&lt;&#x3D;&gt;X&lt;&#x3D;&gt;Y&lt;&#x3D;&gt;Z&lt;&#x3D;&gt;B. 传输的数据也不是计算机底层的二进制, 而是完整的, 有意义的数据. 如 html css js 图片等超文本. 能够被上层应用识别</p>\n<span id=\"more\"></span>\n\n<h2 id=\"http-的特点\"><a href=\"#http-的特点\" class=\"headerlink\" title=\"http 的特点\"></a>http 的特点</h2><ol>\n<li>支持客户 &#x2F; 服务模式</li>\n<li>简单快速: 客户向服务发送请求时, 只需要请求方法和路径. 由于协议简单使得 HTTP 服务程序规模小, 进而通信速度快.</li>\n<li>灵活: http 允许传输任何类型的数据对象, 通过 Content-Type 进行标记</li>\n<li>无状态: http 协议无法根据之前的状态对本次请求进行处理</li>\n</ol>\n<h2 id=\"https-概念\"><a href=\"#https-概念\" class=\"headerlink\" title=\"https 概念\"></a>https 概念</h2><p>由于 http 传递信息的过程中以明文的方式传输, 存在泄露的风险. 于是基于 http + ssl&#x2F;tls 的 https 诞生了.</p>\n<h2 id=\"https-工作流程\"><a href=\"#https-工作流程\" class=\"headerlink\" title=\"https 工作流程\"></a>https 工作流程</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-18-53-20.png\" alt=\"2021-12-09-18-53-20\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-18-54-04.png\" alt=\"2021-12-09-18-54-04\"></p>\n<ol>\n<li>首先客户端通过 url 向服务端请求建立 https 链接</li>\n<li>服务端收到请求后会将其支持的证书信息(包含公钥)传递给客户端</li>\n<li>客户端和服务器协商 ssl 链接的安全等级, 也就是信息加密的等级</li>\n<li>客户端根据双方协商的安全等级建立会话秘钥, 然后利用服务器返回的公钥对秘钥进行加密并上传给服务器</li>\n<li>服务器利用自己的私钥解密出会话秘钥</li>\n<li>两端利用会话秘钥加密彼此间的通信内容, 由于中间商无法得知两者约定的秘钥, 所以无法获知两者之间传递的内容</li>\n</ol>\n<h2 id=\"http-和-https-的区别\"><a href=\"#http-和-https-的区别\" class=\"headerlink\" title=\"http 和 https 的区别\"></a>http 和 https 的区别</h2><ol>\n<li>https 是 http 协议的安全版本, 相对于 http 的明文传递 http 添加了 ssl&#x2F;tls 加密. 相对更安全</li>\n<li>两者默认端口也不一样 http: 80 https: 443</li>\n<li>Https 通信的过程中设计到加密以及握手, 性能略输于 http</li>\n<li>https 需要 ssl, ssl 证书需要花钱, 功能越强的证书往往越贵</li>\n</ol>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"TCP/IP","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/TCP#IP/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>TCP&#x2F;IP, 传输控制协议&#x2F;网际协议, 是指能够在多个不同网络间实现信息传输的协议簇. TCP 是一种面向链接的, 可靠的, 基于字节流的传输层通信协议.IP 是用于封包和交换数据的网络协议.</p>\n<p>TCP&#x2F;IP 协议不仅仅是只 TCP 和 IP 两个协议, 而是指一个由FTP, SMTP, TCP, UDP, IP 等协议构成的协议簇. 只是因为 TCP 和 IP 协议最牛逼, 具有代表性. 所以通常成为 TCP&#x2F;IP 协议簇</p>\n<span id=\"more\"></span>\n\n<h2 id=\"五层-or-四层体系\"><a href=\"#五层-or-四层体系\" class=\"headerlink\" title=\"五层 or 四层体系\"></a>五层 or 四层体系</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-19-40-52.png\" alt=\"五层 or 四层体系\"></p>\n<h3 id=\"五层体系\"><a href=\"#五层体系\" class=\"headerlink\" title=\"五层体系\"></a>五层体系</h3><ol>\n<li>应用层, <code>TCP/IP</code> 模型将 <code>OSI</code> 参考模型中的会话层, 表示层和应用层合并到一起作为了应用层. 通过不同的应用层协议为不同的网络应用提供服务. 如: FTP, Telnet, DNS, SMTP 等</li>\n<li>传输层, 对应 OSI 参考模型的传输层, 为上层提供了端到端的通信功能. 传输层协议主要有 TCP 和 UDP. 其中面向链接的 TCP 协议保证了数据传输的可靠性, 面向无链接的 UDP 协议能够实现数据包简单, 快速的传输.</li>\n<li>网络层, 负责为分组网络中的不同主机提供通信服务. 并通过选择合适的路由将数据传递到目标主机.</li>\n<li>数据链路层, 在两个相邻的节点传输数据时, 将网络层提交下来的 IP 数据报组装成帧. 在两个相邻节点之间的链路上传送帧</li>\n<li>物理层, 还是网线</li>\n</ol>\n<h3 id=\"四层体系\"><a href=\"#四层体系\" class=\"headerlink\" title=\"四层体系\"></a>四层体系</h3><table>\n<thead>\n<tr>\n<th>层次名称</th>\n<th>功能</th>\n<th>常用协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>负责实现应用程序相关的功能</td>\n<td>FTP: 文本传输协议<br> HTTP: 超文本传输协议<br> DNS: 域名服务器<br> SMTP: 简单邮件传输协议<br> NFS: 网络文件系统协议</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>负责提供可靠的文件传输服务</td>\n<td>TCP UDP</td>\n</tr>\n<tr>\n<td>网际网络层</td>\n<td>负责网络间的寻址数据传输</td>\n<td>IP: 网际协议<br> ICMP: 网际控制消息协议<br> ARP: 地址解析协议<br> RARP: 反向地址解析协议</td>\n</tr>\n<tr>\n<td>网络接口层</td>\n<td>负责实际数据的传输</td>\n<td>HDLC: 高级链路控制协议<br> PPP: 点对点协议<br>SLIP: 串行线路接口协议</td>\n</tr>\n</tbody></table>\n<h2 id=\"三种模型的对应关系\"><a href=\"#三种模型的对应关系\" class=\"headerlink\" title=\"三种模型的对应关系\"></a>三种模型的对应关系</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-20-25-31.png\" alt=\"三种模型的对应关系\"></p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>两者都采取了层次结构</li>\n<li>都能够提供面向连接和无连接两种通信服务</li>\n</ol>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ol>\n<li>OSI 采用的是七层模型, TCP&#x2F;IP是四层 or 五层结构</li>\n<li>TCP&#x2F;IP 没有对网络接口层进行区分, 只是做了一些概念性描述. OSI 参考模型对服务和协议做了明确细分</li>\n<li>OSI 参考模型虽然网络划分为七层, 但实现起来较困难。TCP&#x2F;IP 参考模型作为一种简化的分层结构是可以的</li>\n<li>TCP&#x2F;IP协议去掉表示层和会话层的原因在于会话层, 表示层, 应用层都是在应用程序内部实现的, 最终产出的是一个应用数据包, 而应用程序之间是几乎无法实现代码的抽象共享的, 这也就造成 OSI 设想中的应用程序维度的分层是无法实现的</li>\n</ol>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"如何理解 TCP 和 UDP","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%20TCP%20%E5%92%8C%20UDP/","content":"<h2 id=\"UDP-的概念\"><a href=\"#UDP-的概念\" class=\"headerlink\" title=\"UDP 的概念\"></a>UDP 的概念</h2><p>UDP, 用户数据包协议. 是一种简单的面向数据包的协议. 即对会话层提交下来的报文不合并, 不拆分. 只是在其上边添加了首部就直接交给了下层的网络层. 也就是说无论应用层交给 UDP 多长的报文, 它统统发送. 一次发送一个报文. 对于接收方也是不管收到多长的 UDP 报文都是直接去除首部后交给上层的应用层.<br>UDP 报头包括 4 个字段, 每个字段占用 2 个字节（即 16 个二进制位）, 标题短, 开销小</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-18-54-35.png\" alt=\"2021-12-09-18-54-35\"></p>\n<h2 id=\"UDP-特点\"><a href=\"#UDP-特点\" class=\"headerlink\" title=\"UDP 特点\"></a>UDP 特点</h2><ol>\n<li>UDP 不提供复杂的控制机制, 利用 IP 提供面向无连接的通信服务</li>\n<li>传输过程中出现丢包 UDP 不负责重发</li>\n<li>当多个包到达顺序出现错乱时, UDP 不具备纠正功能</li>\n<li>由于 UDP 接收到应用层发来的数据后立即就会发送到下层网络层, 即便是当前网络层处于拥塞状态, UDP 也无法进行流量控制来避免网络拥塞</li>\n</ol>\n<h2 id=\"TCP-的概念\"><a href=\"#TCP-的概念\" class=\"headerlink\" title=\"TCP 的概念\"></a>TCP 的概念</h2><p>TCP, 传输控制协议. 是一种可靠的面向字节流的通信协议. 他会把上层应用层提交下来的数据看成无结构的字节流来发送给网络层. 发送方 TCP 会将数据放入缓冲区, 等到可以发送的时候在发送不能发送时候就排队等着. 可以根据当前的网络情况来确定每个报文段的大小, 此处由于 UDP 的一把梭策略. TCP 的报文首部有 20 个字节, 额外开销大于 UDP 的 8 字节</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-18-54-46.png\" alt=\"2021-12-09-18-54-46\"></p>\n<h2 id=\"TCP-的特点\"><a href=\"#TCP-的特点\" class=\"headerlink\" title=\"TCP 的特点\"></a>TCP 的特点</h2><ol>\n<li>充分实现了数据传输时的控制功能, 可以进行丢包时重发的机制. 还可以对次序乱掉的分包进行排序</li>\n<li>作为一种面向有链接的协议, 只有在确认接收方存在时才会发送数据. 从而可以控制通信流量的浪费</li>\n<li>通过检验和, 序列号, 确认应答, 重发控制, 连接管理等机制保证了通信的稳定性好可靠性. 🤔</li>\n</ol>\n<h2 id=\"TCP-和-UDP-的区别\"><a href=\"#TCP-和-UDP-的区别\" class=\"headerlink\" title=\"TCP 和 UDP 的区别\"></a>TCP 和 UDP 的区别</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-18-59-29.png\" alt=\"2021-12-09-18-59-29\"></p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-19-00-09.png\" alt=\"2021-12-09-19-00-09\"></p>\n<ol>\n<li>TCP 是面向链接的协议, 建立连接 3 次握手. 断开链接 4 次挥手. UDP 面向无链接, 数据传输过程中不会创建链接. 发送端只负责发送数据到网络层. 接收端负责从消息队列中读取</li>\n<li>TCP 提供可靠的服务, 传输过程中采用流量控制, 编号与确认, 计时器等手段保证数据传输没有差错. UDP 则尽可能传输数据, 但是不保证能够稳定传输给接收方</li>\n<li>TCP 面向字节流, 会将应用层报文处理成一串无结构的字节流, 分解为多段 TCP 报文段传输后在接收方重新装配. UDP 面向报文, 不进行报文的拆分. 只保留报文边界一次发送一个报文. 接收方接收到数据后去除报文首部直接原封不动的上交给应用层</li>\n<li>TCP 只能做点对点的全双工通信, UDP 支持 一对一, 一对多, 多对一, 多对多的交互通信</li>\n</ol>\n<h2 id=\"TCP-x2F-UDP-主要使用场景\"><a href=\"#TCP-x2F-UDP-主要使用场景\" class=\"headerlink\" title=\"TCP&#x2F;UDP 主要使用场景\"></a>TCP&#x2F;UDP 主要使用场景</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-09-19-00-53.png\" alt=\"2021-12-09-19-00-53\"></p>\n","categories":["面试","网络"],"tags":["面试"]},{"title":"TCP 连接为什么要经历 3 次握手 4 次挥手","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/TCP%20%E8%BF%9E%E6%8E%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BB%8F%E5%8E%86%203%20%E6%AC%A1%E6%8F%A1%E6%89%8B%204%20%E6%AC%A1%E6%8C%A5%E6%89%8B/","content":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>三次握手, 其实就是说创建一个客户端到服务器TCP链接需要发送的三个包. 主要作用就是确认通信双方的接收能力和发送能力是否正常, 并指定初始化序列号为后续的传输做准备.</p>\n<h3 id=\"三次握手过程\"><a href=\"#三次握手过程\" class=\"headerlink\" title=\"三次握手过程\"></a>三次握手过程</h3><ol>\n<li>第一次握手, 客户端给服务端发一个 SYN 报文, 并指明客户端初始状态的序列号 ISN(c), 此时的客户端处于 SYN_SENT 状态. 服务端接收到此次握手后能确认客户端的发送和服务端的接收功能没有问题.</li>\n<li>第二次握手, 服务端收到客户端的 SYN 报文之后, 会以自己的 SYN 报文作为回答. 同时为了告诉客户端自己收到了他的第一次握手信息. 将客户端的 ISN 值 + 1 作为 ack 返回给客户端, 此时服务端处于 SYN_RCVD 状态, 此时客户端可以明确, 客户端 &#x2F; 服务单, 发送 &#x2F; 接收功能都正常, 但是此时服务端不知道客户端接收信息能力如何.</li>\n<li>第三次握手, 客户端收到 SYN 报文之后, 会发送一个 ACK 报文, 值为服务端的 ISN + 1, 此时客户端处于 ESTABLISHED 状态. 当服务器收到 ACK 报文之后也会进入 ESTABLISHED 状态. 至此服务端确定了客户端发送, 接收信息功能正常, 链接建立成功.</li>\n</ol>\n<span id=\"more\"></span>\n\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-30-39.png\" alt=\"TCP 三次握手\"></p>\n<h3 id=\"三次握手作用\"><a href=\"#三次握手作用\" class=\"headerlink\" title=\"三次握手作用\"></a>三次握手作用</h3><p>通过三次握手, 客户端 &#x2F; 服务端双方都能确认对方信息传输能力正常可以进行通信</p>\n<h3 id=\"为什么不能两次握手\"><a href=\"#为什么不能两次握手\" class=\"headerlink\" title=\"为什么不能两次握手\"></a>为什么不能两次握手</h3><p>根据上述的作用分析, 如果仅有两次握手, 客户端能知道自己发送的信息服务端能收到, 服务端回复的消息自己也能收到. 但是服务端只能知道客户端发送的信息自己可以正常接收, 但是不能确定自己发送的消息客户端是否能正常接收</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p>想要终止一个链接, 需要客户端 &#x2F; 服务端四次挥手的过程</p>\n<h3 id=\"四次挥手过程\"><a href=\"#四次挥手过程\" class=\"headerlink\" title=\"四次挥手过程\"></a>四次挥手过程</h3><ol>\n<li>第一次挥手, 客户端发送一个 FIN 报文, 报文中会指定一个序列号. 此时客户端进入 FIN_WAIT1 状态并停止发送数据. 待服务端回应</li>\n<li>第二次挥手, 服务端接收到客户端 FIN 报文之后会回复 ACK 报文, 并把客户端 FIN 报文序列号 +1 作为回复的 ACK 报文序号值, 告知客户端已经收到断开链接的请求, 服务端进入 CLOSE_WAIT 的状态. 此时服务端并不会直接断开链接, 而是等待服务器所有的响应返回完毕后, 进行第三次挥手.</li>\n<li>第三次挥手, 需要响应的数据响应完成, 服务端会给客户端发起一次 FIN 报文, 并且指定序列号. 服务器进入 LAST_ACK 状态</li>\n<li>第四次挥手, 客户端接收到服务端发来的 FIN 后, 返回给他一个 ACK 报文作为应答, 并把服务端 FIN 报文的序列号+1 作为 ACK 报文的序列号. 此时客户端进入 TIME_WAIT 状态, 待确保服务端收到自己回应的 ACK 报文后断开链接进入 CCLOSED 状态, 服务端收到 ACK 报回应后也就关闭了链接. 进入 CLOSED 状态了</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-33-01.png\" alt=\"四次挥手\"></p>\n<h2 id=\"一次完整的会话\"><a href=\"#一次完整的会话\" class=\"headerlink\" title=\"一次完整的会话\"></a>一次完整的会话</h2><p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-34-17.png\" alt=\"一次完整的会话示意图\"></p>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"CSS度量单位并解释其含义","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/CSS%E5%BA%A6%E9%87%8F%E5%8D%95%E4%BD%8D%E5%B9%B6%E8%A7%A3%E9%87%8A%E5%85%B6%E5%90%AB%E4%B9%89/","content":"<h2 id=\"相对单位\"><a href=\"#相对单位\" class=\"headerlink\" title=\"相对单位\"></a>相对单位</h2><ul>\n<li>px</li>\n<li>em</li>\n<li>rem</li>\n<li>ex</li>\n<li>%</li>\n</ul>\n<h2 id=\"绝对单位\"><a href=\"#绝对单位\" class=\"headerlink\" title=\"绝对单位\"></a>绝对单位</h2><ul>\n<li>cm</li>\n<li>pt</li>\n<li>in</li>\n<li>pc</li>\n<li>mm</li>\n</ul>\n<h2 id=\"具体含义\"><a href=\"#具体含义\" class=\"headerlink\" title=\"具体含义\"></a>具体含义</h2><h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>像素(Pixel). 是屏幕上显示数据的最基本的点. windows 用户使用的分辨率一般为 96 像素&#x2F;英寸, mac 用户使用的分辨率一般为 72 像素&#x2F;英寸</p>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>相对于当前元素内文本的字体尺寸, 如果当前元素内文本尺寸没有人为设置, 则相对于浏览器默认的字体尺寸, 1em &#x3D;&#x3D;&#x3D; 100% 可以结合 css 的继承关系使用. 具有灵活性</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>相对于根元素(html 元素)内文本的字体尺寸, 如果当前元素内文本尺寸没有人为设置, 则相对于浏览器默认的字体尺寸</p>\n<h3 id=\"ex\"><a href=\"#ex\" class=\"headerlink\" title=\"ex\"></a>ex</h3><p>相对于 “x” 的高度, 此高度通常为字体高度的一半</p>\n<h3 id=\"pt\"><a href=\"#pt\" class=\"headerlink\" title=\"pt\"></a>pt</h3><p>点(Point), 印刷行业常用单位. 等于1&#x2F;72英寸</p>\n<p>1in &#x3D; 2.54cm &#x3D; 25.4mm &#x3D; 72pt &#x3D; 6pc</p>\n<h3 id=\"pc\"><a href=\"#pc\" class=\"headerlink\" title=\"pc\"></a>pc</h3><p>派卡(Pica), 相当于新四号铅字的尺寸</p>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><p>英寸(Inch)</p>\n<h3 id=\"mm\"><a href=\"#mm\" class=\"headerlink\" title=\"mm\"></a>mm</h3><p>毫米(Millimeter)</p>\n<h3 id=\"cm\"><a href=\"#cm\" class=\"headerlink\" title=\"cm\"></a>cm</h3><p>厘米(Centimeter)</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>px 是一个点, 不是自然界的长度单位, 可以画的很小也可以画的很大. 如果点很小, 那么画面就清晰, 我们称之为 “分辨率高”. 反之, 就是 “分辨率低”. 像素点的大小是会变的, 因此被称为相对长度单位.</p>\n<p>pt 就是 point, 大小相当于 1&#x2F;72 英寸. 他是一个符合自然界标准的长度单位, 也称为”绝对长度”</p>\n","categories":["面试","css"],"tags":["面试"]},{"title":"输入 URL敲下回车发生了什么","url":"/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C/%E8%BE%93%E5%85%A5%20URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/","content":"<ol>\n<li>URL 解析, 首先浏览器会解析你渐入的 url 是否为一个合法的 url, 包含 协议, 域名, 端口, 路径, 查询字符串, 锚点哈希等信息…</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-24-55.png\" alt=\"URL 解析示意图\"></p>\n<ol start=\"2\">\n<li>DNS 查询, 通过 DNS 查询找到目标服务器的 ip 地址</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-25-28.png\" alt=\"DNS 查询过程\"></p>\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li>TCP 连接, 经过三次握手创建 TCP 链接</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-25-51.png\" alt=\"TCP 链接\"></p>\n<ol start=\"4\">\n<li>HTTP 请求, 建立 tcp 链接完成后便开始发送 http 请求了, 请求内容包含请求行, 请求头, 请求体. 所以本质上 get 和 post 是一样的</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-26-17.png\" alt=\"发送 http 请求\"></p>\n<ol start=\"5\">\n<li>响应请求, 服务器接收请求并处理后返回响应信息, 包含状态行, 响应头, 和响应正文</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-26-28.png\" alt=\"接收服务端返回的响应\"></p>\n<ol start=\"6\">\n<li>页面渲染, 浏览器对返回的响应内容进行解析. 具体步骤为:<ul>\n<li>解析 html 构建 DOM 树</li>\n<li>解析 css 构建 CSSOM 树</li>\n<li>DOM 树和 CSSOM 树合并, 生成 render(渲染)树</li>\n<li>布局 render 树, 计算元素尺寸和位置</li>\n<li>绘制 render 树, 绘制像素级信息</li>\n<li>通过 GPU 展示内容到屏幕上, 具体实现过程如下图:</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://handle-note-img.niubishanshan.top/2021-12-10-10-27-09.png\" alt=\"浏览器渲染过程示意图\"></p>\n","categories":["面试","网络"],"tags":["网络"]},{"title":"css 常见问题","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/css%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","content":"<p>元素包含内容 content, 内边距 padding, 边框 border, 外边距 margin</p>\n<p>盒模型属性值包含 content-box, border-box, inherit 区别如下</p>\n<ul>\n<li>content-box: 总宽度 &#x3D; margin + border + padding + width, 也就是标准盒模型</li>\n<li>border-box: 总宽度 &#x3D; margin + width, 传说中的 ie 盒模型也叫怪异盒模型</li>\n<li>inherit: 继承父级的盒模型</li>\n</ul>\n<h2 id=\"DOM-Tree-与-Render-Tree-之间的区别是什么\"><a href=\"#DOM-Tree-与-Render-Tree-之间的区别是什么\" class=\"headerlink\" title=\"DOM Tree 与 Render Tree 之间的区别是什么\"></a>DOM Tree 与 Render Tree 之间的区别是什么</h2><p>DOM Tree: 包含了所有的 HTML 标签, 包括 display: none 的元素, JS动态添加的元素等.<br>Render Tree: DOM Tree 和样式结构体结合后构建呈现 Render Tree. Render Tree 能识别样式, 每个 node 都有自己的style, 且不包含隐藏的节点(display: none)</p>\n<h2 id=\"CSS-权重列表\"><a href=\"#CSS-权重列表\" class=\"headerlink\" title=\"CSS 权重列表\"></a>CSS 权重列表</h2><table>\n<thead>\n<tr>\n<th>权重</th>\n<th>选择器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10000</td>\n<td>!important</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>内联样式</td>\n</tr>\n<tr>\n<td>100</td>\n<td>id 选择器</td>\n</tr>\n<tr>\n<td>10</td>\n<td>类 &#x2F; 伪类 &#x2F; 属性选择器</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标签 &#x2F; 伪元素选择器</td>\n</tr>\n<tr>\n<td>0</td>\n<td>通用选择器 * &#x2F; 子选择器 &gt; &#x2F; 相邻选择器 + &#x2F; 同胞选择器 ~</td>\n</tr>\n</tbody></table>\n<h2 id=\"垂水居中\"><a href=\"#垂水居中\" class=\"headerlink\" title=\"垂水居中\"></a>垂水居中</h2><ol>\n<li>绝对定位 + 位置偏移<br> a. 已知尺寸左上 margin: -(尺寸一半)<br> b. 未知尺寸 translate: (-50%, -50%, 0)</li>\n<li>flex 布局</li>\n<li>tabel 布局<br> 父元素:<br> display: table-cell;<br> vertical-align: middle;  &#x2F;&#x2F; 垂直居中<br> text-align: center;     &#x2F;&#x2F; 水平居中</li>\n</ol>\n<h2 id=\"margin-塌陷的解决办法\"><a href=\"#margin-塌陷的解决办法\" class=\"headerlink\" title=\"margin 塌陷的解决办法\"></a>margin 塌陷的解决办法</h2><p>当盒子在垂直方向设置 margin 时会存在塌陷情况, 解决方案如下:</p>\n<ol>\n<li>给父级添加 border</li>\n<li>给父盒子添加 padding-top</li>\n<li>给父盒子添加 overflow: hidden</li>\n<li>父盒子 position: fixed</li>\n<li>父盒子 display: table</li>\n<li>在子元素的前边添加一个兄弟元素并设置属性为 content: ‘’; overflow: hidden;</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"三栏布局","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/","content":"<ol>\n<li>浮动布局, 两端分别设置 float: left | float: right</li>\n<li>绝对定位布局, 三个盒子分别设置绝对定位</li>\n<li>flex布局, 两边盒子设置宽度, 中间盒子设置flex: 1 实现宽度自适应</li>\n<li>table 布局, 父级盒子设置 display: table, 三个子盒子分别设置 display: table-cell. 然后左右两个盒子分别设置宽度即可</li>\n<li>网格布局,\t父级盒子设置 display: grid; grid-template-columns: 300px auto 300px;</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"display none vs visibility hidden","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/display:%20none%20vs%20visibility:%20hidden/","content":"<ol>\n<li>Display: none 会让元素从渲染树中消失, 不占据任何空间.  visibility: hidden 不会让元素消失, 仍然占据渲染空间只是内容不可见</li>\n<li>Display: none 是非继承属性, 子孙节点的不可见原因为父节点没有在渲染树中渲染导致.  visibility: hidden 是继承属性, 子孙属性的不可见是由于继承了父级的 hidden. 如果设置  visibility: visible 仍然可以展示出来</li>\n<li>修改 display 属性会触发子组件的回流而修改 visibility: hidden只会触发子组件的重绘</li>\n<li>读屏器会读取  visibility: hidden的内容, 但是无法读取 display: none 的元素</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"伪类 or 伪元素","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E4%BC%AA%E7%B1%BB%20or%20%E4%BC%AA%E5%85%83%E7%B4%A0/","content":"<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><p>伪类就是用来选择 DOM 树之外的信息, 以及不能够被普通选择器选择的元素并进一步为之添加选择器的特殊效果的选择器. 常见伪类选择器有: hover, active, visited, first-child 等等. 由于元素的状态是动态变化而非静态的.所以元素达到特定的状态时, 他可以命中一个伪类选择器. 当特定状态消失后便不再能够匹配到该伪类. 对应的样式也会消失. 看上去其功能和 class 类似. 但是他又是文档之外的抽象, 在 html 文档中并没有 class 指明.所以叫伪类</p>\n<span id=\"more\"></span>\n\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><p>伪元素主要是只 DOM 🌲中没有定义的虚拟元素其主要功能就是添加不存在与文档流中的元素. 比如 :before 和 :after 分别表示元素内容之前和之后的内容. 伪元素的内容和普通元素没啥差别, 但是他们并不存在于文档中. 故称之为伪元素.</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"表示方法不同\"><a href=\"#表示方法不同\" class=\"headerlink\" title=\"表示方法不同\"></a>表示方法不同</h3><ol>\n<li>css 2 中的伪类&#x2F;伪元素都是用单 :  表示</li>\n<li>Css 3 规定伪类用单 : 表示, 伪元素用双 :: 表示. 为了兼容性考虑 css 2 中已经存在的伪元素也可以使用单 : 语法. Css 3 新增的伪元素, 应该使用双 : 语法(如::selection).</li>\n</ol>\n<h3 id=\"定义不同\"><a href=\"#定义不同\" class=\"headerlink\" title=\"定义不同\"></a>定义不同</h3><ol>\n<li>伪类就是虚假的类, 虽然没有写在 html 中但是可以选中对应的 html 元素</li>\n<li>伪元素就是虚假的元素, 通过 CSS 向 html 中添加虚假的元素. 保证了 html 文档简洁的同时实现效果.</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>伪类和伪元素都是文档树之外的内容</li>\n<li>伪类用 : 表示, 伪元素用 :: 表示</li>\n<li>区分伪类和伪元素, 主要看如果没有它是否需要添加真元素才能实现效果</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"css属性position都有哪些值","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/css%E5%B1%9E%E6%80%A7position%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC/","content":"<ul>\n<li>absolute 绝对定位</li>\n<li>relative 相对定位</li>\n<li>fixed 固定定位</li>\n<li>static 默认值, 没有定位</li>\n<li>inherit 继承父级定位方式</li>\n<li>initial 设置该属性为默认值</li>\n<li>sticky 黏性定位</li>\n</ul>\n","categories":["面试","css"],"tags":["面试"]},{"title":"实现元素固定宽高比","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E6%AF%94/","content":"<h2 id=\"利用固定比例图片撑开\"><a href=\"#利用固定比例图片撑开\" class=\"headerlink\" title=\"利用固定比例图片撑开\"></a>利用固定比例图片撑开</h2><blockquote>\n<p>众所周知, 如果只给 img 元素设置 width or height 中的一个属性, 剩下的尺寸属性默认会根据图片的尺寸进行等比缩放. 然后利用图片的尺寸再撑起容器. 获得的容器大小应该就是和图片的宽高比一致的啦 ~</p>\n</blockquote>\n<p>代码实现如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"comment\">/* 设置 font-size: 0; 的主要原因是: img 标签两侧的空白字符也可能会占据高度 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./4-3.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"利用元素内边距撑开元素\"><a href=\"#利用元素内边距撑开元素\" class=\"headerlink\" title=\"利用元素内边距撑开元素\"></a>利用元素内边距撑开元素</h2><blockquote>\n<p>垂直方向上的内外边距使用百分比做单位时, 是基于包含块的宽度来计算的.</p>\n</blockquote>\n<p>也就是说, 当元素的 padding-top or padding-bottom 使用了百分比的值的时候, 其依据的值为元素的宽度. 那么我们可以直接通过设置纵向的内边距实现等比的效果</p>\n<p>实现代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding-top</span>: <span class=\"number\">20%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: aqua;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"aspect-ratio-属性指定元素宽高比\"><a href=\"#aspect-ratio-属性指定元素宽高比\" class=\"headerlink\" title=\"aspect-ratio 属性指定元素宽高比\"></a>aspect-ratio 属性指定元素宽高比</h2><blockquote>\n<p>The aspect-ratio  CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.</p>\n</blockquote>\n<p>aspect-ratio 应该算是 css 4 的新特性吧, 可以指定元素的宽高比. 实现此类需求更加的方便</p>\n<p>具体的设置代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            aspect-ratio: <span class=\"number\">3</span> / <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: aqua;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["面试","css"],"tags":["面试"]},{"title":"移除inline-block间隙的方法","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E7%A7%BB%E9%99%A4inline-block%E9%97%B4%E9%9A%99%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<p>由于编写代码的时候难免会有间隔设置为 inline-block 的元素就会出现间隔, 解决方法有以下几种:</p>\n<ol>\n<li>去掉元素之间的空格, 所有的代码都紧挨着写</li>\n<li>利用 html 注释, 所有边间质检的空隙都用注释填充</li>\n<li>取消标签闭合, 这样空隙的部分就算到标签里边了. 经过我的测试子元素是 a 标签的时候是好使的. 但是 span 标签 GG 了<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">a</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>你好</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>我的间距不见了</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>哈哈哈, 气不气</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>在父容器设置 font-size: 0; 也可以实现不展示间隔</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"重绘和回流","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/","content":"<h2 id=\"回流-重排\"><a href=\"#回流-重排\" class=\"headerlink\" title=\"回流 - 重排\"></a>回流 - 重排</h2><p>依据 Dom 渲染的流水线重新渲染 Dom 树, 相当于所有的绘制流程重新走一遍的流程</p>\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>当我们对 DOM 结构修改引起其几何尺寸变化的时候会发生回流过程:</p>\n<ol>\n<li>一个 DOM 的几何属性变化: 常见的几何属性有: width height padding margin border 等等…</li>\n<li>DOM 节点增减或者移动</li>\n<li>读写 offset 族, scroll 族, client 族属性的时候, 浏览器为了读取这些值会进行回流</li>\n<li>调用 getComputedStyle 获取样式的时候也会触发回流</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h2><p>当 render tree 中的一些元素需要更新属性, 而这些属性只是影响元素的外观而不会影响布局时, 元素的几何位置无需更新. 从而省去了构建 DOM 树的过程. 直接进行绘制.</p>\n<h3 id=\"触发条件-1\"><a href=\"#触发条件-1\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>当 Dom 的修改导致了 Dom 样式的变化但是没有影响几何属性的时候就会触发重绘</p>\n<p>由此可见, 重绘不一定回流, 但是回流一定重绘.</p>\n<h2 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h2><p>还有一种情况, 就是直接合成. 如果使用了 transform, opacity, filter 等属性 Gpu 会直接跳过布局和绘制的流程. 直接交给合成线程处理. 好处包括:</p>\n<ol>\n<li>充分发挥 Gpu 的性能优势. 因为 Gpu(显卡) 对于位计算性能优越</li>\n<li>没有占用主线程资源, 即使主线程卡住. 动画效果依然可以流畅展示</li>\n</ol>\n<p>当然这就是传说中的 Gpu 加速啦 ~</p>\n","categories":["面试","css"],"tags":["面试"]},{"title":"冒泡排序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>冒泡排序算法是最慢的排序算法之一, 也是最容易实现的排序算法</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>冒泡排序之所以叫冒泡排序是因为使用这种排序算法排序时, 数据会像气泡一样从数组的一端飘到另一端. 假设正在将一组数字按照升序排列, 较大的值会浮动到数组的右侧, 而较小的值则会浮动到数组的左侧.</p>\n<span id=\"more\"></span>\n\n<p>示例, 给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始的冒泡排序\"><a href=\"#初始的冒泡排序\" class=\"headerlink\" title=\"初始的冒泡排序\"></a>初始的冒泡排序</h2><p>冒泡排序比较任何两个相邻的项, 如果第一个比第二个大, 则交换他们. 元素项向上移动到正确的顺序,就好像气泡升至表面一样, 冒泡排序因此得名.</p>\n<p>根据上述的概念, 推断冒泡排序的代码实现为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">bubbleSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> innerIndex = <span class=\"number\">0</span>; innerIndex &lt; len - <span class=\"number\">1</span>; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[innerIndex] &lt; array[innerIndex + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换两项的数据</span></span><br><span class=\"line\">                <span class=\"title function_\">swap</span>(array, innerIndex, innerIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过冒泡排序执行的过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>详细的对比过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 10</span><br><span class=\"line\">10 0</span><br><span class=\"line\">10 2</span><br><span class=\"line\">10 1</span><br><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">9 0</span><br><span class=\"line\">9 2</span><br><span class=\"line\">9 1</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">0 2</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>最终执行的结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>本步骤中的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/c315a8ff1b50d1f7a1a56f78963c75d810c5ab71\">这里</a></p>\n<h2 id=\"改进的冒泡排序\"><a href=\"#改进的冒泡排序\" class=\"headerlink\" title=\"改进的冒泡排序\"></a>改进的冒泡排序</h2><blockquote>\n<p>在初始的冒泡排序中 9 和 10 两个数字已经比较过, 但是后续的每轮循环都在再重新<a href=\"https://github.com/luoquanquan/learn-fe/commit/67a9d05171a5bd58c43f324e80437cde50409001\">比较一次</a>. 然而这是没必要的…</p>\n</blockquote>\n<p>如果内循环的时候减去外循环已经跑过的轮数(也就是已经确定了位置的数据的个数), 就能避免内循环里的没有必要的比较了~</p>\n<p>改进后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">modifiedBubbleSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> innerIndex = <span class=\"number\">0</span>; innerIndex &lt; len - <span class=\"number\">1</span> - outerIndex; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array[innerIndex], array[innerIndex + <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[innerIndex] &gt; array[innerIndex + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换两项的数据</span></span><br><span class=\"line\">                <span class=\"title function_\">swap</span>(array, innerIndex, innerIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的执行过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>详细的对比过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 10</span><br><span class=\"line\">10 0</span><br><span class=\"line\">10 2</span><br><span class=\"line\">10 1</span><br><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">9 0</span><br><span class=\"line\">9 2</span><br><span class=\"line\">9 1</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">0 2</span><br><span class=\"line\">2 1</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>可以发现, 对比的次数随着外层循环的执行而递减.</p>\n<h2 id=\"对比两种冒泡排序\"><a href=\"#对比两种冒泡排序\" class=\"headerlink\" title=\"对比两种冒泡排序\"></a>对比两种冒泡排序</h2><p>删除除计时以外的 console 启用创建随机数组方法创建一个大数组, 用两种冒泡排序分别处理大数组得到的结果为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bubbleSort: 379.321ms</span><br><span class=\"line\">modifiedBubbleSort: 238.535ms</span><br></pre></td></tr></table></figure>\n\n<p>综上可知, 改进后的冒泡排序性能提升比较明显, <a href=\"https://github.com/luoquanquan/learn-fe/commit/8f5c38cfd997afcf84e2cf4343d629a5c8d2d638\">对比代码</a></p>\n","categories":["学习笔记","数据结构与算法","排序算法"],"tags":["算法"]},{"title":"清除浮动的方法","url":"/%E9%9D%A2%E8%AF%95/css/%E9%9D%A2%E8%AF%95/css/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<ol>\n<li>结尾添加空标签 clear: both</li>\n<li>父级设置高度</li>\n<li>父级设置 display: table</li>\n<li>父级设置 overflow: hidden | auto (同时需要设置 width 或者 zoom &#x3D; 1, 且不能设置 height 靠浏览器自行检测即可)</li>\n<li>父级也设置浮动</li>\n<li>父级元素添加伪元素 :after {clear: both}</li>\n</ol>\n","categories":["面试","css"],"tags":["面试"]},{"title":"快速排序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>快速排序是一种分而治之的算法, 通过递归的方式将数据依次分解为包含较小元素和较大元素的不同子序列.不断重复直到所有的数据都是有序的. 即选择数组中的第一个元素作为记准元素, 数据排序围绕记准元素进行, 小于基准值的元素移动到数组的底部, 大于记准值的移动到数组的顶部.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"数据结构与算法-JavaScript-描述\"><a href=\"#数据结构与算法-JavaScript-描述\" class=\"headerlink\" title=\"数据结构与算法 JavaScript 描述\"></a>数据结构与算法 JavaScript 描述</h3><p>首先, 判断数组的长度是否为 0, 为 0 的话直接返回不做处理. 否则, 选择第一个元素基准值, 并创建两个数组. 一个用于存放小于基准值的元素, 一个用与存放大于基准值的元素.<br>其次, 从第二个元素开始扫描所有元素, 根据他们和基准值的关系把他们放到合适的数组中<br>最后, 重复以上操作, 递归结束时, 把较小数组和较大数组拼接起来并返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">quickSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = array[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>; idx &lt; len; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> curItem = array[idx]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curItem &lt; pivot) &#123;</span><br><span class=\"line\">            left.<span class=\"title function_\">push</span>(curItem)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.<span class=\"title function_\">push</span>(curItem)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">quickSort</span>(left).<span class=\"title function_\">concat</span>(pivot, <span class=\"title function_\">quickSort</span>(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"学习JavaScript数据结构与算法\"><a href=\"#学习JavaScript数据结构与算法\" class=\"headerlink\" title=\"学习JavaScript数据结构与算法\"></a>学习JavaScript数据结构与算法</h3><p>首先, 选择数组的中间元素作为基准值<br>其次, 创建两个下标变量, 左边的下标指像数组的第一个元素, 右边的指向数组的最后一个元素. 移动左下标直到找到第一个比基准值大的元素, 移动右下标直到找到一个比基准值小的元素, 然后交换两者的位置. 重复这个过程, 直到左下标超过了右下标. 这个过程将使得比基准元素小的元素都到基准元素前, 比他大的元素都到基准元素后. 也就是划分操作, 体现分治思想<br>最后, 最基准元素左边的部分元素组成的数组和右边的元素组成的数组递归重复以上操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 划分操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">partition</span> = (<span class=\"params\">array, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = array[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((left + right) / <span class=\"number\">2</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = left, j = right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (array[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">swap</span>(array, i, j)</span><br><span class=\"line\">            i++</span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">qSort</span> = (<span class=\"params\">array, left = <span class=\"number\">0</span>, right = array.length - <span class=\"number\">1</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = <span class=\"title function_\">partition</span>(array, left, right)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">qSort</span>(array, left, index - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">qSort</span>(array, index, right)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>执行的结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">quickSort: 0.295ms</span><br><span class=\"line\">当前时间 1581610074184: debug 的数据是 quickSortedArray:  [ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">qSort: 0.631ms</span><br><span class=\"line\">当前时间 1581610074188: debug 的数据是 qSortArray:  [ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>目前代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/c8ab0c249882108f459b1facfdd9996f897325b1\">这里</a></p>\n<h2 id=\"对比两种快排的效率\"><a href=\"#对比两种快排的效率\" class=\"headerlink\" title=\"对比两种快排的效率\"></a>对比两种快排的效率</h2><p>创建大数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;swap, createRandomArr&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> randomArr = <span class=\"title function_\">createRandomArr</span>(<span class=\"number\">1e6</span>, <span class=\"number\">0</span>, <span class=\"number\">1e8</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">quickSort: 1184.332ms</span><br><span class=\"line\">qSort: 158.277ms</span><br></pre></td></tr></table></figure>\n\n<p>通过以上的结论不难看出, 处理较大数据时 &lt;&lt;学习JavaScript数据结构与算法&gt;&gt; 中描述的方案优势明显</p>\n<p>目前的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/122e9683b5228456666084cfeebccd8ba1875a9c\">这里</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://book.douban.com/subject/25945449/\">数据结构与算法JavaScript描述</a></li>\n<li><a href=\"https://book.douban.com/subject/26639401/\">学习JavaScript数据结构与算法</a></li>\n</ul>\n","categories":["学习笔记","数据结构与算法","排序算法"],"tags":["算法"]},{"title":"归并排序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>归并排序是一种分治算法, 其思想就是将原始数组切分成较小的数组, 直到每个数组只有一个元素. 接着将小数组归并成较大的数组, 直到最后只有一个排序完成的大数组…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将小数组合并成大数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">merge</span> = (<span class=\"params\">left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> il = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ir = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (il &lt; left.<span class=\"property\">length</span> &amp;&amp; ir &lt; right.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class=\"line\">            ret.<span class=\"title function_\">push</span>(left[il++])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ret.<span class=\"title function_\">push</span>(right[ir++])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (il &lt; left.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(left[il++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ir &lt; right.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(right[ir++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将大数组拆分成小数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mergeSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(len / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = array.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, mid)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = array.<span class=\"title function_\">slice</span>(mid, len)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(left, right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拆分过程</span></span><br><span class=\"line\">[ 9, 10 ] [ 0, 2, 1 ]</span><br><span class=\"line\">[ 9 ] [ 10 ]</span><br><span class=\"line\">[ 0 ] [ 2, 1 ]</span><br><span class=\"line\">[ 2 ] [ 1 ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并的过程</span></span><br><span class=\"line\">[ 9, 10 ]</span><br><span class=\"line\">[ 1, 2 ]</span><br><span class=\"line\">[ 0, 1, 2 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>归并排序的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/13fa54944846254d6defb2c5cc1d0bc95a768320\">这里</a></p>\n","categories":["学习笔记","数据结构与算法","排序算法"],"tags":["算法"]},{"title":"前言","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask-%E6%BA%90%E7%A0%81/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask%20%E6%BA%90%E7%A0%81/%E5%89%8D%E8%A8%80/","content":"<blockquote>\n<p>再不学习 web3 怕是要被淘汰了</p>\n</blockquote>\n<p>为了跟上新技术的潮流, 咱也开始以太坊最知名的插件 - 小狐狸(metamask) 的源码学习(目前最新版本为@10.19.0), 预计不会太难 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20220926144425.png\" alt=\"20220926144425\"></p>\n<span id=\"more\"></span>\n\n<p>和往常的学习方式一样, 开始学习一个项目首先看下他的 package.json, 因为一般情况下了解了项目的依赖项目的总体功能便会八九不离十. 但是和之前不一样的是 <a href=\"https://github.com/MetaMask/metamask-extension/blob/v10.19.0/package.json\">metamask</a> 的 package.json, 居然有十之八九的依赖是之前没有了解过的认知圈以外的内容, 内部的外部的听过名字的没听过名字的各种包…</p>\n<p>为了有效的学习只能是, 针对各个包进行逐步击破了 ~</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20220926144723.png\" alt=\"20220926144723\"></p>\n","categories":["开发笔记","web3","MetaMask 源码"],"tags":["开发笔记"]},{"title":"选择排序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>选择排序是一种原址比较的排序的算法. 从数组的开头开始和其他元素比较. 找到最小的数放到第一位, 接着找到第二小的数放到第二位. 以此类推, 直到移动到数组的倒数第二个位置时说明当前数组已经对比完毕. 完成排序.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"程序流程\"><a href=\"#程序流程\" class=\"headerlink\" title=\"程序流程\"></a>程序流程</h2><p>选择排序用到了嵌套循环, 外循环从数组的第一个元素开始移动到数组的倒数第二个元素. 内循环从当前外循环指定元素的下一个元素开始移动到数组的最后一个元素, 查找比当前外层循环指定的元素更小的元素. 这样就能保证每次内循环结束后都能保证循环期间遇到的最小值到达合适的位置.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">selectionSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> outerIndex, innerIndex, indexMin</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len - <span class=\"number\">1</span>; outerIndex++) &#123;</span><br><span class=\"line\">        indexMin = outerIndex</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (innerIndex = outerIndex + <span class=\"number\">1</span>; innerIndex &lt; len; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[indexMin] &gt; array[innerIndex]) &#123;</span><br><span class=\"line\">                indexMin = innerIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outerIndex !== indexMin) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">swap</span>(array, indexMin, outerIndex)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 0, 10, 9, 2, 1 ]</span><br><span class=\"line\">[ 0, 1, 10, 9, 2 ]</span><br><span class=\"line\">[ 0, 1, 2, 10, 9 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>上边的例子就很典型啦<a href=\"https://github.com/luoquanquan/learn-fe/commit/f10b339d9f9ae082adc4bdf96ab20c132a586e4f\">代码地址</a></p>\n","categories":["学习笔记","数据结构与算法","排序算法"],"tags":["算法"]},{"title":"插入排序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>插入排序每次排序一个数组项, 假定第一项已经排序好了. 依次向后扫描所有元素, 比如到第二项时, 和已经排序好的部分比较, 看看放到哪里合适, 由于此时只有第一项已经排序好了, 就是看看放在第一项的左边还是右边. 第三项和前两项比较, 找到它合适的位置, 以此类推…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">insertionSort</span> = array =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> outerIndex, innerIndex, temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (outerIndex = <span class=\"number\">1</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        temp = array[outerIndex]  <span class=\"comment\">// 待排元素</span></span><br><span class=\"line\">        innerIndex = outerIndex - <span class=\"number\">1</span> <span class=\"comment\">// 已经排好的队伍</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`当前排序好的队伍 <span class=\"subst\">$&#123;array.slice(<span class=\"number\">0</span>, outerIndex)&#125;</span>`</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 拿当前的待排元素到已经排好的队伍里边找他合适的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (innerIndex &gt;= <span class=\"number\">0</span> &amp;&amp; array[innerIndex] &gt; temp) &#123;</span><br><span class=\"line\">            array[innerIndex + <span class=\"number\">1</span>] = array[innerIndex]</span><br><span class=\"line\">            --innerIndex</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[innerIndex + <span class=\"number\">1</span>] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">当前排序好的队伍 9</span><br><span class=\"line\">当前排序好的队伍 9,10</span><br><span class=\"line\">当前排序好的队伍 0,9,10</span><br><span class=\"line\">当前排序好的队伍 0,2,9,10</span><br><span class=\"line\">insertionSort: 3.984ms</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>插入排序的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/3ed8aaded65a371d014a5cbe5b162e0d0cf480ba\">这里</a></p>\n","categories":["学习笔记","数据结构与算法","排序算法"],"tags":["算法"]},{"title":"小狐狸依赖-eth-trezor-keyring","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask-%E6%BA%90%E7%A0%81/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask%20%E6%BA%90%E7%A0%81/%E5%B0%8F%E7%8B%90%E7%8B%B8%E4%BE%9D%E8%B5%96-eth-trezor-keyring/","content":"<blockquote>\n<p>与 Ledger 类似. 对于 trezor 硬件钱包, MetaMask 团队也做了封装, 保证了其 Api 和<a href=\"https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol\">Simple Keyring</a> 的一致性.</p>\n</blockquote>\n<p>由于对于 trezor 的封装逻辑和 Ledger 相似, 也是分为了 address 的派生以及合约的签署. 且将硬件钱包桥接程序和硬件钱包驱动程序的划分也大体一直, 所以相关逻辑本文中不再赘述. 主要对其代码进行一波分析</p>\n<span id=\"more\"></span>\n\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">EventEmitter</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;events&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ethUtil = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethereumjs-util&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Transaction</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethereumjs-tx&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HDKey</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hdkey&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 硬件钱包驱动程序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TrezorConnect</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;trezor-connect&#x27;</span>).<span class=\"property\">default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hdPathString = <span class=\"string\">`m/44&#x27;/60&#x27;/0&#x27;/0`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyringType = <span class=\"string\">&#x27;Trezor Hardware&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathBase = <span class=\"string\">&#x27;m&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX_INDEX</span> = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DELAY_BETWEEN_POPUPS</span> = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">TREZOR_CONNECT_MANIFEST</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">email</span>: <span class=\"string\">&#x27;support@metamask.io&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">appUrl</span>: <span class=\"string\">&#x27;https://metamask.io&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TrezorKeyring</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">EventEmitter</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = keyringType</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HDKey</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span> = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">deserialize</span>(opts)</span><br><span class=\"line\">    <span class=\"comment\">// 初始化钱包的时候需要传入 Developer 的信息</span></span><br><span class=\"line\">    <span class=\"title class_\">TrezorConnect</span>.<span class=\"title function_\">manifest</span>(<span class=\"variable constant_\">TREZOR_CONNECT_MANIFEST</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  serialize () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">hdPath</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span>,</span><br><span class=\"line\">      <span class=\"attr\">accounts</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>,</span><br><span class=\"line\">      <span class=\"attr\">page</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>,</span><br><span class=\"line\">      <span class=\"attr\">paths</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span>,</span><br><span class=\"line\">      <span class=\"attr\">perPage</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span>,</span><br><span class=\"line\">      <span class=\"attr\">unlockedAccount</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  deserialize (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span> = opts.<span class=\"property\">hdPath</span> || hdPathString</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = opts.<span class=\"property\">accounts</span> || []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = opts.<span class=\"property\">page</span> || <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span> = opts.<span class=\"property\">perPage</span> || <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = opts.<span class=\"property\">paths</span> || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断当前硬件钱包是否为解锁状态, 用户进入硬件钱包连接页面且选中的硬件钱包处于解锁状态的话</span></span><br><span class=\"line\">  <span class=\"comment\">// 会直接触发派生当前硬件钱包第一页地址的逻辑</span></span><br><span class=\"line\">  isUnlocked () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Boolean</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">publicKey</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 解锁方法, 利用此方法可以获取到硬件钱包对应 path 的 publicKey, 利用此 publicKey 可以派生</span></span><br><span class=\"line\"><span class=\"comment\">   * 出更多的 address 供用户选择并导入</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  unlock () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isUnlocked</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;already unlocked&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">TrezorConnect</span>.<span class=\"title function_\">getPublicKey</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span>,</span><br><span class=\"line\">        <span class=\"attr\">coin</span>: <span class=\"string\">&#x27;ETH&#x27;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.<span class=\"property\">success</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">publicKey</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(response.<span class=\"property\">payload</span>.<span class=\"property\">publicKey</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">chainCode</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(response.<span class=\"property\">payload</span>.<span class=\"property\">chainCode</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;just unlocked&#x27;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((response.<span class=\"property\">payload</span> &amp;&amp; response.<span class=\"property\">payload</span>.<span class=\"property\">error</span>) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((e &amp;&amp; e.<span class=\"title function_\">toString</span>()) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 用户在导入账户页面选择了对应的账户地址并确认导入之后执行的逻辑</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addAccounts (n = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> to = <span class=\"keyword\">from</span> + n</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">from</span>; i &lt; to; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> address = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">includes</span>(address)) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">push</span>(address)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getFirstPage () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getNextPage () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getPreviousPage () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 派生账户的方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  __getPage (increment) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> += increment</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span> - <span class=\"number\">1</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> to = <span class=\"keyword\">from</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">const</span> accounts = []</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">from</span>; i &lt; to; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 由于老版本 trezor 只支持 BIP44 Standard (Trezor) 这种 path 作为基础 path</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以派生地址的逻辑中只有这一种算法</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> address = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)</span><br><span class=\"line\">            accounts.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">              address,</span><br><span class=\"line\">              <span class=\"attr\">balance</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">              <span class=\"attr\">index</span>: i,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span>[ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)] = i</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(accounts)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取当前已经解锁的所有账户</span></span><br><span class=\"line\">  getAccounts () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">slice</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 移除当前已经解锁的账户</span></span><br><span class=\"line\">  removeAccount (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a.<span class=\"title function_\">toLowerCase</span>()).<span class=\"title function_\">includes</span>(address.<span class=\"title function_\">toLowerCase</span>())) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Address <span class=\"subst\">$&#123;address&#125;</span> not found in this keyring`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a.<span class=\"title function_\">toLowerCase</span>() !== address.<span class=\"title function_\">toLowerCase</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// tx is an instance of the ethereumjs-transaction class.</span></span><br><span class=\"line\">  <span class=\"comment\">// 合约签署 API, 目前我们用的版本的 eth-trezor-keyring 尚未兼容 eip 1559, 下周我得兼容下了</span></span><br><span class=\"line\">  signTransaction (address, tx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title class_\">TrezorConnect</span>.<span class=\"title function_\">ethereumSignTransaction</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">path</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_pathFromAddress</span>(address),</span><br><span class=\"line\">              <span class=\"attr\">transaction</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">to</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">to</span>),</span><br><span class=\"line\">                <span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">value</span>),</span><br><span class=\"line\">                <span class=\"attr\">data</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">data</span>),</span><br><span class=\"line\">                <span class=\"attr\">chainId</span>: tx.<span class=\"property\">_chainId</span>,</span><br><span class=\"line\">                <span class=\"attr\">nonce</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">nonce</span>),</span><br><span class=\"line\">                <span class=\"attr\">gasLimit</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">gasLimit</span>),</span><br><span class=\"line\">                <span class=\"attr\">gasPrice</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_normalize</span>(tx.<span class=\"property\">gasPrice</span>),</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response.<span class=\"property\">success</span>) &#123;</span><br><span class=\"line\">                tx.<span class=\"property\">v</span> = response.<span class=\"property\">payload</span>.<span class=\"property\">v</span></span><br><span class=\"line\">                tx.<span class=\"property\">r</span> = response.<span class=\"property\">payload</span>.<span class=\"property\">r</span></span><br><span class=\"line\">                tx.<span class=\"property\">s</span> = response.<span class=\"property\">payload</span>.<span class=\"property\">s</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> signedTx = <span class=\"keyword\">new</span> <span class=\"title class_\">Transaction</span>(tx)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> addressSignedWith = ethUtil.<span class=\"title function_\">toChecksumAddress</span>(<span class=\"string\">`0x<span class=\"subst\">$&#123;signedTx.<span class=\"keyword\">from</span>.toString(<span class=\"string\">&#x27;hex&#x27;</span>)&#125;</span>`</span>)</span><br><span class=\"line\">                <span class=\"keyword\">const</span> correctAddress = ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (addressSignedWith !== correctAddress) &#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;signature doesnt match the right address&#x27;</span>))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(signedTx)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((response.<span class=\"property\">payload</span> &amp;&amp; response.<span class=\"property\">payload</span>.<span class=\"property\">error</span>) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((e &amp;&amp; e.<span class=\"title function_\">toString</span>()) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// This is necessary to avoid popup collision</span></span><br><span class=\"line\">            <span class=\"comment\">// between the unlock &amp; sign trezor popups</span></span><br><span class=\"line\">          &#125;, status === <span class=\"string\">&#x27;just unlocked&#x27;</span> ? <span class=\"variable constant_\">DELAY_BETWEEN_POPUPS</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((e &amp;&amp; e.<span class=\"title function_\">toString</span>()) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// wrapper of signPersonalMessage</span></span><br><span class=\"line\">  signMessage (withAccount, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">signPersonalMessage</span>(withAccount, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// For personal_sign, we need to prefix the message:</span></span><br><span class=\"line\">  signPersonalMessage (withAccount, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title class_\">TrezorConnect</span>.<span class=\"title function_\">ethereumSignMessage</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">path</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_pathFromAddress</span>(withAccount),</span><br><span class=\"line\">              <span class=\"attr\">message</span>: ethUtil.<span class=\"title function_\">stripHexPrefix</span>(message),</span><br><span class=\"line\">              <span class=\"attr\">hex</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response.<span class=\"property\">success</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.<span class=\"property\">payload</span>.<span class=\"property\">address</span> !== ethUtil.<span class=\"title function_\">toChecksumAddress</span>(withAccount)) &#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;signature doesnt match the right address&#x27;</span>))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> signature = <span class=\"string\">`0x<span class=\"subst\">$&#123;response.payload.signature&#125;</span>`</span></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(signature)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((response.<span class=\"property\">payload</span> &amp;&amp; response.<span class=\"property\">payload</span>.<span class=\"property\">error</span>) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error while trying to sign a message &#x27;</span>, e)</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((e &amp;&amp; e.<span class=\"title function_\">toString</span>()) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// This is necessary to avoid popup collision</span></span><br><span class=\"line\">            <span class=\"comment\">// between the unlock &amp; sign trezor popups</span></span><br><span class=\"line\">          &#125;, status === <span class=\"string\">&#x27;just unlocked&#x27;</span> ? <span class=\"variable constant_\">DELAY_BETWEEN_POPUPS</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error while trying to sign a message &#x27;</span>, e)</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>((e &amp;&amp; e.<span class=\"title function_\">toString</span>()) || <span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// EIP-712 Sign Typed Data, 老版本尚未支持</span></span><br><span class=\"line\">  signTypedData () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Waiting on trezor to enable this</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Not supported on this device&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportAccount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Not supported on this device&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空硬件钱包数据</span></span><br><span class=\"line\">  forgetDevice () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HDKey</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* PRIVATE METHODS */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _normalize (buf) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ethUtil.<span class=\"title function_\">bufferToHex</span>(buf).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 publicKey 派生 address 的算法</span></span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-shadow</span></span><br><span class=\"line\">  _addressFromIndex (pathBase, i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dkey = <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"title function_\">derive</span>(<span class=\"string\">`<span class=\"subst\">$&#123;pathBase&#125;</span>/<span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> address = ethUtil</span><br><span class=\"line\">      .<span class=\"title function_\">publicToAddress</span>(dkey.<span class=\"property\">publicKey</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ethUtil.<span class=\"title function_\">toChecksumAddress</span>(<span class=\"string\">`0x<span class=\"subst\">$&#123;address&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 address 反向推算 path 的方法, 这里的 address 已存在, 那肯定是之前派生过的</span></span><br><span class=\"line\">  _pathFromAddress (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> checksummedAddress = ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span>[checksummedAddress]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> index === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable constant_\">MAX_INDEX</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checksummedAddress === <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)) &#123;</span><br><span class=\"line\">          index = i</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> index === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Unknown address&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.hdPath&#125;</span>/<span class=\"subst\">$&#123;index&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">TrezorKeyring</span>.<span class=\"property\">type</span> = keyringType</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">TrezorKeyring</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/MetaMask/eth-trezor-keyring\">eth-trezor-keyring</a></li>\n</ul>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><blockquote>\n<p>在尽心源码学习的过程中, 我发现我们现在使用的版本和最新的 eth-trezor-keyring 存在一些差距:</p>\n</blockquote>\n<ul>\n<li>EIP-1559 兼容</li>\n<li>EIP-712 兼容</li>\n</ul>\n<p>为了保证用户使用体验, 后续需要升级我们使用的 eth-trezor-keyring 到最新版本 ~</p>\n","categories":["开发笔记","web3","MetaMask 源码"],"tags":["开发笔记"]},{"title":"小狐狸依赖-eth-ledger-bridge-keyring","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask-%E6%BA%90%E7%A0%81/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask%20%E6%BA%90%E7%A0%81/%E5%B0%8F%E7%8B%90%E7%8B%B8%E4%BE%9D%E8%B5%96-eth-ledger-bridge-keyring/","content":"<blockquote>\n<p>eth-ledger-bridge-keyring 是 MetaMask 团队基于 <a href=\"https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol\">Simple Keyring</a> 协议开发的 Ledger 硬件钱包链接方案. 涉及到的逻辑主要是硬件钱包账户导入和合约签署(签名)</p>\n</blockquote>\n<h2 id=\"基础逻辑\"><a href=\"#基础逻辑\" class=\"headerlink\" title=\"基础逻辑\"></a>基础逻辑</h2><p>为了代码逻辑的抽离, Metamask 使用了 iframe 嵌套实际硬件钱包连接的方案. 在 background.html 中通过 iframe 嵌套了连接中间页, 在业务代码中则利用 eth-ledger-bridge-keyring 通过 postMessage 和中间页进行通信从而实现硬件钱包的链接.</p>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><ul>\n<li>硬件钱包驱动程序: 硬件钱包厂商提供的 js 代码, 主要功能是实现浏览器和插件硬件的通信</li>\n<li>硬件钱包桥接程序: metamask 团队实现的为了抹平硬件钱包驱动程序之间的 api 区别的胶水代码, 同时承担了基于 publicKey 派生 address 的功能</li>\n</ul>\n<p>本文主要描述的 eth-ledger-bridge-keyring 就是上述名词中的<strong>硬件钱包桥接程序</strong></p>\n<span id=\"more\"></span>\n\n<h2 id=\"硬件钱包账号导入\"><a href=\"#硬件钱包账号导入\" class=\"headerlink\" title=\"硬件钱包账号导入\"></a>硬件钱包账号导入</h2><p>目前硬件钱包仅支持 EVM 系的地址, 硬件钱包账户导入的过程就是硬件钱包桥接程序通过 postMessage 驱动硬件钱包驱动程序获取到硬件钱包的 publicKey, 并基于 publicKey 派生出 address 的过程. 具体的执行过程时序图如下:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221230002710.png\" alt=\"20221230002710\"></p>\n<h2 id=\"签署合约\"><a href=\"#签署合约\" class=\"headerlink\" title=\"签署合约\"></a>签署合约</h2><p>Ledger 钱包签署合约的 api 有 signMessage, signPersonalMessage, signTypedData, signTransaction. 其中 signTypedData 仅支持 V4 的版本. 其中 Dapp 发起的合约交易的签署过程如下:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221230002924.png\" alt=\"20221230002924\"></p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">EventEmitter</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;events&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HDKey</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hdkey&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ethUtil = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethereumjs-util&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sigUtil = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;eth-sig-util&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">TransactionFactory</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@ethereumjs/tx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathBase = <span class=\"string\">&#x27;m&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hdPathString = <span class=\"string\">`<span class=\"subst\">$&#123;pathBase&#125;</span>/44&#x27;/60&#x27;/0&#x27;`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> type = <span class=\"string\">&#x27;Ledger Hardware&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套的中间页地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">BRIDGE_URL</span> = <span class=\"string\">&#x27;https://metamask.github.io/eth-ledger-bridge-keyring&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最多可以派生的地址数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX_INDEX</span> = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">NETWORK_API_URLS</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">ropsten</span>: <span class=\"string\">&#x27;http://api-ropsten.etherscan.io&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">kovan</span>: <span class=\"string\">&#x27;http://api-kovan.etherscan.io&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">rinkeby</span>: <span class=\"string\">&#x27;https://api-rinkeby.etherscan.io&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mainnet</span>: <span class=\"string\">&#x27;https://api.etherscan.io&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CONNECTION_EVENT</span> = <span class=\"string\">&#x27;ledger-connection-change&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LedgerBridgeKeyring</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">EventEmitter</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">bridgeUrl</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = type</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span> = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HDKey</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">network</span> = <span class=\"string\">&#x27;mainnet&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">implementFullBIP44</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">deserialize</span>(opts)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframeLoaded</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_setupIframe</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentMessageId</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messageCallbacks</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_setupListener</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  serialize () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">hdPath</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span>,</span><br><span class=\"line\">      <span class=\"attr\">accounts</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>,</span><br><span class=\"line\">      <span class=\"attr\">accountDetails</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>,</span><br><span class=\"line\">      <span class=\"attr\">bridgeUrl</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">bridgeUrl</span>,</span><br><span class=\"line\">      <span class=\"attr\">implementFullBIP44</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  deserialize (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span> = opts.<span class=\"property\">hdPath</span> || hdPathString</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">bridgeUrl</span> = opts.<span class=\"property\">bridgeUrl</span> || <span class=\"variable constant_\">BRIDGE_URL</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = opts.<span class=\"property\">accounts</span> || []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span> = opts.<span class=\"property\">accountDetails</span> || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!opts.<span class=\"property\">accountDetails</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_migrateAccountDetails</span>(opts)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">implementFullBIP44</span> = opts.<span class=\"property\">implementFullBIP44</span> || <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Remove accounts that don&#x27;t have corresponding account details</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span></span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">account</span>) =&gt;</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>).<span class=\"title function_\">includes</span>(ethUtil.<span class=\"title function_\">toChecksumAddress</span>(account)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _migrateAccountDetails (opts) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>() &amp;&amp; opts.<span class=\"property\">accountIndexes</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> account <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(opts.<span class=\"property\">accountIndexes</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>[account] = &#123;</span><br><span class=\"line\">          <span class=\"attr\">bip44</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">hdPath</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getPathForIndex</span>(opts.<span class=\"property\">accountIndexes</span>[account]),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// try to migrate non-LedgerLive accounts too</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span></span><br><span class=\"line\">        .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">account</span>) =&gt;</span> !<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>).<span class=\"title function_\">includes</span>(ethUtil.<span class=\"title function_\">toChecksumAddress</span>(account)))</span><br><span class=\"line\">        .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">account</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>[ethUtil.<span class=\"title function_\">toChecksumAddress</span>(account)] = &#123;</span><br><span class=\"line\">              <span class=\"attr\">bip44</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">              <span class=\"attr\">hdPath</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_pathFromAddress</span>(account),</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`failed to migrate account <span class=\"subst\">$&#123;account&#125;</span>`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断当前硬件钱包是否为解锁状态, 用户进入硬件钱包连接页面且选中的硬件钱包处于解锁状态的话</span></span><br><span class=\"line\">  <span class=\"comment\">// 会直接触发派生当前硬件钱包第一页地址的逻辑</span></span><br><span class=\"line\">  isUnlocked () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Boolean</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">publicKey</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 硬件钱包的连接状态</span></span><br><span class=\"line\">  isConnected () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isDeviceConnected</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置基础 hdPath</span></span><br><span class=\"line\">  <span class=\"comment\">// 目前 Ledger 硬件钱包派生 address 有三种协议, 可以在连接硬件钱包的页面进行选择</span></span><br><span class=\"line\">  <span class=\"comment\">// 不同的协议派生出来的钱包 address 不同, 变相增加了硬件钱包可使用的范围</span></span><br><span class=\"line\">  setHdPath (hdPath) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Reset HDKey if the path changes</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span> !== hdPath) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HDKey</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span> = hdPath</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 解锁方法, 利用此方法可以获取到硬件钱包对应 path 的 publicKey, 利用此 publicKey 可以派生</span></span><br><span class=\"line\"><span class=\"comment\">   * 出更多的 address 供用户选择并导入</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  unlock (hdPath, updateHdk = <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isUnlocked</span>() &amp;&amp; !hdPath) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;already unlocked&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = hdPath ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">_toLedgerPath</span>(hdPath) : <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendMessage</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;ledger-unlock&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">hdPath</span>: path,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">&#123; success, payload &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (updateHdk) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">publicKey</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(payload.<span class=\"property\">publicKey</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"property\">chainCode</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(payload.<span class=\"property\">chainCode</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(payload.<span class=\"property\">address</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(payload.<span class=\"property\">error</span> || <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Unknown error&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 用户在导入账户页面选择了对应的账户地址并确认导入之后执行的逻辑</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  addAccounts (n = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> (_) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> to = <span class=\"keyword\">from</span> + n</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">from</span>; i &lt; to; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getPathForIndex</span>(i)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> address</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>()) &#123;</span><br><span class=\"line\">              address = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>(path)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              address = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>[ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)] = &#123;</span><br><span class=\"line\">              <span class=\"comment\">// <span class=\"doctag\">TODO:</span> consider renaming this property, as the current name is misleading</span></span><br><span class=\"line\">              <span class=\"comment\">// It&#x27;s currently used to represent whether an account uses the Ledger Live path.</span></span><br><span class=\"line\">              <span class=\"attr\">bip44</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>(),</span><br><span class=\"line\">              <span class=\"attr\">hdPath</span>: path,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">includes</span>(address)) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">push</span>(address)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getFirstPage () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getNextPage () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getPreviousPage () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">__getPage</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getAccounts () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">slice</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeAccount (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a.<span class=\"title function_\">toLowerCase</span>()).<span class=\"title function_\">includes</span>(address.<span class=\"title function_\">toLowerCase</span>())) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Address <span class=\"subst\">$&#123;address&#125;</span> not found in this keyring`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span>.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a.<span class=\"title function_\">toLowerCase</span>() !== address.<span class=\"title function_\">toLowerCase</span>())</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>[ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 更新链接 Ledger 的方法, 目前 Ledger 连接的方案有三种:</span></span><br><span class=\"line\"><span class=\"comment\">   * webHid</span></span><br><span class=\"line\"><span class=\"comment\">   * webU2F</span></span><br><span class=\"line\"><span class=\"comment\">   * Ledger Live 桥接</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 用户可以在 MetaMask 设置页面进行设置</span></span><br><span class=\"line\"><span class=\"comment\">   * 目前 Chrome 支持 webHid, Ledger Live 桥接</span></span><br><span class=\"line\"><span class=\"comment\">   * Firefox 仅支持 webU2F 方案</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  updateTransportMethod (transportType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// If the iframe isn&#x27;t loaded yet, let&#x27;s store the desired transportType value and</span></span><br><span class=\"line\">      <span class=\"comment\">// optimistically return a successful promise</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">iframeLoaded</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span> = &#123;</span><br><span class=\"line\">          resolve,</span><br><span class=\"line\">          reject,</span><br><span class=\"line\">          transportType,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendMessage</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;ledger-update-transport&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">params</span>: &#123; transportType &#125;,</span><br><span class=\"line\">      &#125;, <span class=\"function\">(<span class=\"params\">&#123; success &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger transport could not be updated&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// tx is an instance of the ethereumjs-transaction class.</span></span><br><span class=\"line\">  <span class=\"comment\">// 签署合约的方法</span></span><br><span class=\"line\">  signTransaction (address, tx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rawTxHex</span><br><span class=\"line\">    <span class=\"comment\">// transactions built with older versions of ethereumjs-tx have a</span></span><br><span class=\"line\">    <span class=\"comment\">// getChainId method that newer versions do not. Older versions are mutable</span></span><br><span class=\"line\">    <span class=\"comment\">// while newer versions default to being immutable. Expected shape and type</span></span><br><span class=\"line\">    <span class=\"comment\">// of data for v, r and s differ (Buffer (old) vs BN (new))</span></span><br><span class=\"line\">    <span class=\"comment\">// 对于老的 tx 实例, 具备 tx.getChainId 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tx.<span class=\"property\">getChainId</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// In this version of ethereumjs-tx we must add the chainId in hex format</span></span><br><span class=\"line\">      <span class=\"comment\">// to the initial v value. The chainId must be included in the serialized</span></span><br><span class=\"line\">      <span class=\"comment\">// transaction which is only communicated to ethereumjs-tx in this</span></span><br><span class=\"line\">      <span class=\"comment\">// value. In newer versions the chainId is communicated via the &#x27;Common&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// object.</span></span><br><span class=\"line\">      tx.<span class=\"property\">v</span> = ethUtil.<span class=\"title function_\">bufferToHex</span>(tx.<span class=\"title function_\">getChainId</span>())</span><br><span class=\"line\">      tx.<span class=\"property\">r</span> = <span class=\"string\">&#x27;0x00&#x27;</span></span><br><span class=\"line\">      tx.<span class=\"property\">s</span> = <span class=\"string\">&#x27;0x00&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      rawTxHex = tx.<span class=\"title function_\">serialize</span>().<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_signTransaction</span>(address, rawTxHex, <span class=\"function\">(<span class=\"params\">payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        tx.<span class=\"property\">v</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(payload.<span class=\"property\">v</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">        tx.<span class=\"property\">r</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(payload.<span class=\"property\">r</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">        tx.<span class=\"property\">s</span> = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(payload.<span class=\"property\">s</span>, <span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tx</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The below `encode` call is only necessary for legacy transactions, as `getMessageToSign`</span></span><br><span class=\"line\">    <span class=\"comment\">// calls `rlp.encode` internally for non-legacy transactions. As per the &quot;Transaction Execution&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// section of the ethereum yellow paper, transactions need to be &quot;well-formed RLP, with no additional</span></span><br><span class=\"line\">    <span class=\"comment\">// trailing bytes&quot;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note also that `getMessageToSign` will return valid RLP for all transaction types, whereas the</span></span><br><span class=\"line\">    <span class=\"comment\">// `serialize` method will not for any transaction type except legacy. This is because `serialize` includes</span></span><br><span class=\"line\">    <span class=\"comment\">// empty r, s and v values in the encoded rlp. This is why we use `getMessageToSign` here instead of `serialize`.</span></span><br><span class=\"line\">    <span class=\"comment\">// 对于新的 tx 实例, 则需要采用新的签署方法, MetaMask 在兼容 eip 1559 之后生成的 tx 均为新的 tx</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> messageToSign = tx.<span class=\"title function_\">getMessageToSign</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    rawTxHex = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>(messageToSign)</span><br><span class=\"line\">      ? messageToSign.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">      : ethUtil.<span class=\"property\">rlp</span>.<span class=\"title function_\">encode</span>(messageToSign).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_signTransaction</span>(address, rawTxHex, <span class=\"function\">(<span class=\"params\">payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Because tx will be immutable, first get a plain javascript object that</span></span><br><span class=\"line\">      <span class=\"comment\">// represents the transaction. Using txData here as it aligns with the</span></span><br><span class=\"line\">      <span class=\"comment\">// nomenclature of ethereumjs/tx.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> txData = tx.<span class=\"title function_\">toJSON</span>()</span><br><span class=\"line\">      <span class=\"comment\">// The fromTxData utility expects a type to support transactions with a type other than 0</span></span><br><span class=\"line\">      txData.<span class=\"property\">type</span> = tx.<span class=\"property\">type</span></span><br><span class=\"line\">      <span class=\"comment\">// The fromTxData utility expects v,r and s to be hex prefixed</span></span><br><span class=\"line\">      txData.<span class=\"property\">v</span> = ethUtil.<span class=\"title function_\">addHexPrefix</span>(payload.<span class=\"property\">v</span>)</span><br><span class=\"line\">      txData.<span class=\"property\">r</span> = ethUtil.<span class=\"title function_\">addHexPrefix</span>(payload.<span class=\"property\">r</span>)</span><br><span class=\"line\">      txData.<span class=\"property\">s</span> = ethUtil.<span class=\"title function_\">addHexPrefix</span>(payload.<span class=\"property\">s</span>)</span><br><span class=\"line\">      <span class=\"comment\">// Adopt the &#x27;common&#x27; option from the original transaction and set the</span></span><br><span class=\"line\">      <span class=\"comment\">// returned object to be frozen if the original is frozen.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">TransactionFactory</span>.<span class=\"title function_\">fromTxData</span>(txData, &#123; <span class=\"attr\">common</span>: tx.<span class=\"property\">common</span>, <span class=\"attr\">freeze</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">isFrozen</span>(tx) &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实际签署合约与硬件钱包驱动程序进行交互的方法, 将前置的签名方法中获取到的 rawTxHex 传递给硬件</span></span><br><span class=\"line\">  <span class=\"comment\">// 钱包驱动程序, 并且接收签名后返回的 signedHash</span></span><br><span class=\"line\">  _signTransaction (address, rawTxHex, handleSigning) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlockAccountByAddress</span>(address)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">hdPath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendMessage</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">action</span>: <span class=\"string\">&#x27;ledger-sign-transaction&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">tx</span>: rawTxHex,</span><br><span class=\"line\">              hdPath,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">&#123; success, payload &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">const</span> newOrMutatedTx = <span class=\"title function_\">handleSigning</span>(payload)</span><br><span class=\"line\">              <span class=\"keyword\">const</span> valid = newOrMutatedTx.<span class=\"title function_\">verifySignature</span>()</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(newOrMutatedTx)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: The transaction signature is not valid&#x27;</span>))</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(payload.<span class=\"property\">error</span> || <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: Unknown error while signing transaction&#x27;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// signPersonalMessage 的封装</span></span><br><span class=\"line\">  signMessage (withAccount, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">signPersonalMessage</span>(withAccount, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// For personal_sign, we need to prefix the message:</span></span><br><span class=\"line\">  signPersonalMessage (withAccount, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlockAccountByAddress</span>(withAccount)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">hdPath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendMessage</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">action</span>: <span class=\"string\">&#x27;ledger-sign-personal-message&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">              hdPath,</span><br><span class=\"line\">              <span class=\"attr\">message</span>: ethUtil.<span class=\"title function_\">stripHexPrefix</span>(message),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">&#123; success, payload &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> v = payload.<span class=\"property\">v</span> - <span class=\"number\">27</span></span><br><span class=\"line\">              v = v.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>)</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (v.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                v = <span class=\"string\">`0<span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> signature = <span class=\"string\">`0x<span class=\"subst\">$&#123;payload.r&#125;</span><span class=\"subst\">$&#123;payload.s&#125;</span><span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">              <span class=\"keyword\">const</span> addressSignedWith = sigUtil.<span class=\"title function_\">recoverPersonalSignature</span>(&#123; <span class=\"attr\">data</span>: message, <span class=\"attr\">sig</span>: signature &#125;)</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (ethUtil.<span class=\"title function_\">toChecksumAddress</span>(addressSignedWith) !== ethUtil.<span class=\"title function_\">toChecksumAddress</span>(withAccount)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: The signature doesnt match the right address&#x27;</span>))</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(signature)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(payload.<span class=\"property\">error</span> || <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: Unknown error while signing message&#x27;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> unlockAccountByAddress (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> checksummedAddress = ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>).<span class=\"title function_\">includes</span>(checksummedAddress)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Ledger: Account for address &#x27;<span class=\"subst\">$&#123;checksummedAddress&#125;</span>&#x27; not found`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; hdPath &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span>[checksummedAddress]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unlockedAddress = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>(hdPath, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// unlock resolves to the address for the given hdPath as reported by the ledger device</span></span><br><span class=\"line\">    <span class=\"comment\">// if that address is not the requested address, then this account belongs to a different device or seed</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlockedAddress.<span class=\"title function_\">toLowerCase</span>() !== address.<span class=\"title function_\">toLowerCase</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Ledger: Account <span class=\"subst\">$&#123;address&#125;</span> does not belong to the connected device`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hdPath</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目前 Ledger 仅支持 V4 Data 的签署</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> signTypedData (withAccount, data, options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isV4 = options.<span class=\"property\">version</span> === <span class=\"string\">&#x27;V4&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isV4) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: Only version 4 of typed data signing is supported&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      domain,</span><br><span class=\"line\">      types,</span><br><span class=\"line\">      primaryType,</span><br><span class=\"line\">      message,</span><br><span class=\"line\">    &#125; = sigUtil.<span class=\"property\">TypedDataUtils</span>.<span class=\"title function_\">sanitizeData</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> domainSeparatorHex = sigUtil.<span class=\"property\">TypedDataUtils</span>.<span class=\"title function_\">hashStruct</span>(<span class=\"string\">&#x27;EIP712Domain&#x27;</span>, domain, types, isV4).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hashStructMessageHex = sigUtil.<span class=\"property\">TypedDataUtils</span>.<span class=\"title function_\">hashStruct</span>(primaryType, message, types, isV4).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> hdPath = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlockAccountByAddress</span>(withAccount)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; success, payload &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendMessage</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">action</span>: <span class=\"string\">&#x27;ledger-sign-typed-data&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">          hdPath,</span><br><span class=\"line\">          domainSeparatorHex,</span><br><span class=\"line\">          hashStructMessageHex,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(result))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> v = payload.<span class=\"property\">v</span> - <span class=\"number\">27</span></span><br><span class=\"line\">      v = v.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (v.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        v = <span class=\"string\">`0<span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> signature = <span class=\"string\">`0x<span class=\"subst\">$&#123;payload.r&#125;</span><span class=\"subst\">$&#123;payload.s&#125;</span><span class=\"subst\">$&#123;v&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> addressSignedWith = sigUtil.<span class=\"title function_\">recoverTypedSignature_v4</span>(&#123;</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        <span class=\"attr\">sig</span>: signature,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ethUtil.<span class=\"title function_\">toChecksumAddress</span>(addressSignedWith) !== ethUtil.<span class=\"title function_\">toChecksumAddress</span>(withAccount)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: The signature doesnt match the right address&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> payload.<span class=\"property\">error</span> || <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Ledger: Unknown error while signing message&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportAccount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Not supported on this device&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  forgetDevice () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accounts</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">unlockedAccount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">accountDetails</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HDKey</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* PRIVATE METHODS */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _setupIframe () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;iframe&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span>.<span class=\"property\">src</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">bridgeUrl</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span>.<span class=\"property\">allow</span> = <span class=\"string\">`hid &#x27;src&#x27;`</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// If the ledger live preference was set before the iframe is loaded,</span></span><br><span class=\"line\">      <span class=\"comment\">// set it after the iframe has loaded</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">iframeLoaded</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateTransportMethod</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span>.<span class=\"property\">transportType</span>,</span><br><span class=\"line\">          )</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span>.<span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span>.<span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">delayedPromise</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getOrigin () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">bridgeUrl</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">    tmp.<span class=\"title function_\">splice</span>(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _sendMessage (msg, cb) &#123;</span><br><span class=\"line\">    msg.<span class=\"property\">target</span> = <span class=\"string\">&#x27;LEDGER-IFRAME&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentMessageId</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    msg.<span class=\"property\">messageId</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">currentMessageId</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messageCallbacks</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">currentMessageId</span>] = cb</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframe</span>.<span class=\"property\">contentWindow</span>.<span class=\"title function_\">postMessage</span>(msg, <span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _setupListener () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_eventListener</span> = <span class=\"function\">(<span class=\"params\">&#123; origin, data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (origin !== <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getOrigin</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">messageCallbacks</span>[data.<span class=\"property\">messageId</span>]) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">messageCallbacks</span>[data.<span class=\"property\">messageId</span>](data)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.<span class=\"property\">action</span> === <span class=\"variable constant_\">CONNECTION_EVENT</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">isDeviceConnected</span> = data.<span class=\"property\">payload</span>.<span class=\"property\">connected</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_eventListener</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  destroy () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_eventListener</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 派生账户的方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> __getPage (increment) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> += increment</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">page</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span> - <span class=\"number\">1</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> to = <span class=\"keyword\">from</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">perPage</span></span><br><span class=\"line\">    <span class=\"comment\">// 用户解锁后就能拿到初始 path 的 publicKey</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> accounts</span><br><span class=\"line\">    <span class=\"comment\">// 利用上述过程中的 publicKey 通过算法派生出当前页面待选择的 address 可供用户选择</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于每次获取到的 publicKey 是相同的, 所以即使多次导入相同的钱包派生出来的 address 也会</span></span><br><span class=\"line\">    <span class=\"comment\">// 相同不用担心这次导入的硬件钱包转入代币, 下次从别的钱包导入之后找不到了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>()) &#123;</span><br><span class=\"line\">      accounts = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getAccountsBIP44</span>(<span class=\"keyword\">from</span>, to)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      accounts = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getAccountsLegacy</span>(<span class=\"keyword\">from</span>, to)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 LedgerLiveHdPath 作为基础 path 时派生 address 的方法, 这种使用这种方法每次都需要</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用硬件钱包去解锁每个 path 对应的 address</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> _getAccountsBIP44 (<span class=\"keyword\">from</span>, to) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> accounts = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">from</span>; i &lt; to; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> path = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getPathForIndex</span>(i)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> address = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">unlock</span>(path)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> valid = <span class=\"variable language_\">this</span>.<span class=\"property\">implementFullBIP44</span> ? <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_hasPreviousTransactions</span>(address) : <span class=\"literal\">true</span></span><br><span class=\"line\">      accounts.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        address,</span><br><span class=\"line\">        <span class=\"attr\">balance</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">index</span>: i,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// PER BIP44</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;Software should prevent a creation of an account if</span></span><br><span class=\"line\">      <span class=\"comment\">// a previous account does not have a transaction history</span></span><br><span class=\"line\">      <span class=\"comment\">// (meaning none of its addresses have been used before).&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 Legacy (MEW / MyCrypto) 或者</span></span><br><span class=\"line\">  <span class=\"comment\">// BIP44 Standard (Trezor)  作为基础 path 时派生 address 的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 实际的派生方法为 _addressFromIndex</span></span><br><span class=\"line\">  _getAccountsLegacy (<span class=\"keyword\">from</span>, to) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> accounts = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"keyword\">from</span>; i &lt; to; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> address = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)</span><br><span class=\"line\">      accounts.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        address,</span><br><span class=\"line\">        <span class=\"attr\">balance</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">index</span>: i,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span>[ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)] = i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-shadow</span></span><br><span class=\"line\">  _addressFromIndex (pathBase, i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dkey = <span class=\"variable language_\">this</span>.<span class=\"property\">hdk</span>.<span class=\"title function_\">derive</span>(<span class=\"string\">`<span class=\"subst\">$&#123;pathBase&#125;</span>/<span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> address = ethUtil</span><br><span class=\"line\">      .<span class=\"title function_\">publicToAddress</span>(dkey.<span class=\"property\">publicKey</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ethUtil.<span class=\"title function_\">toChecksumAddress</span>(<span class=\"string\">`0x<span class=\"subst\">$&#123;address&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _pathFromAddress (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> checksummedAddress = ethUtil.<span class=\"title function_\">toChecksumAddress</span>(address)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span>[checksummedAddress]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> index === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable constant_\">MAX_INDEX</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checksummedAddress === <span class=\"variable language_\">this</span>.<span class=\"title function_\">_addressFromIndex</span>(pathBase, i)) &#123;</span><br><span class=\"line\">          index = i</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> index === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Unknown address&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getPathForIndex</span>(index)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getPathForIndex (index) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check if the path is BIP 44 (Ledger Live)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_isLedgerLiveHdPath</span>() ? <span class=\"string\">`m/44&#x27;/60&#x27;/<span class=\"subst\">$&#123;index&#125;</span>&#x27;/0/0`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.hdPath&#125;</span>/<span class=\"subst\">$&#123;index&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _isLedgerLiveHdPath () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">hdPath</span> === <span class=\"string\">`m/44&#x27;/60&#x27;/0&#x27;/0/0`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _toLedgerPath (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;m/&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 派生 implementFullBIP44 格式的地址时候会先判断当前生成数来的 address 是否被使用过</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有被使用过的才被认为是合法的</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> _hasPreviousTransactions (address) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> apiUrl = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getApiUrl</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">fetch</span>(<span class=\"string\">`<span class=\"subst\">$&#123;apiUrl&#125;</span>/api?module=account&amp;action=txlist&amp;address=<span class=\"subst\">$&#123;address&#125;</span>&amp;tag=latest&amp;page=1&amp;offset=1`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parsedResponse = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parsedResponse.<span class=\"property\">status</span> !== <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; parsedResponse.<span class=\"property\">result</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getApiUrl () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">NETWORK_API_URLS</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">network</span>] || <span class=\"variable constant_\">NETWORK_API_URLS</span>.<span class=\"property\">mainnet</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">LedgerBridgeKeyring</span>.<span class=\"property\">type</span> = type</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">LedgerBridgeKeyring</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/MetaMask/eth-simple-keyring#the-keyring-class-protocol\">Simple Keyring</a></li>\n</ul>\n","categories":["开发笔记","web3","MetaMask 源码"],"tags":["开发笔记"]},{"title":"小狐狸依赖-pump","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask-%E6%BA%90%E7%A0%81/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask%20%E6%BA%90%E7%A0%81/%E5%B0%8F%E7%8B%90%E7%8B%B8%E4%BE%9D%E8%B5%96-pump/","content":"<blockquote>\n<p>pump is a small node module that pipes streams together and destroys all of them if one of them closes.</p>\n</blockquote>\n<p>在 metamask 中各运行时的通信使用到了流(stream), 相对于 <code>postMessage</code> 的好处是处理大数据不会卡内存. 但是在 stream 中处理过程中, 如果目标流关闭了其状态是不会通知给数据源流. 数据源还会源源不断的写入数据, 但是没有目标流会获取这些数据了…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"stream-的使用\"><a href=\"#stream-的使用\" class=\"headerlink\" title=\"stream 的使用\"></a>stream 的使用</h2><p>首先, 我们回顾一下 stream 的使用, 在任意一个目录创建 index.js 写下如下代码.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readStream = fs.<span class=\"title function_\">createReadStream</span>(<span class=\"string\">&#x27;./index.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> writeStream = fs.<span class=\"title function_\">createWriteStream</span>(<span class=\"string\">&#x27;./dest&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    readStream.<span class=\"title function_\">pipe</span>(writeStream)</span><br><span class=\"line\">&#125;, <span class=\"number\">1e3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中, 我们创建了一个可读流 <code>readStream</code> 用于读取当前的 index.js 文件. 然后创建了一个可写流用于往 dest 文件中写入内容.</p>\n<p>定时器 1s 后执行 <code>readStream.pipe(writeStream)</code> 将可读流的内容传递给可写流.</p>\n<p>执行 <code>node index.js</code> 之后会发现目录中多了个 dest 文件, 文件内容和 <code>index.js</code> 一样.</p>\n<p>示例代码在<a href=\"https://github.com/luoquanquan/learn-fe/tree/pump-v1/metamask-learn/pump-learn\">这里</a></p>\n<h2 id=\"原生的流处理存在的问题\"><a href=\"#原生的流处理存在的问题\" class=\"headerlink\" title=\"原生的流处理存在的问题\"></a>原生的流处理存在的问题</h2><p>在刚刚的示例中, 我们定时 1s 后写入内容. 当 writeStream 流关闭或者完成的事件是不会通知给 readStream 的. 也就是说, 如果在调用 pipe 之前调用了 writeStream.destroy() 关闭可写流. 程序依然可以执行只是没有预期的效果. 气人的是, 连报错都没有…</p>\n<p>当前步骤的示例代码在<a href=\"https://github.com/luoquanquan/learn-fe/tree/pump-v1.1/metamask-learn/pump-learn\">这里</a></p>\n<h2 id=\"使用-pump-规范化流的处理流程\"><a href=\"#使用-pump-规范化流的处理流程\" class=\"headerlink\" title=\"使用 pump 规范化流的处理流程\"></a>使用 pump 规范化流的处理流程</h2><p>在项目中引入 pump 并包装可读流和可写流. 修改 index.js 的代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> pump = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;pump&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readStream = fs.<span class=\"title function_\">createReadStream</span>(<span class=\"string\">&#x27;./index.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> writeStream = fs.<span class=\"title function_\">createWriteStream</span>(<span class=\"string\">&#x27;./dest&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// writeStream.destroy()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">pump</span>(readStream, writeStream, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;发生错误, 写入失败 ~&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入完成&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">1e3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行 node index.js 之后可以成功读取并写入文件. 但是如果在写入之前关闭可写流的话(放开 <code>// writeStream.destroy()</code> 的注释), 控制台会报出错误. 业务代码可以通过规范化的错误信息做出相应的处理.</p>\n<p>当前步骤的代码在<a href=\"https://github.com/luoquanquan/learn-fe/tree/pump-v2/metamask-learn/pump-learn\">这里</a></p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.npmjs.com/package/once</span></span><br><span class=\"line\"><span class=\"comment\">// Only call a function once.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> once = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;once&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// https://www.npmjs.com/package/end-of-stream</span></span><br><span class=\"line\"><span class=\"comment\">// A node module that calls a callback when a readable/writable/duplex stream has completed or failed.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> eos = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;end-of-stream&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>) <span class=\"comment\">// we only need fs to get the ReadStream and WriteStream prototypes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> noop = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://nodejs.org/api/process.html#processversion</span></span><br><span class=\"line\"><span class=\"comment\">// ancient 古老的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ancient = <span class=\"regexp\">/^v?\\.0/</span>.<span class=\"title function_\">test</span>(process.<span class=\"property\">version</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isFn = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> fn === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否为文件流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isFS = <span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ancient) <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// newer node version do not need to care about fs is a special way</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs) <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// browser</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (stream <span class=\"keyword\">instanceof</span> (fs.<span class=\"property\">ReadStream</span> || noop) || stream <span class=\"keyword\">instanceof</span> (fs.<span class=\"property\">WriteStream</span> || noop)) &amp;&amp; <span class=\"title function_\">isFn</span>(stream.<span class=\"property\">close</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否是请求</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRequest = <span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stream.<span class=\"property\">setHeader</span> &amp;&amp; <span class=\"title function_\">isFn</span>(stream.<span class=\"property\">abort</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 销毁流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> destroyer = <span class=\"keyword\">function</span> (<span class=\"params\">stream, reading, writing, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 确保 callback 只会执行一次</span></span><br><span class=\"line\">  callback = <span class=\"title function_\">once</span>(callback)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听流的关闭事件</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> closed = <span class=\"literal\">false</span></span><br><span class=\"line\">  stream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    closed = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听流的结束事件</span></span><br><span class=\"line\">  <span class=\"title function_\">eos</span>(stream, &#123;<span class=\"attr\">readable</span>: reading, <span class=\"attr\">writable</span>: writing&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前流完成或者出错了直接调用回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前流非错误关闭修改关闭标识</span></span><br><span class=\"line\">    closed = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> destroyed = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (closed) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (destroyed) <span class=\"keyword\">return</span></span><br><span class=\"line\">    destroyed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFS</span>(stream)) <span class=\"keyword\">return</span> stream.<span class=\"title function_\">close</span>(noop) <span class=\"comment\">// use close for fs streams to avoid fd leaks</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isRequest</span>(stream)) <span class=\"keyword\">return</span> stream.<span class=\"title function_\">abort</span>() <span class=\"comment\">// request.destroy just do .end - .abort is what we want</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFn</span>(stream.<span class=\"property\">destroy</span>)) <span class=\"keyword\">return</span> stream.<span class=\"title function_\">destroy</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(err || <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;stream was destroyed&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> call = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 管道</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pipe = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"keyword\">from</span>, to</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">from</span>.<span class=\"title function_\">pipe</span>(to)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pump = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> streams = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 默认认为最后一个参数为回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"title function_\">isFn</span>(streams[streams.<span class=\"property\">length</span> - <span class=\"number\">1</span>] || noop) &amp;&amp; streams.<span class=\"title function_\">pop</span>() || noop</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 兼容以数组的形式传入参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(streams[<span class=\"number\">0</span>])) streams = streams[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (streams.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;pump requires two streams per minimum&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> error</span><br><span class=\"line\">  <span class=\"keyword\">var</span> destroys = streams.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span> (<span class=\"params\">stream, i</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 除了最后一个都是可读的流</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reading = i &lt; streams.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 除了第一个都是可写的流</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> writing = i &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">destroyer</span>(stream, reading, writing, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!error) error = err</span><br><span class=\"line\">      <span class=\"comment\">// 如果有一个流出错, 直接销毁所有的流</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) destroys.<span class=\"title function_\">forEach</span>(call)</span><br><span class=\"line\">      <span class=\"comment\">// 除了最后一个流关闭都不处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (reading) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果最后一个流关闭 / 完成了那就关闭所有流</span></span><br><span class=\"line\">      destroys.<span class=\"title function_\">forEach</span>(call)</span><br><span class=\"line\">      <span class=\"comment\">// 并且执行回调函数通知业务层</span></span><br><span class=\"line\">      <span class=\"title function_\">callback</span>(error)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里和我们自己写 pipe 的方式一样</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> streams.<span class=\"title function_\">reduce</span>(pipe)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = pump</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"node-原生已经支持了-😂\"><a href=\"#node-原生已经支持了-😂\" class=\"headerlink\" title=\"node 原生已经支持了 😂\"></a>node 原生已经支持了 😂</h2><p>经过我叮咣一顿乱整, 对于 pump 这个模块算是搞明白了. 然后就看到了<a href=\"https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback\">这个文档</a>, <code>node v10.0.0</code> 新增的 api 已经原生实现了…</p>\n<p>原生 api 使用方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; pipeline &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node:stream&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node:fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node:zlib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use the pipeline API to easily pipe a series of streams</span></span><br><span class=\"line\"><span class=\"comment\">// together and get notified when the pipeline is fully done.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A pipeline to gzip a potentially huge tar file efficiently:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">pipeline</span>(</span><br><span class=\"line\">  fs.<span class=\"title function_\">createReadStream</span>(<span class=\"string\">&#x27;archive.tar&#x27;</span>),</span><br><span class=\"line\">  zlib.<span class=\"title function_\">createGzip</span>(),</span><br><span class=\"line\">  fs.<span class=\"title function_\">createWriteStream</span>(<span class=\"string\">&#x27;archive.tar.gz&#x27;</span>),</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Pipeline failed.&#x27;</span>, err);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Pipeline succeeded.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/mafintosh/pump\">https://github.com/mafintosh/pump</a></li>\n<li><a href=\"http://www.npmdoc.org/pumpzhongwenwendangpump-jszhongwenjiaochengjiexi.html\">pump中文文档</a></li>\n<li><a href=\"https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback\">stream.pipeline(streams, callback)</a></li>\n<li><a href=\"https://nodejs.org/zh-cn/docs/guides/backpressuring-in-streams/\">数据流中的积压问题</a></li>\n</ul>\n","categories":["开发笔记","web3","MetaMask 源码"],"tags":["开发笔记"]},{"title":"12. 矩阵中的路径","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/DFS/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/DFS/12.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请设计一个函数, 用来判断一个字符串中是否存在一条包含某字符串所有字符的路径. 路径可以从矩阵的任意一格开始, 每一步都可以在矩阵中 ↑ ↓ ← → 移动一格, 如果一条路经过了矩阵的某一格. 那么该路径不能再进入该格子. 例如在以下矩阵中包含了 <code>bfce</code> 路径.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;],</span><br><span class=\"line\">    [&quot;s&quot;, &quot;f&quot;, &quot;c&quot;, &quot;s&quot;],</span><br><span class=\"line\">    [&quot;a&quot;, &quot;d&quot;, &quot;e&quot;, &quot;e&quot;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>但是不能够包含字符串 <code>abfb</code> 因为路径占用了 <code>b</code> 之后就不能再次进入这个格子了</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: board = [</span><br><span class=\"line\">    [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],</span><br><span class=\"line\">    [&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],</span><br><span class=\"line\">    [&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]</span><br><span class=\"line\">], word = &quot;ABCCED&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: board = [</span><br><span class=\"line\">    [&quot;a&quot;, &quot;b&quot;],</span><br><span class=\"line\">    [&quot;c&quot;, &quot;d&quot;]</span><br><span class=\"line\">], word = &quot;abcd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>深度优先搜索. 从一个节点搜索到底, 再回溯上一个节点, 沿另一个方向继续搜索, 递归执行. 在搜索过程中, 如果遇到该路径不可能与目标字符串匹配的情况则立即返回.</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>递归参数: 当前元素在矩阵 <code>board</code> 中的行列索引 <code>i</code> 和 <code>j</code>, 当前目标字符在 word 中的索引 <code>k</code>.</li>\n<li>终止条件:<ul>\n<li>行或列索引越界或当前矩阵元素与目标字符不同, 返回 false</li>\n<li>目标字符串全部匹配成功, 返回 true</li>\n</ul>\n</li>\n<li>将当前元素的值暂存在 temp 中, 修改为字符 ‘&#x2F;‘ 以此标记为该元素已访问. 通过 temp 变量值可以免去新建一个访问过的字符串数组, 节省空间</li>\n<li>向其他方向继续搜索, 并记录结果, 遇到 false 则返回</li>\n<li>将 temp 值还原到当前元素</li>\n<li>返回结果</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dfs</span> = (<span class=\"params\">board, words, i, j, k</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= board.<span class=\"property\">length</span> || i &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &gt;= board[<span class=\"number\">0</span>].<span class=\"property\">length</span> || j &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (board[i][j] !== words[k]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === words.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = board[i][j]</span><br><span class=\"line\">    board[i][j] = <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"title function_\">dfs</span>(board, words, i - <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>) || <span class=\"title function_\">dfs</span>(board, words, i + <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>) || <span class=\"title function_\">dfs</span>(board, words, i, j - <span class=\"number\">1</span>, k + <span class=\"number\">1</span>) || <span class=\"title function_\">dfs</span>(board, words, i, j + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>)</span><br><span class=\"line\">    board[i][j] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">exist</span> = (<span class=\"params\">board, word</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> words = [...word]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; board.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = board[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; element.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">dfs</span>(board, words, i, j, <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(exist([</span></span><br><span class=\"line\"><span class=\"comment\">//     [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">//     [&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">//     [&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// ], &quot;ABCCED&quot;))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">exist</span>([</span><br><span class=\"line\">    [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\">], <span class=\"string\">&quot;abcd&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","DFS"],"tags":["算法"]},{"title":"小狐狸依赖-post-message-stream","url":"/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask-%E6%BA%90%E7%A0%81/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/web3/MetaMask%20%E6%BA%90%E7%A0%81/%E5%B0%8F%E7%8B%90%E7%8B%B8%E4%BE%9D%E8%B5%96-post-message-stream/","content":"<blockquote>\n<p>阅读 metamask 的 package.json 的过程中, 第一个吸引我注意的 npm 包就是 post-message-stream. 无它, 唯眼熟尔.</p>\n</blockquote>\n<h2 id=\"首先想到-postMessage\"><a href=\"#首先想到-postMessage\" class=\"headerlink\" title=\"首先想到 postMessage\"></a>首先想到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">postMessage</a></h2><blockquote>\n<p>一个窗口可以获得对另一个窗口的引用 (比如 targetWindow &#x3D; window.opener), 然后在窗口上调用 targetWindow.postMessage() 方法分发一个 MessageEvent 消息. 接收消息的窗口可以根据需要自由处理此事件 (en-US). 传递给 window.postMessage() 的参数(比如 message)将通过消息事件对象暴露给接收消息的窗口</p>\n</blockquote>\n<p>简单的说, 你首先打开一个页面 <code>index</code>, 然后在这个页面通过 <code>window.open()</code> 打开一个子页面, 此时就能通过 <code>postMessage</code> 实现两个父子页面之间的通信. <code>此外postMessage</code> 还常用于 <code>webWorker</code> 和主进程之间的通信.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"举个-🌰\"><a href=\"#举个-🌰\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><p>为了便于理解, 我搞了个测试项目用于, 笔记好记性不如烂笔头子.</p>\n<p>首先, 你有一个 <code>index.html</code> 作为父级页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-open-foo&quot;</span>&gt;</span>open Foo<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-hi-via-post-message&quot;</span>&gt;</span>hi this is Home via post message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父级页面中引入的 js 文件为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooPage</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-open-foo&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    fooPage = <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;/sub-html/foo.html&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-hi-via-post-message&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fooPage) &#123;</span><br><span class=\"line\">        fooPage.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;hi this is Home Page&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Current timestamp <span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span> data: `</span>, data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过 js 中我们不难发现, 项目中还需要一个 <code>sub-html/foo.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- sub-html/foo.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Foo Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-send&quot;</span>&gt;</span>hi this is Foo Page<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./foo.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在它的同级, 还需要一个 <code>foo.js</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-send&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">opener</span>.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;hi this is Foo Page&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Current timestamp <span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span> data: `</span>, data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上为 postMessage 简单应用的实例, 代码过于简单, 不做逐行注释. 其中需要特殊说明的是在子页面中 <code>window.opener</code> 其实就是对打开这个子页面的父级页面的 <code>window</code> 引用, eg:</p>\n<p>大头儿子.opener &#x3D;&#x3D;&#x3D; 小头爸爸 &#x3D;&gt; true</p>\n<p><small>PS: 仅作为技术实例, 不做真实性判断</small></p>\n<h3 id=\"运行示例代码\"><a href=\"#运行示例代码\" class=\"headerlink\" title=\"运行示例代码\"></a>运行示例代码</h3><p>上述示例代码均已上传 <a href=\"https://github.com/luoquanquan/learn-fe/tree/post-message-stream-learn-v1/metamask-learn/post-message-stream-learn\">github</a>, 纸上得来终觉浅, 建议手敲一下. 20 来分钟就能搞定. 由于项目中用到了 npm 的 jQuery 包. 所以用 <a href=\"https://zh.parceljs.org/\">parcel</a> 构建了一下, 直接 <code>npm start</code> 即可.</p>\n<p>代码运行完成后浏览器访问 <a href=\"http://localhost:1234/index.html\">http://localhost:1234/index.html</a> 即可打开 <code>Index Page</code>. postMessage 的工作过程如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/post-message.gif\"></p>\n<h2 id=\"小狐狸依赖-post-message-stream-4-0-0\"><a href=\"#小狐狸依赖-post-message-stream-4-0-0\" class=\"headerlink\" title=\"小狐狸依赖 post-message-stream@^4.0.0\"></a>小狐狸依赖 post-message-stream@^4.0.0</h2><blockquote>\n<p>Sets up a duplex object stream over window.postMessage, between pages or a dedicated Web Worker and its parent window.</p>\n</blockquote>\n<p>在 <code>post-message-stream@^4.0.0</code> 的官方描述中. 这个库的作用是创建一个用于跨页面或者父级页面和 Web Worker 通信的双工对象流. 在最新的版本中其实它还支持 <code>nodejs</code> 但是在 <code>metamask</code> 中其实只用到了 <code>^4.0.0</code> 这个版本. 因此这里按下不表.</p>\n<h3 id=\"举个-🌰-1\"><a href=\"#举个-🌰-1\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><p>基于刚刚的 <code>postMessage</code> 示例进行改造, 首先安装依赖</p>\n<ul>\n<li>npm i @metamask&#x2F;post-message-stream@^4.0.0</li>\n</ul>\n<p>添加 <code>bar.html</code> 子页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- sub-html/bar.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Bar<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bar Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-send&quot;</span>&gt;</span>hi this is Bar Page<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./bar.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>bar.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WindowPostMessageStream</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/post-message-stream&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意这里的 name 和 target 和 index.js 中的两个同名字段是反过来的. 以此来实现两者的双向绑定</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> barStream = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;barStream&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;indexStream&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">targetWindow</span>: <span class=\"variable language_\">window</span>.<span class=\"property\">opener</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">barStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span> receive data via stream: `</span>, data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-send&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    barStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hi this is Bar Page&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>优化 indexPage</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-open-foo&quot;</span>&gt;</span>open Foo<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-open-bar&quot;</span>&gt;</span>open Bar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-hi-via-post-message&quot;</span>&gt;</span>hi this is Home via post message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn-hi-via-stream&quot;</span>&gt;</span>hi this is Home via stream<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WindowPostMessageStream</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/post-message-stream&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooPage</span><br><span class=\"line\"><span class=\"keyword\">let</span> barPage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">registerBarStream</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> indexStream = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;indexStream&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;barStream&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">targetWindow</span>: barPage</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    indexStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span> receive data via stream: `</span>, data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    indexStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;before -----&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#btn-hi-via-stream&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        indexStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hi this is Home via stream&#x27;</span>)</span><br><span class=\"line\">        indexStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hi this is Home via stream 2&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-open-foo&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    fooPage = <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;/sub-html/foo.html&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-open-bar&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    barPage = <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;/sub-html/bar.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">registerBarStream</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn-hi-via-post-message&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fooPage) &#123;</span><br><span class=\"line\">        fooPage.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;hi this is Home Page&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// window.addEventListener(&#x27;message&#x27;, (&#123;data&#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(`Current timestamp $&#123;Date.now()&#125; data: `, data)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>PS: 由于 <code>post-message-stream</code> 底层也会用到 postMessage, 为了不影响测试效果. 这里把 <code>index.js</code> 中的监听移除了.</p>\n<p>最后修改 <code>package.json</code>, 在 script 命令中添加 bar.html 入口…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;start&quot;: &quot;parcel index.html sub-html/foo.html sub-html/bar.html&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行示例代码-1\"><a href=\"#运行示例代码-1\" class=\"headerlink\" title=\"运行示例代码\"></a>运行示例代码</h3><p>上述示例代码均已上传 <a href=\"https://github.com/luoquanquan/learn-fe/tree/post-message-stream-learn-v2/metamask-learn/post-message-stream-learn\">github</a> 代码运行的工作过程如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/post-message-stream.gif\"></p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p><a href=\"mailto:&#112;&#111;&#x73;&#x74;&#x2d;&#x6d;&#x65;&#x73;&#115;&#x61;&#103;&#x65;&#x2d;&#115;&#x74;&#114;&#x65;&#97;&#109;&#64;&#52;&#46;&#x30;&#x2e;&#48;\">&#112;&#111;&#x73;&#x74;&#x2d;&#x6d;&#x65;&#x73;&#115;&#x61;&#103;&#x65;&#x2d;&#115;&#x74;&#114;&#x65;&#97;&#109;&#64;&#52;&#46;&#x30;&#x2e;&#48;</a> 版本引入的 ts, 对于基础逻辑进行了拆分在一定程度上就造成了阅读的困难. 鉴于此, 下文中我们先对 v3 版本解析, 再对 v4 版本解析.</p>\n<h3 id=\"post-message-stream-3\"><a href=\"#post-message-stream-3\" class=\"headerlink\" title=\"post-message-stream@3\"></a>post-message-stream@3</h3><p>以下为 post-message-stream@3 版本核心源码, 区区 74 行代码就实现了一个稳定的跨终端的双工流.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个包是对 node stream 模块的封装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DuplexStream</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;readable-stream&#x27;</span>).<span class=\"property\">Duplex</span></span><br><span class=\"line\"><span class=\"comment\">// 这个是 node 继承用的, 远古时期有个手写原型继承的面试题. 实现的就是这个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> inherits = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>).<span class=\"property\">inherits</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 简单的实现大概就是这个样子</span></span><br><span class=\"line\"><span class=\"comment\">function inherits(subCls, supCls) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // 子类原型为父类实例, 用于继承父类原型上的方法</span></span><br><span class=\"line\"><span class=\"comment\">    subCls.prototype = new supCls</span></span><br><span class=\"line\"><span class=\"comment\">    // 构造函数修正</span></span><br><span class=\"line\"><span class=\"comment\">    subCls.prototype.constructor = subCls</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">PostMessageStream</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">inherits</span>(<span class=\"title class_\">PostMessageStream</span>, <span class=\"title class_\">DuplexStream</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PostMessageStream</span> (opts) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个继承, 太经典了. 具体的知识点忘了可以看看这里</span></span><br><span class=\"line\">  <span class=\"comment\">// https://weread.qq.com/web/reader/751326d0720befab7514782k0723244023c072b030ba601</span></span><br><span class=\"line\">  <span class=\"title class_\">DuplexStream</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下 objectMode 为 false, 我们只可以给流里边写入字符串, Buffer 或 Uint8Array.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果直接怼一个 object 进去, 嘎, 报错了...</span></span><br><span class=\"line\">    <span class=\"comment\">// Uncaught TypeError: Invalid non-string/buffer chunk</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以需要指定 objectMode 为 true 来允许我们在不同终端间传递 object</span></span><br><span class=\"line\">    <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化参数</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = opts.<span class=\"property\">name</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_target</span> = opts.<span class=\"property\">target</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span> = opts.<span class=\"property\">targetWindow</span> || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_origin</span> = (opts.<span class=\"property\">targetWindow</span> ? <span class=\"string\">&#x27;*&#x27;</span> : location.<span class=\"property\">origin</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// initialization flags</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_init</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_onMessage</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>), <span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"comment\">// send syncorization message</span></span><br><span class=\"line\">  <span class=\"comment\">// 发送握手包</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"string\">&#x27;SYN&#x27;</span>, <span class=\"literal\">null</span>, noop)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 继承自 Duplex, 调用此方法后到调用 this.uncork()</span></span><br><span class=\"line\">  <span class=\"comment\">// 之前写入流中的数据将会保存至缓冲区而不会直接提供给下游消费.</span></span><br><span class=\"line\">  <span class=\"comment\">// 直到调用 this.uncork(); 才会从缓冲区拿出之前写入的所有数据给到下游</span></span><br><span class=\"line\">  <span class=\"comment\">// 在前文示例中, 如果 indexPage 比较猴急, 打开 bar 页面后没等握手完成直接发数据过来</span></span><br><span class=\"line\">  <span class=\"comment\">// 就会写入到缓冲区待用了</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cork</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// private</span></span><br><span class=\"line\"><span class=\"title class_\">PostMessageStream</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_onMessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> msg = event.<span class=\"property\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// validate message</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_origin</span> !== <span class=\"string\">&#x27;*&#x27;</span> &amp;&amp; event.<span class=\"property\">origin</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_origin</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">source</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> msg !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msg.<span class=\"property\">target</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!msg.<span class=\"property\">data</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前终端还没有初始化, 先进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_init</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这个三次握手的过程有点类似 tcp 三次握手的过程, 具体的时序图在下文</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.<span class=\"property\">data</span> === <span class=\"string\">&#x27;SYN&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"string\">&#x27;ACK&#x27;</span>, <span class=\"literal\">null</span>, noop)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.<span class=\"property\">data</span> === <span class=\"string\">&#x27;ACK&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_init</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"string\">&#x27;ACK&#x27;</span>, <span class=\"literal\">null</span>, noop)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">uncork</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//  如果当前终端已经完成初始化, 接受数据并处理</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// forward message</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(msg.<span class=\"property\">data</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;error&#x27;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stream plumbing</span></span><br><span class=\"line\"><span class=\"comment\">// Readable 流实现都必须提供</span></span><br><span class=\"line\"><span class=\"comment\">// Duplex 为双工流可读可写, 所以也必须实现</span></span><br><span class=\"line\"><span class=\"comment\">// 主要用于处理可读流的读取操作的底层逻辑</span></span><br><span class=\"line\"><span class=\"title class_\">PostMessageStream</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_read</span> = noop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向流中写入内容的底层处理, 实质上就是调用了 window.postMessage 告诉对方</span></span><br><span class=\"line\"><span class=\"title class_\">PostMessageStream</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_write</span> = <span class=\"keyword\">function</span> (<span class=\"params\">data, encoding, cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">_target</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span>.<span class=\"title function_\">postMessage</span>(message, <span class=\"variable language_\">this</span>.<span class=\"property\">_origin</span>)</span><br><span class=\"line\">  <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// util</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">noop</span> () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中, 握手的过程时序图如下:<br><img src=\"https://handle-note-img.niubishanshan.top/20220927114850.png\" alt=\"20220927114850\"></p>\n<h3 id=\"post-message-stream-4\"><a href=\"#post-message-stream-4\" class=\"headerlink\" title=\"post-message-stream@4\"></a>post-message-stream@4</h3><p>以下为 post-message-stream@4 代码, 相对于 v3 的主要区别是为了适配更多的环境 (node, webWorker) 对于握手和数据处理模块做了更深程度的抽象.</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BasePostMessageStream.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Nodejs 双工流类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Duplex</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;readable-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 空函数作为回调默认值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">noop</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 握手包名称</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SYN</span> = <span class=\"string\">&#x27;SYN&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">ACK</span> = <span class=\"string\">&#x27;ACK&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">StreamData</span> = <span class=\"built_in\">string</span> | <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">unknown</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PostMessageEvent</span> &#123;</span><br><span class=\"line\">  data?: <span class=\"title class_\">StreamData</span>;</span><br><span class=\"line\">  <span class=\"attr\">origin</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">source</span>: <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Abstract base class for postMessage streams.</span></span><br><span class=\"line\"><span class=\"comment\"> * 他说这是个抽象类. 意思是你不能实例化它, 要实例化它的子类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BasePostMessageStream</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Duplex</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 是否初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_init</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 是否已经接受/发出过握手包</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_haveSyn</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialization flags</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_init</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Must be called at end of child constructor to initiate</span></span><br><span class=\"line\"><span class=\"comment\">   * communication with other end.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 子类初始化时候调用的, 开始握手的方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"title function_\">_handshake</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Send synchronization message</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"variable constant_\">SYN</span>, <span class=\"literal\">null</span>, noop);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">cork</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 收到其他终端发来的数据处理</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"title function_\">_onData</span>(<span class=\"attr\">data</span>: <span class=\"title class_\">StreamData</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_init</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Forward message</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(data);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;error&#x27;</span>, err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data === <span class=\"variable constant_\">SYN</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Listen for handshake</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"variable constant_\">ACK</span>, <span class=\"literal\">null</span>, noop);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data === <span class=\"variable constant_\">ACK</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_init</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_haveSyn</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_write</span>(<span class=\"variable constant_\">ACK</span>, <span class=\"literal\">null</span>, noop);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">uncork</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Child classes must implement this function.</span></span><br><span class=\"line\"><span class=\"comment\">   * 抽象方法, 不同的 runtime 实现的方式不同</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">_postMessage</span>(_data?: <span class=\"built_in\">unknown</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">_read</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Duplex</span></span><br><span class=\"line\">  <span class=\"comment\">// 发送数据 or 握手包 Duplex 流中调用 write 时触发的底层逻辑</span></span><br><span class=\"line\">  <span class=\"title function_\">_write</span>(<span class=\"attr\">data</span>: <span class=\"title class_\">StreamData</span>, <span class=\"attr\">_encoding</span>: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span>, <span class=\"attr\">cb</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_postMessage</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用回调表示写入逻辑处理完成</span></span><br><span class=\"line\">    <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WindowPostMessageStream.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BasePostMessageStream</span>,</span><br><span class=\"line\">  <span class=\"title class_\">PostMessageEvent</span>,</span><br><span class=\"line\">  <span class=\"title class_\">StreamData</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./BasePostMessageStream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">WindowPostMessageStreamArgs</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  <span class=\"attr\">target</span>: string;</span><br><span class=\"line\">  targetWindow?: <span class=\"title class_\">Window</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Window.postMessage stream.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WindowPostMessageStream</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BasePostMessageStream</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前流名称</span></span><br><span class=\"line\">  private <span class=\"attr\">_name</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目标流名称</span></span><br><span class=\"line\">  private <span class=\"attr\">_target</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目标页面所在的域名</span></span><br><span class=\"line\">  private <span class=\"attr\">_targetOrigin</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目标页面 window 对象 (基于 _targetWindow.postMessage)</span></span><br><span class=\"line\">  private <span class=\"attr\">_targetWindow</span>: <span class=\"title class_\">Window</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Creates a stream for communicating with other streams across the same or</span></span><br><span class=\"line\"><span class=\"comment\">   * different window objects.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> args.name - The name of the stream. Used to differentiate between</span></span><br><span class=\"line\"><span class=\"comment\">   * multiple streams sharing the same window object.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> args.target - The name of the stream to exchange messages with.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> args.targetWindow - The window object of the target stream. Defaults</span></span><br><span class=\"line\"><span class=\"comment\">   * to `window`.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">&#123; name, target, targetWindow &#125;: WindowPostMessageStreamArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name || !target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Invalid input.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 参数初始化</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_target</span> = target;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_targetOrigin</span> = targetWindow ? <span class=\"string\">&#x27;*&#x27;</span> : location.<span class=\"property\">origin</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span> = targetWindow || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_onMessage</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">_onMessage</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_onMessage</span> <span class=\"keyword\">as</span> any, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发起握手请求</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是第一个终端, 握手请求会被废弃</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是第二个终端, 握手请求会被第一个终端接收到</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_handshake</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发送数据, 实际就是调用 window.postMessage</span></span><br><span class=\"line\">  protected <span class=\"title function_\">_postMessage</span>(<span class=\"attr\">data</span>: unknown): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span>.<span class=\"title function_\">postMessage</span>(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">_target</span>,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_targetOrigin</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 接收信息</span></span><br><span class=\"line\">  private <span class=\"title function_\">_onMessage</span>(<span class=\"attr\">event</span>: <span class=\"title class_\">PostMessageEvent</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = event.<span class=\"property\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// validate message</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      (<span class=\"variable language_\">this</span>.<span class=\"property\">_targetOrigin</span> !== <span class=\"string\">&#x27;*&#x27;</span> &amp;&amp; event.<span class=\"property\">origin</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_targetOrigin</span>) ||</span><br><span class=\"line\">      event.<span class=\"property\">source</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_targetWindow</span> ||</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> message !== <span class=\"string\">&#x27;object&#x27;</span> ||</span><br><span class=\"line\">      message.<span class=\"property\">target</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> ||</span><br><span class=\"line\">      !message.<span class=\"property\">data</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用父类定义的 _onData 处理数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_onData</span>(message.<span class=\"property\">data</span> <span class=\"keyword\">as</span> <span class=\"title class_\">StreamData</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// destroy 方法的底层实现</span></span><br><span class=\"line\">  <span class=\"title function_\">_destroy</span>(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_onMessage</span> <span class=\"keyword\">as</span> any, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cork-amp-uncork\"><a href=\"#cork-amp-uncork\" class=\"headerlink\" title=\"cork &amp; uncork\"></a>cork &amp; uncork</h3><blockquote>\n<p>在向流中写入大量小块数据（small chunks of data）时，内部缓冲区（internal buffer）可能失效，从而导致性能下降。writable.cork() 方法主要就是用来避免这种情况。</p>\n</blockquote>\n<p>对于这段我的理解是, 每个可写流会有一个内部缓冲区. 当我们哐哧哐哧给内部缓冲区写小块儿的东西给它怼满了, 就会导致其失效. 所以当我们需要频繁写入小块内容时. 可以先调用 writable.cork 强制将 writable.write 的内容写入到内存中. 等批量小块儿内容写入完成再调用 writable.uncork 统一释放出来.</p>\n<p>示例代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Writable</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;stream&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWritableStream</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Writable</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">_write</span>(<span class=\"params\">data, _encoding, next</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myWritableStream = <span class=\"keyword\">new</span> <span class=\"title class_\">MyWritableStream</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 2 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 3 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 4 ~&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"><span class=\"comment\">// hello world ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 2 ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 3 ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 4 ~</span></span><br></pre></td></tr></table></figure>\n\n<p>执行上述代码, 所有的 <code>hello world</code> 都会打印出来, 但是如果稍作修改改为以下代码.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Writable</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;stream&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWritableStream</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Writable</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">_write</span>(<span class=\"params\">data, _encoding, next</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myWritableStream = <span class=\"keyword\">new</span> <span class=\"title class_\">MyWritableStream</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world ~&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ++++++++++++++++++</span></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">cork</span>()</span><br><span class=\"line\"><span class=\"comment\">// ++++++++++++++++++</span></span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 2 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 3 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 4 ~&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"><span class=\"comment\">// hello world ~</span></span><br></pre></td></tr></table></figure>\n\n<p>此时便只会打印出 <code>hello world ~</code> 后边三个不会打印, 因为 <code>myWritableStream.cork()</code> 之后写入流的内容被强制写入到了内存中没有释放. 再次修改代码, 再最后加上 <code>myWritableStream.uncork()</code> 即可释放 <code>myWritableStream.cork()</code> 之后写入的数据块.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Writable</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;stream&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWritableStream</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Writable</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">_write</span>(<span class=\"params\">data, _encoding, next</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myWritableStream = <span class=\"keyword\">new</span> <span class=\"title class_\">MyWritableStream</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world ~&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">cork</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 2 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 3 ~&#x27;</span>)</span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello world 4 ~&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ++++++++++++++++++</span></span><br><span class=\"line\">myWritableStream.<span class=\"title function_\">uncork</span>()</span><br><span class=\"line\"><span class=\"comment\">// ++++++++++++++++++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出:</span></span><br><span class=\"line\"><span class=\"comment\">// hello world ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 2 ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 3 ~</span></span><br><span class=\"line\"><span class=\"comment\">// hello world 4 ~</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>也算是熟读了这块的源码还是有些疑惑, 单纯用 postMessage 应该是可以满足小狐狸钱包相关的数据通信的. 使用双工流的优势:</p>\n<ol>\n<li>处理大规模数据时不会出现内存瓶颈</li>\n<li>cork &#x2F; uncork 保证了主进程在子进程初始化完成前就发送数据的完整性</li>\n</ol>\n<p>但是这两个优点 postMessage + 部分逻辑也可以搞定, 想不通作者为啥这么用. 而且根据考古 7 年前(也就是小狐狸项目初期)的 <a href=\"https://github.com/MetaMask/metamask-extension/commit/72a747165dda417aa7968e44b404eb90707202a2\">这次提交</a> 作者升级了 web3(0.9.2 -&gt; 0.15.1) 同时通信机制从 <code>postMessage</code> 切换到了 <code>post-message-stream</code> 但是不知两者是否有关联 🤔</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://zh.parceljs.org/\">parcel 官方文档</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">postMessage</a></li>\n<li><a href=\"https://github.com/MetaMask/post-message-stream\">post-message-stream</a></li>\n<li><a href=\"http://nodejs.cn/api-v12/stream.html#stream_class_stream_duplex\">Duplex 类</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49317685/read-is-not-implemented-on-readable-stream\">_read() is not implemented on Readable stream</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/36728655\">Node.js 流（stream）：你需要知道的一切</a></li>\n<li><a href=\"https://tech.meituan.com/2016/07/08/stream-basics.html\">Node.js Stream - 基础篇</a></li>\n<li><a href=\"https://www.tutorialspoint.com/stream-writable-cork-and-uncork-method-in-node-js\">Stream writable.cork() and uncork() Method in Node.js</a></li>\n<li><a href=\"https://xiaohuochai.site/BE/node/file/stream.html\">数据流stream</a></li>\n</ul>\n","categories":["开发笔记","web3","MetaMask 源码"],"tags":["开发笔记"]},{"title":"03. 数组中重复的数字","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/03.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在一个长度为 n 的数组 nums 里的所有数字都在 n ~ n - 1 的范围内. 数组中某些数字是重复的, 但是不知道有几个数字重复了, 也不知道每个数字重复了几次. 请找出数组中任意一个重复的数字.</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [2, 3, 1, 0, 2, 5, 3]</span><br><span class=\"line\">输出: 2 或 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>使用 Set 来进行处理, 遍历给定的数组往 Set 中添加, 如果 Set 中已经存在当前元素了则返回该元素.</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">findRepeatNumber</span> = nums =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>; idx &lt; nums.<span class=\"property\">length</span>; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ele = nums[idx];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set.<span class=\"title function_\">has</span>(ele)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            set.<span class=\"title function_\">add</span>(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">findRepeatNumber</span>([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]));</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","哈希表"],"tags":["算法"]},{"title":"50. 第一个只出现一次的字符","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/50.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在字符串 <code>s</code> 中找出第一个只出现一次的字符. 如果没有, 返回一个单空格, <code>s</code> 只包含小写字母…</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &#x27;abaccdeff&#x27;</span><br><span class=\"line\">输出: b</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &#x27;&#x27;</span><br><span class=\"line\">输出: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>首先定义一个 Map</li>\n<li>遍历 s, 如果 map 中没有当前的元素设置其为 map 元素, 如果 map 中存在当前元素, 则把 map[ele] 设置为 false</li>\n<li>再次遍历 s, 找到第一个 map 中值为 truthy 的元素并返回</li>\n<li>如果上一步中没有找到对应的元素, 则返回 ‘’</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">firstUniqChar</span> = s =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> char <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(char, !map.<span class=\"title function_\">has</span>(char))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> char <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"title function_\">get</span>(char)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> char</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">firstUniqChar</span>(<span class=\"string\">&#x27;abaccdeff&#x27;</span>));</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","哈希表"],"tags":["算法"]},{"title":"48. 最长不含重复字符的子字符串","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E5%93%88%E5%B8%8C%E8%A1%A8/48.%20%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请从字符串中找出一个最长的不包含重复字符的子字符串, 计算该最长子字符串的长度.</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 无重复的最长子串为 abc, 所以长度为 3</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;bbbb&quot;</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释: 无重复的最长子串为 b, 所以长度为 1</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 无重复的最长子串为 wke, 所以长度为 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h3><p>暴力解法相当于要双重循环时间复杂度达到了 O(n^2)</p>\n<h3 id=\"时间窗\"><a href=\"#时间窗\" class=\"headerlink\" title=\"时间窗\"></a>时间窗</h3><p>使用时间窗方案, 时间复杂度降低为 O(n)</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ul>\n<li>首先, 定义一个 Set 和记录最大长度的 maxLen</li>\n<li>遍历字符串, 如果 set 中不存在 s[i] 则将其加入 set, 并更新 maxLen</li>\n<li>如果 set 中存在 s[i] 则删除 set 中所有的值</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">lengthOfLongestSubstring</span> = str =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxLen = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> char = str[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!set.<span class=\"title function_\">has</span>(char)) &#123;</span><br><span class=\"line\">            set.<span class=\"title function_\">add</span>(char)</span><br><span class=\"line\">            maxLen = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxLen, set.<span class=\"property\">size</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; i) &#123;</span><br><span class=\"line\">                set.<span class=\"title function_\">delete</span>(str[j])</span><br><span class=\"line\">                j++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxLen</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">lengthOfLongestSubstring</span>(<span class=\"string\">&#x27;pwwkew&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","哈希表"],"tags":["算法"]},{"title":"04. 二维数组中的查找","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/04.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>现有矩阵 matrix 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,   <span class=\"number\">5</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,   <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">24</span>],</span><br><span class=\"line\">  [<span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>给定 target &#x3D; 5，返回  true。</p>\n<p>给定  target &#x3D; 20，返回  false。</p>\n<p>限制:</p>\n<p><code>0 &lt;= n &lt;= 1000</code></p>\n<p><code>0 &lt;= m &lt;= 1000</code></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>从矩阵左下角的数字开始, 他的上方的数比他小右边的数比他大. 所以从左下角开始. 如果当前数比 <code>target</code> 小就往右移动. 如果比 <code>target</code> 大就往上移动逐步向 <code>target</code> 靠近. 如果走到了矩阵的边界(也就是右上角)还没有找到合适的值. 那么说明矩阵中不存在指定的 <code>target</code> 值. 返回 <code>false</code></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">matrix</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findNumberIn2DArray = <span class=\"keyword\">function</span>(<span class=\"params\">matrix, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix.<span class=\"property\">length</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> &amp;&amp; y &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix[y][x] &gt; target) &#123;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[y][x] &lt; target) &#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"05. 替换空格","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/05.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p>\n<p>示例 1：</p>\n<p>输入：s &#x3D; “We are happy.”</p>\n<p>输出：”We%20are%20happy.”</p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 10000</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>创建一个新的字符串, 并遍历之前的字符串. 如果匹配到非空的字符直接添加到新的字符串中. 如果匹配到可空格则在新字符串中添加一个 <code>%20</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">replaceSpace</span> = str =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> char = str[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (char === <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            ret += <span class=\"string\">&#x27;%20&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ret += char</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"11. 旋转数组的最小数字","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾, 我们称之为数组的旋转. 输入一个递增排序的数组的一个旋转, 输出旋转数组的最小元素. 例如, 数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转, 该数组的最小值为 1</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：[3,4,5,1,2]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>实例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：[2,2,2,0,1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>二分查找, 数组是一个有序数组的旋转. 可以得出数组是有顺序的. 有序数组就要想到二分法</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ul>\n<li>初始化 left 和 right 两个指针</li>\n<li>每次都获取中间下标 <code>const mid = parseInt((left + right) / 2)</code></li>\n<li>因为数组是旋转得来的. 如果中间的数比右边的数小, 说明最小值在 [left, mid] 所以 right &#x3D; mid</li>\n<li>如果中间的数比右边的数大, 说明最小值在 [mid + 1, right] 所以 left &#x3D; mid + 1</li>\n<li>如果中间的数和右边的数大小相等, 则不知道最小值的位置. 此时让 right– 缩小搜索范围继续查找</li>\n</ul>\n<p>PS: 为什么通过 right– 缩小搜索范围而不是用 left++?</p>\n<ul>\n<li>因为数组是升序的, 所以最小值应该靠左.</li>\n<li>如果存在 [1,2,2,2,2] 这种情况时候, left &#x3D; 0, right &#x3D; 4, mid &#x3D; 2. 满足中间值和右侧的值相等. 如果 left++ 就 GG 了</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minArray</span> = numbers =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = numbers.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers[mid] &lt; numbers[right]) &#123;</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numbers[mid] &gt; numbers[right]) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers[left]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">minArray</span>([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]))</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"17. 打印从 1 到最大的 n 位数 - 解决方案","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/17.%20%E6%89%93%E5%8D%B0%E4%BB%8E%201%20%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84%20n%20%E4%BD%8D%E6%95%B0%20-%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入数字 n, 按顺序打印出从 1 到最大的 n 位十进制数. 比如输入 3 则依次打印 1,2,3…999.</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: n = 1</span><br><span class=\"line\">输出: [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><p>首先求出要打印的数字范围, 再从 1 开始打印到最大的数字</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><p>这个比较简单, n 位数其实就是 10 的 n 次方. 直接一个 for 循环搞定</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">printNumbers</span> = n =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> max = <span class=\"number\">10</span> ** n</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"21. 调整数组顺序使奇数位于偶数前面","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/21.%20%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个整数数组, 实现一个函数来调整该数组中数字的顺序. 使得所有奇数位于数组的前半部分. 偶数位于数组的后半部分</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：[1,3,2,4]</span><br><span class=\"line\">注：[3,1,2,4] 也是正确的答案之一。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><p>双指针, 首先定义左右两个指针. 然后左指针定位到偶数位右指针定位到奇数位. 定位后两者互换位置. 直到遍历完所有的元素</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ul>\n<li>确定左右指针变量, 分别为数组的头尾元素</li>\n<li>当 left &lt; right 时, 说明该数组遍历还么有完成, 继续…</li>\n<li>当 nums[left] 为奇数时 left++</li>\n<li>当 nums[right] 为偶数是 right–</li>\n<li>交换 left 和 right 的值</li>\n<li>下一轮, 直到遍历完所有所有元素</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">exchange</span> = nums =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            left++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> temp = nums[left]</span><br><span class=\"line\">        nums[left] = nums[right]</span><br><span class=\"line\">        nums[right] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exchange</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"53 - I. 在排序数组中查找数字 I","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/53%20-%20I.%20%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97%20I/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>统计一个数字在排序数组中出现的次数</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 105</li>\n<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>nums 是一个非递减数组</li>\n<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>\n</ul>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><ul>\n<li>因为数组本身是有序的, 所以利用二分法可以降低时间复杂度, 但是因为数组中的数字存在重复, 所以找到 target 在数组中的左右边界非常重要.</li>\n<li>最容易想到的方案就是, 利用二分法找到 target 在数组的左边界和右边界. 然后有边界减去左边界就会得道结果</li>\n<li>分别查找 target 的左右边界逻辑会有差异. 那么就可以直接查找 target 的右边界和 target - 1 的右边界. 问题就变成了两个查询右边界的问题, 但是代码可以进行复用了</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(log(n)), 二分查找的时间复杂度是 O(log(n))</li>\n<li>空间复杂度: O(1)O(1), 只需要保存左右边界和中间值即可</li>\n</ul>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先确定左右边界, left &#x3D; 0, right &#x3D; nums.length - 1</li>\n<li>当左边界不大于右边界的情况下进行查找</li>\n<li>计算 mid &#x3D; (left + right) &#x2F; 2</li>\n<li>如果 <code>nums[mid] &lt;= target</code> 说明右边界在 <code>[mid + 1, right]</code> 中间, left &#x3D; mid + 1</li>\n<li>如果 <code>nums[mid] &gt; target</code> 说明右边界在 <code>[left, mid - 1]</code> 中间, right &#x3D; mid - 1</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getRightMargin</span> = (<span class=\"params\">nums, target</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &lt;= target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">search</span> = (<span class=\"params\">nums, target</span>) =&gt; <span class=\"title function_\">getRightMargin</span>(nums, target) - <span class=\"title function_\">getRightMargin</span>(nums, target - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">search</span>([<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">search</span>([<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">search</span>([<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">search</span>([<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"39. 数组中出现次数超过一半的数字","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/39.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>数组中有一个数字出现的次数超过数组长度的一半, 请找出这个数字.</p>\n<p>你可以假设数组是非空的, 并且给定的数组总是存在多数元素.</p>\n<p>实例 1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>限制:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> &lt;= 数组长度 &lt;= <span class=\"number\">50000</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解法一-哈希技术\"><a href=\"#解法一-哈希技术\" class=\"headerlink\" title=\"解法一: 哈希技术\"></a>解法一: 哈希技术</h3><p>遍历 <code>nums</code> 数组, 将数字作为 <code>Object</code> 的一个 <code>key</code> 存储. 如果对象中已经存在 <code>key</code> 则执行 <code>++</code>, 遍历完成后编译一遍 <code>Object</code>, 找到出现次数大于一半的 <code>key</code> 即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">majorityElement</span> = nums =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\">    nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">        obj[ele] ? obj[ele]++ : obj[ele] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> idx <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[idx] &gt; (nums.<span class=\"property\">length</span> / <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> +idx</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">majorityElement</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解法二-摩尔投票\"><a href=\"#解法二-摩尔投票\" class=\"headerlink\" title=\"解法二: 摩尔投票\"></a>解法二: 摩尔投票</h3><p>遍历 <code>nums</code> 数组, 使用 <code>count</code> 进行计数. 记录当前出现的数字为 <code>cur</code>, 如果遍历到的 <code>ele</code> 和 <code>cur</code> 相等. 则 count 自增, 否则自减, 当其减小为 0 时则将 <code>cur</code> 修改为当前遍历的 <code>ele</code>, 通过增减抵消的方式, 最终达到剩下的数字是结果的效果, 时间复杂度为 O(n)</p>\n<h4 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h4><ol>\n<li>初始化: 预期结果 cur &#x3D; 0 和计数器 count &#x3D; 0</li>\n<li>遍历数组 nums, 遍历过程中取到的数字为 ele</li>\n<li>当 count 为 0 时, 表示不同的数字已经将当前的结果抵消掉了. 可以换新的数字进行尝试, 则 cur &#x3D; ele</li>\n<li>当 ele &#x3D; cur 时, 表示遍历的数字和预期结果相同则计数器 count ++</li>\n<li>当 ele !&#x3D; cur 时, 表示遍历的数字和预期结果不同则计数器 count –</li>\n<li>最终留下的数字 cur 就是最终的结果. 出现次数超过一半的数字一定不会被抵消掉, 最后保留了下来.</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">majorityElement</span> = nums =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur</span><br><span class=\"line\"></span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      cur = ele</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur === ele) &#123;</span><br><span class=\"line\">      count ++</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      count --</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">majorityElement</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"45. 把数组排成最小的数","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/45.%20%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个非负整数数组, 把数组里所有数字拼接起来排成一个数, 打印能拼接出的所有数字中最小的一个.</p>\n<p>示例 1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">10</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"string\">&#x27;102&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">输出: <span class=\"string\">&#x27;3033459&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>提示: <code>0 &lt; nums.length &lt;= 1000</code></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>拼接数组内所有元素使结果最小, 本质上是排序</li>\n<li>若字符串拼接 a + b &gt; b + a, 那么应该让 b &lt; a(b 在 a 的左边)</li>\n<li>根据上述规则对数组中的所有元素排序</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minNumber</span> = nums =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strs = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数字元素转字符串后存储</span></span><br><span class=\"line\">    nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> strs.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;&#x27;</span> + ele))</span><br><span class=\"line\"></span><br><span class=\"line\">    strs.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (a + b) - (b + a))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> strs.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">minNumber</span>([<span class=\"number\">3</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"53 - II. 0～n-1中缺失的数字","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/53%20-%20II.%200%EF%BD%9En-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的, 并且每个数字都在范围 0~n-1 之内. 在范围 0～n-1 内的 n 个数字中有且只有一个数字不在该数组中, 请找出这个数字.</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [0,1,3]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>实例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [0,1,2,3,4,5,6,7,9]</span><br><span class=\"line\">输出: 8</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>限制:</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000</p>\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>这个题目说白了就是一个小孩儿数数, 12345… 但是数着数着丢了一个. 然后让你把这个丢了的找出来.</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先, 已经排序的数组那肯定要有二分法. 找到初始的左右边界并计算中间序号 <code>left = 0, right = nums.length - 1, mid = Number.parseInt((left + right) / 2)</code></li>\n<li>判断 <code>nums[mid] === mid</code> 说明缺失的元素在右侧: left &#x3D; mid + 1</li>\n<li>如果 <code>nums[mid] !== mid</code> 说明缺失的元素在左侧: right &#x3D; mid - 1</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(logn)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getMissingNumber</span> = nums =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"58 - I. 翻转单词顺序","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/58%20-%20I.%20%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个英文句子, 翻转句子中单词的顺序, 但是单词内字符的顺序不变. 为了简单起见标点符号和普通字母一样处理. 例如输入字符串 <code>I am a student.</code> 则输出 <code>student. a am I</code></p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;the sky is blue&quot;</span><br><span class=\"line\">输出: &quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;  hello world!  &quot;</span><br><span class=\"line\">输出: &quot;world! hello&quot;</span><br><span class=\"line\">解释: trim 掉输入中的空格</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;a good   example&quot;</span><br><span class=\"line\">输出: &quot;example good a&quot;</span><br><span class=\"line\">解释: 如果两个单词中有多余的空格, 则只保留一个单词</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><p>先将开头和结尾处的多余的空格去掉, 从后向前遍历. 通过前后指针锁定单词, 跳过中间的空格, 最终将整个句子中的单词反转.</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先将原始字符串去掉开头和结尾的空格得到 tmp, 便于之后直接从单词处理开始</li>\n<li>初始化单词起始位置 start 和单词结束位置 end 指针, 位置在字符串的结尾处 (因为要倒着遍历)</li>\n<li>初始化结果字符串 ret</li>\n<li>当 start &gt;&#x3D; 0 时, 说明遍历尚未结束, 继续执行</li>\n<li>如果 <code>tmp[start]</code> 位置不是空格, 说明还没有获取到完整的单词, start–</li>\n<li>获取到完整的单词之后, 截取 <code>[start + 1, end + 1]</code> 这一段字符串加入到结果字符串中, 翻转单词</li>\n<li>如果 <code>tmp[start]</code> 位置仍然为空格, 说明还没有到下一个单词的结尾位置, start–</li>\n<li>找到单词结尾的位置后, end &#x3D; start 开始查找下一个单词</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverseWords</span> = s =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = s.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> end = s.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = s.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &gt;= <span class=\"number\">0</span> &amp;&amp; !<span class=\"regexp\">/ /</span>.<span class=\"title function_\">test</span>(tmp[start])) &#123;</span><br><span class=\"line\">            start--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret += tmp.<span class=\"title function_\">slice</span>(start + <span class=\"number\">1</span>, end + <span class=\"number\">1</span>) + <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &gt;= <span class=\"number\">0</span> &amp;&amp; <span class=\"regexp\">/ /</span>.<span class=\"title function_\">test</span>(tmp[start])) &#123;</span><br><span class=\"line\">            start--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        end = start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"57 - II. 和为 s 的连续正数序列","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/57%20-%20II.%20%E5%92%8C%E4%B8%BA%20s%20%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个正整数, 输出所有和为 target 的连续正整数序列(至少含有两个数). 序列内的数字由小到大的排列</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: target = 9</span><br><span class=\"line\">输出: [[2,3,4],[4,5]]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: target = 15</span><br><span class=\"line\">输出: [[1,2,3,4,5],[4,5,6],[7,8]]</span><br></pre></td></tr></table></figure>\n\n<p>限制: 1 &lt;&#x3D; target &lt;&#x3D; 10^5</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><ul>\n<li>最容易想到的方案是暴力枚举, 因为题目要求至少包含两个数. 所以枚举到 target&#x2F;2 即可停止. 时间复杂度比较高</li>\n<li>更好的方式是使用滑动窗口, 设置左右指针. 从开始位置维护一个子数组作为窗口. 判断该窗口是否求和为 target, 如果是则将结果加入, 如果小于 target 则窗口右移, 大于 target 则窗口左移</li>\n</ul>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先初始化窗口, i &#x3D; 1, j &#x3D; 2</li>\n<li>当 i &lt; j 时始终维护该窗口, 只有当到达边界位置时, 窗口之和 sum &gt; target</li>\n<li>根据求和公式 sum &#x3D; (i + j) * (j - i + 1) &#x2F; 2 可以直接计算出滑动窗口之和</li>\n<li>当 sum &#x3D;&#x3D; target 时, 将窗口放入结果数组中, 并且窗口左侧右移一位. 保证窗口是右移的趋势</li>\n<li>当 sum &lt; target 时, 说明窗口结果需要变大, j++</li>\n<li>当 sum &gt; target 时, 说明窗口结果需要变小, i++</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(target). 滑动窗口最多移动 target&#x2F;2 次</li>\n<li>空间复杂度: O(1). 排除必要的存储结果数组之外, 只需要保存左右指针</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSum</span> = (<span class=\"params\">left, right</span>) =&gt; (left + right) * (right - left + <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSection</span> = (<span class=\"params\">left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> section = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        section.<span class=\"title function_\">push</span>(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> section</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">findContinuousSequence</span> = target =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">getSum</span>(i, j) === target) &#123;</span><br><span class=\"line\">            ret.<span class=\"title function_\">push</span>(<span class=\"title function_\">getSection</span>(i, j))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 窗口往右移动</span></span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">getSum</span>(i, j) &lt; target) &#123;</span><br><span class=\"line\">            j++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"57. 和为 s 的两个数字","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/57.%20%E5%92%8C%E4%B8%BA%20s%20%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个递增数组和一个数字 n, 在数组中查找两个数, 使得他们的和正好是 n. 如果存在多组这样的数字输出其中的一组即可.</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [2,7,11,15], n = 9</span><br><span class=\"line\">输出: [2,7] 或者 [7,2]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：nums = [10,26,30,31,47,60], n = 40</span><br><span class=\"line\">输出：[10,30] 或者 [30,10]</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>限制:</p>\n<ul>\n<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10^5</li>\n<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10^6</li>\n</ul>\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><p>定义 i, j 两个指针分别指向数组的第一个和最后一个元素. 然后计算两者的值和 n 的比较. 如果两数的和大于 n 则右指针左移减小两数的和, 如果两数的和小于 n 则右移左指针增大两数的和. 直至找到结果</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先初始化双指针, i &#x3D; 0, j &#x3D; nums.length - 1</li>\n<li>当 i &lt; j 时, 始终进行循环遍历</li>\n<li>比较 <code>nums[i] + nums[j]</code> 和 <code>target</code> 的大小</li>\n<li>如果 <code>nums[i] + nums[j] &gt; target</code> j–</li>\n<li>如果 <code>nums[i] + nums[j] &lt; target</code> i++</li>\n<li>如果 <code>nums[i] + nums[j] === target</code>. 找到结果</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">twoSum</span> = (<span class=\"params\">nums, target</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> numberI = nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> numberJ = nums[j]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> sum = numberI + numberJ</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [numberI, numberJ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Not have a suitable result ~&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"29. 顺时针打印矩阵","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/29.%20%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个矩阵, 按照从外向里以顺时针的顺序一次打印出每一个数字</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class=\"line\">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">spiralOrder</span> = matrix =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> top = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> direction = <span class=\"string\">&#x27;right&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;right&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">                    ret.<span class=\"title function_\">push</span>(matrix[top][i])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                top++</span><br><span class=\"line\">                direction = <span class=\"string\">&#x27;down&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;down&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">                    ret.<span class=\"title function_\">push</span>(matrix[i][right])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                right--</span><br><span class=\"line\">                direction = <span class=\"string\">&#x27;left&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;left&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">                    ret.<span class=\"title function_\">push</span>(matrix[bottom][i])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bottom--</span><br><span class=\"line\">                direction = <span class=\"string\">&#x27;up&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;up&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">                    ret.<span class=\"title function_\">push</span>(matrix[i][left])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                left++</span><br><span class=\"line\">                direction = <span class=\"string\">&#x27;right&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"66. 构建乘积数组","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/66.%20%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 A[0, 1, 2 … n - 2, n - 1], 请构建一个数组 B[0, 1, 2 … m - 1], 其中 B 的元素 B[i] &#x3D; A[0] * A[1] * A[2] * A[i - 1] * A[i + 1] * … * A[n - 1]. 也就是说, B[i] 等于 A[i] 之外所有 A 的元素的乘积.</p>\n<p>PS: 不能使用除法</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [1, 2, 3, 4, 5]</span><br><span class=\"line\">输出: [120, 60, 40, 30, 24]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>如果可以用除法的话, 可以先求出 A 数组所有项的乘积, 然后分别除以对应的项就可以得出 B 数组.</li>\n<li>解法 1 硬刚. 构造和数组 A 等长的 B 数组, 一个一个算</li>\n<li>解法 2 分步<ul>\n<li>首先, 把 i 左边的数相乘并记录</li>\n<li>其次, 把 i 右边的数相乘并记录</li>\n<li>最后用左边的结果乘以右边的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"方案-1\"><a href=\"#方案-1\" class=\"headerlink\" title=\"方案 1\"></a>方案 1</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">constructArr</span> = A =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> B = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(A.<span class=\"property\">length</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    B.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">eleB, idxB</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        A.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">eleA, idxA</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (idxA !== idxB) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (B[idxB]) &#123;</span><br><span class=\"line\">                    B[idxB] *= eleA</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    B[idxB] = eleA</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> B</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案-2\"><a href=\"#方案-2\" class=\"headerlink\" title=\"方案 2\"></a>方案 2</h3><p>leetCode 的解析如下图:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221019-025303.gif\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">constructArr</span> = A =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算 i 左边的值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        ret[i] = left</span><br><span class=\"line\">        left *= A[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 乘以 i 右边的值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = A.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">        ret[i] *= right</span><br><span class=\"line\">        right *= A[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"67. 把字符串转换成整数","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/67.%20%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>写一个 str2num 函数, 实现把一个字符串转化成整数这个功能.</p>\n<p>首先, 该函数需要丢弃无用的开头空格字符, 直到找到第一个非空格的字符为止.</p>\n<span id=\"more\"></span>\n\n<p>如果我们寻找到的第一个非空的字符是 + 或者 -, 则将该符号与之后的尽可能多的数字字符连接起来作为该数的正负号. 如果第一个非空字符是一个数字, 则直接将其与之后的数字字符连接起来形成整数.</p>\n<p>该字符串除了数字字符之外可能存在多余的字符, 直接丢弃 ~</p>\n<p>如果字符串中第一个非空字符不是数字字符, 则认为不需要转换. 返回 0</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;42&quot;</span><br><span class=\"line\">输出: 42</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;    -42&quot;</span><br><span class=\"line\">输出: -42</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;666 quanquan&quot;</span><br><span class=\"line\">输出: 666</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: &quot;quanquan 666&quot;</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>删除开头的空格</li>\n<li>声明一个保存符号位的变量</li>\n<li>首位如果非数字字符直接返回</li>\n<li>从前往后依次遍历, 直到匹配到不是数字字符的元素 or 结尾</li>\n<li>返回结果</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">strToInt</span> = str =&gt; &#123;</span><br><span class=\"line\">    str = str.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/[\\+\\-]/</span>.<span class=\"title function_\">test</span>(str[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">        symbol = str[<span class=\"number\">0</span>]</span><br><span class=\"line\">        str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; idx &lt; str.<span class=\"property\">length</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> char = str[idx]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d/</span>.<span class=\"title function_\">test</span>(char)) &#123;</span><br><span class=\"line\">            idx++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(symbol + str.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, idx))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"06. 从尾到头打印链表","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/06.%20%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个链表的头结点, 要求你从尾到头反过来返回每个节点的值 ~</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: head = [1, 2, 3]</span><br><span class=\"line\">输出: [3, 2, 1]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>限制:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 &lt;= 链表长度 &lt;= 10000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>栈的特点是后进先出, 因为题目要求从尾到头打印元素, 所以符合栈的特性</li>\n<li>首先遍历一遍链表, 将链表中的元素存入栈中</li>\n<li>不断弹出栈内的元素, 将弹出的元素放到结果数组中</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> head = &#123;</span><br><span class=\"line\">    <span class=\"attr\">val</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">val</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">next</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">val</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reversePrint</span> = head =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pointer = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pointer) &#123;</span><br><span class=\"line\">        stack.<span class=\"title function_\">push</span>(pointer.<span class=\"property\">val</span>)</span><br><span class=\"line\">        pointer = pointer.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ele</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ele = stack.<span class=\"title function_\">pop</span>()) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(ele)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">reversePrint</span>(head));</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","栈和队列"],"tags":["算法"]},{"title":"58 - II. 左旋转字符串","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/58%20-%20II.%20%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>字符串左旋操作是把字符串前边的若干个字符转移到字符串的尾部. 请定义一个函数实现字符串左旋的功能. 比如输入字符串 “abcdefg” 和数字 2. 该函数返回左旋两位得到的结果 “cdefgab”</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class=\"line\">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;lrloseumgh&quot;, k = 6</span><br><span class=\"line\">输出: &quot;umghlrlose&quot;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>首先定义一个新的结果字符串</li>\n<li>从原字符串的第 k 位开始遍历, 逐个添加到新的字符串里</li>\n<li>从原字符串的头开始遍历到 k - 1, 逐个添加到新的字符串里</li>\n<li>返回结果</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverseLeftWords</span> = (<span class=\"params\">s, k</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        ret += s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        ret += s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"30. 包含 min 函数的栈","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/30.%20%E5%8C%85%E5%90%AB%20min%20%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>定义一个栈数据结构, 请在该类型中实现一个能够得到最小元素的 <code>min</code> 函数. 调用 <code>min</code> <code>push</code> <code>pop</code> 的时间复杂度都是 O(1).</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>()</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>)</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>)</span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>() <span class=\"comment\">// --&gt; -3</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">minStack.<span class=\"title function_\">top</span>() <span class=\"comment\">// --&gt; 0</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>() <span class=\"comment\">// --&gt; -2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><code>push</code> <code>pop</code> <code>top</code> 三个方法直接用数组的方法即可实现. 对于取最小值 <code>min</code> 函数则需要建立辅助线. 辅助线中降序存储 <code>push</code> 过程中的值</p>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(1)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>创建 <code>MinStack</code> 类, 并初始化数据栈 stack1 和辅助栈 stack2</li>\n<li>push 函数中将 val 正常添加到 stack1 中, 如果 stack2 为空或者 stack2 栈顶值大于等于 val 时, 则将 val 加入到 stack2 中, 这样保证了 stack2 中的值一定是降序的的并且存储元素的数量会小于等于 stack1.</li>\n<li>pop 方法首先将 stack1 中的元素 pop 出去, 如果 stack2 栈顶元素与 stack1 的栈顶元素相等, 则将 stack2 中的值也 pop 出去, 保证数据栈和辅助栈的数据一致性</li>\n<li>top 函数则直接取 stack1 栈顶值即可</li>\n<li>min 函数则直接取 stack2 栈顶值即可</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span> = []</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span> = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>.<span class=\"title function_\">push</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">min</span>() === <span class=\"literal\">undefined</span> || <span class=\"variable language_\">this</span>.<span class=\"title function_\">min</span>() &gt;= val) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"title function_\">push</span>(val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>.<span class=\"title function_\">pop</span>() === <span class=\"variable language_\">this</span>.<span class=\"title function_\">min</span>()) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">top</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">min</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; length &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>[length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>()</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>)</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minStack.<span class=\"title function_\">top</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minStack.<span class=\"title function_\">min</span>())</span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minStack.<span class=\"title function_\">top</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minStack.<span class=\"title function_\">min</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">-3</span></span><br><span class=\"line\"><span class=\"comment\">-3</span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">-2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","栈和队列"],"tags":["算法"]},{"title":"61. 扑克牌中的顺子","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/61.%20%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>从扑克牌中随机抽 5 张牌, 判断是不是一个顺子. 即这 5 张牌是不是连续的. 2 ~ 10 位数字本身, A 为 1, J 为 11, Q 为 12, K 为 13, 而大小王为 0, 可以看成任何数字</p>\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [1, 2, 3, 4, 5]</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [0, 0, 1, 2, 5]</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>首先对数组进行升序排序</li>\n<li>如果数组中有重复的数, 直接返回 false</li>\n<li>令 min 为不包含大小王的最小值, 如果 max - min &gt; 5 则返回 false</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(nLog n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isStraight</span> = nums =&gt; &#123;</span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> commonIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>; idx &lt; nums.<span class=\"property\">length</span>; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = nums[idx]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 大小王不算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            commonIdx = idx + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果你是对子, 肯定就不是顺子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element === nums[idx + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后一张普通牌 - 第一张普通牌应该小于 5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>] - nums[commonIdx] &lt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","数组和字符串"],"tags":["算法"]},{"title":"31. 栈的压入、弹出序列","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/31.%20%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个整数序列, 第一个序列表示栈的压入顺序, 请判断第二个序列是否为栈的弹出顺序. 假设压入栈的所有数字均不相等. 例如, {1,2,3,4,5} 为某栈的压入序列. 序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列. 但是 {4,3,5,1,2} 就不可能是该栈的弹出序列</p>\n<span id=\"more\"></span>\n\n<p>示例1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 我们可以按以下顺序执行:</span><br><span class=\"line\">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class=\"line\">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure>\n\n<p>示例2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class=\"line\">输出: false</span><br><span class=\"line\">解释: 1 不能在 2 之前弹出</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>借用一个辅助栈模拟压入和弹出的操作, 根据是否模拟成功即可得到结果</p>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n), n 为入栈序列的长度</li>\n<li>空间复杂度: O(n), 辅助栈最多存 n 个元素</li>\n</ul>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>建立一个辅助栈</li>\n<li>遍历入栈序列<ul>\n<li>元素入栈</li>\n<li>若辅助栈顶元素等于弹出序列元素, 则出栈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法 1\"></a>解法 1</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">validateStackSequences</span> = (<span class=\"params\">pushed, popped</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> popIdx = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pushed.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">        stack.<span class=\"title function_\">push</span>(ele)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] === popped[popIdx]) &#123;</span><br><span class=\"line\">            stack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">            popIdx++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !stack.<span class=\"property\">length</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStackSequences</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStackSequences</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>], [<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]));</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法 2\"></a>解法 2</h3><p>双指针法 ~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">validateStackSequences</span> = (<span class=\"params\">pushed, popped</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pushIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> popIdx = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pushed.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        pushed[pushIdx] = pushed[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pushIdx &gt;= <span class=\"number\">0</span> &amp;&amp; pushed[pushIdx] === popped[popIdx]) &#123;</span><br><span class=\"line\">            pushIdx--</span><br><span class=\"line\">            popIdx++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pushIdx++</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pushIdx === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStackSequences</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]));</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStackSequences</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>], [<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]));</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","栈和队列"],"tags":["算法"]},{"title":"09. 用两个栈实现队列","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/09.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>用两个栈实现一个队列. 队列的声明如下, 实现它的 appendTail 和 deleteHead, 分别完成在队列尾部插入整数和在队列头部删除整数的功能, 如果队列中没有了元素则直接返回 -1.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>栈实现队列的方案本来就是负负得正, 两次先进后出的结果就是先进先出了.</p>\n<ul>\n<li>首先在构造函数中初始化两个栈 stack1, stack2</li>\n<li>appendTail 给 stack1 尾部添加元素</li>\n<li>如果 deleteHead 的时候, stack2 已经空了. 就直接把当前 stack1</li>\n<li>deleteHead 从 stack2 尾部取出元素, 如果 stack2 还是空的就返回 -1</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(1)</li>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span> = []</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span> = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">appendTail</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>.<span class=\"title function_\">push</span>(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">deleteHead</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前 stack2 直接把 stack1 的值灌入 stack2</span></span><br><span class=\"line\">        <span class=\"comment\">// 实现负负得正的效果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ele</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (ele = <span class=\"variable language_\">this</span>.<span class=\"property\">stack1</span>.<span class=\"title function_\">pop</span>()) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"title function_\">push</span>(ele)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack2</span>.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","栈和队列"],"tags":["算法"]},{"title":"22. 链表中倒数第 num 个节点","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E9%93%BE%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E9%93%BE%E8%A1%A8/22.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%AC%20num%20%E4%B8%AA%E8%8A%82%E7%82%B9/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个链表, 输出该链表中倒数第 num 个节点为头结点的链表</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: head = [1, 2, 3, 4, 5], num = 2</span><br><span class=\"line\">输出: [4, 5]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>使用双指针, 定义两个指针相距为 num. 两个指针同时向后移动, 当前方指针移动到尾部时后方指针就是倒数第 num 个节点.</p>\n<h3 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ul>\n<li>首先构建 pre, post 两个指针都指向 head</li>\n<li>pre 指针先向后移动 num 个位置</li>\n<li>pre, post 指针同时向后移动, 直到前指针为 null 为止</li>\n<li>后指针即为倒数第 num 个节点</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createList</span> = (<span class=\"params\">eles</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(eles.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextVal</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextVal = eles.<span class=\"title function_\">shift</span>()) &#123;</span><br><span class=\"line\">        cursor.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(nextVal)</span><br><span class=\"line\">        cursor = cursor.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> head = <span class=\"title function_\">createList</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getKthFromEnd</span> = (<span class=\"params\">head, num</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> post = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        pre = pre.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pre !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        pre = pre.<span class=\"property\">next</span></span><br><span class=\"line\">        post = post.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> post</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getKthFromEnd</span>(head, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","链表"],"tags":["算法"]},{"title":"52. 两个链表的第一个公共节点","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E9%93%BE%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E9%93%BE%E8%A1%A8/52.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个链表, 找出它们的第一个公共节点.</p>\n<p>如下图所示的两个链表:</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221128225421.png\" alt=\"20221128225421\"></p>\n<p>在节点 c1 开始相交</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: l1 = [4, 1, 8, 4, 5], l2 = [5, 0, 1, 8, 4, 5]</span><br><span class=\"line\">输出: 8</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: l1 = [0, 9, 1, 2, 4], l2 = [3, 2, 4]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: l1 = [2, 6, 4], l2 = [1, 5]</span><br><span class=\"line\">输出: null</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>如果两个链表没有交点, 返回 null</li>\n<li>在返回结果后, 两个链表仍保持原有的结构</li>\n<li>可假定两个链表中没有循环</li>\n</ul>\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>分别构造两个指针去遍历两个链表, 无论哪个指针直到尾部时让其指向对方的头部, 最终会在第一个公共节点相遇. 如果没有则会在 null 相遇</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>使用 head1 和 head2 分别初始化两个指针 cur1 和 cur2, 用来遍历使用</li>\n<li>进行循环遍历, 知道 cur1 和 cur2 相同时结束</li>\n<li>遍历过程中如果 cur1 到了尾部则将其重新放回头部 head2, 如果 cur2 到尾部则将其重新放回头部 head1</li>\n<li>循环结束时在第一个公共节点相遇, 返回该节点 cur1</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createList</span> = (<span class=\"params\">eles</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(eles.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextVal</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextVal = eles.<span class=\"title function_\">shift</span>()) &#123;</span><br><span class=\"line\">        cursor.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(nextVal)</span><br><span class=\"line\">        cursor = cursor.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> l1 = <span class=\"title function_\">createList</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = <span class=\"title function_\">createList</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getIntersectionNode</span> = (<span class=\"params\">l1, l2</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur1 = l1</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur2 = l2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur1?.<span class=\"property\">val</span> != cur2?.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">        cur1 = cur1 != <span class=\"literal\">null</span> ? cur1.<span class=\"property\">next</span> : l2</span><br><span class=\"line\">        cur2 = cur2 != <span class=\"literal\">null</span> ? cur2.<span class=\"property\">next</span> : l1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur1?.<span class=\"property\">val</span> || <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title function_\">getIntersectionNode</span>(l1, l2), <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","链表"],"tags":["算法"]},{"title":"59 - I. 滑动窗口的最大值","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/59%20-%20I.%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 <code>nums</code> 和滑动窗口的大小 k, 请找出滑动窗口里的最大值.</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</span><br><span class=\"line\">输出: [3,3,5,5,6,7]</span><br><span class=\"line\">解释:</span><br><span class=\"line\"></span><br><span class=\"line\">  滑动窗口的位置                最大值</span><br><span class=\"line\">-------------------------     -----</span><br><span class=\"line\">[1  3  -1] -3  5  3  6  7       3</span><br><span class=\"line\"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class=\"line\"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class=\"line\"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class=\"line\"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class=\"line\"> 1  3  -1  -3  5 [3  6  7]      7</span><br><span class=\"line\"></span><br><span class=\"line\">输出: [3, 3, 5, 5, 6, 7]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这个题的意思大概就是搞一个指定长度的数组, 从左往右跑然后每跑一步就取一个当前数组中的最大值出来.</p>\n<p><img src=\"https://handle-note-img.niubishanshan.top/20221026-231648.gif\"></p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>初始化滑动窗口的 left 和 right 位置, 从 [1 - k, 0] 开始</li>\n<li>如果 left &gt; 0 说明窗口已经在数组中, 并且单调队列的第一个元素和 nums[left - 1] 相等时, 说明元素已经不再滑动窗口中了需要移除</li>\n<li>如果单调队列不为空且最后一个元素小于新加入的 nums[right] 元素, 则需要维护单调队列为递减状态, 所以将最后一个元素移除, 直到其大于新加入元素</li>\n<li>将新加入的 nums[right] 元素加入单调队列, 因为上一步的操作, 当前单调队列一定是递减的</li>\n<li>如果 left &gt;&#x3D; 0, 说明窗口在数组中, 因为单调队列递减, 所以第一个元素一定是当前滑动窗口最大值</li>\n</ul>\n<p>PS: 这个单调队列可以类比成生活中的插队</p>\n<p>一大哥来排队, 看见最后一个人是弱鸡, 就直接插他前面. 以此类推, 这位大哥刚好站在他打不过的人后边. 当然有个前提, 所有来排队的人都是这种恃强凌弱的方式排队.</p>\n<p>这窗口又是怎么回事呢?</p>\n<p>窗口右边是刚来排队的人, 窗口左边是刚走的人, 这人可能是刚办好事, 也可能是当前排队的大哥都打不过. 最后把办过事的人的列表输出.</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxSlidingWindow = <span class=\"keyword\">function</span> (<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slidingWindow = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> left = <span class=\"number\">1</span> - k, right = <span class=\"number\">0</span>; right &lt; nums.<span class=\"property\">length</span>; left++, right++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span> &amp;&amp; slidingWindow[<span class=\"number\">0</span>] == nums[left - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            slidingWindow.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (slidingWindow.<span class=\"property\">length</span> != <span class=\"number\">0</span> &amp;&amp; slidingWindow[slidingWindow.<span class=\"property\">length</span> - <span class=\"number\">1</span>] &lt; nums[right]) &#123;</span><br><span class=\"line\">            slidingWindow.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        slidingWindow.<span class=\"title function_\">push</span>(nums[right]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ret[left] = slidingWindow[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">maxSlidingWindow</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, -<span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n","categories":["学习笔记","数据结构与算法","剑指 Offer","栈和队列"],"tags":["算法"]},{"title":"24. 反转链表","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E9%93%BE%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E9%93%BE%E8%A1%A8/24.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>定义一个函数, 输入一个链表的头结点, 反转该链表并输出反转后的链表头节点.</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [1, 2, 3, 4, 5]</span><br><span class=\"line\">输出: [5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>通过前指针, 当前指针和临时指针三个指针两两节点进行交换. 直到遍历到链表结尾则链表反转完成…</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>初始化前指针 pre &#x3D; head 和当前指针 cursor &#x3D; null</li>\n<li>当 pre !&#x3D;&#x3D; null 时说明还没有到达链表的结尾, 不断遍历</li>\n<li>临时指针 temp &#x3D; pre.next 保存下一次要反转的指针位置</li>\n<li>pre.next &#x3D; cursor 实现链表中后一节点的反转</li>\n<li>cursor &#x3D; pre, 移动当前指针</li>\n<li>pre &#x3D; temp 前指针指向当初的下一个节点</li>\n<li>遍历完成后, cursor 指向的即为反转后的链表头节点</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createList</span> = (<span class=\"params\">eles</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(eles.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextVal</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextVal = eles.<span class=\"title function_\">shift</span>()) &#123;</span><br><span class=\"line\">        cursor.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(nextVal)</span><br><span class=\"line\">        cursor = cursor.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> head = <span class=\"title function_\">createList</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverseList</span> = (<span class=\"params\">head</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pre !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> temp = pre.<span class=\"property\">next</span></span><br><span class=\"line\">        pre.<span class=\"property\">next</span> = cursor</span><br><span class=\"line\">        cursor = pre</span><br><span class=\"line\">        pre = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cursor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title function_\">reverseList</span>(head), <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","链表"],"tags":["算法"]},{"title":"18. 删除链表的节点","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E9%93%BE%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E9%93%BE%E8%A1%A8/18.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个元素不重复的单向链表的头指针和要删除节点的值, 定义一个函数删除该节点并返回删除后链表的头结点.</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: head = [4, 5, 1, 9], val = 5</span><br><span class=\"line\">输出: [4, 1, 9]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: head = [4, 5, 1, 9], val = 1</span><br><span class=\"line\">输出: [4, 5, 9]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>定义两个紧邻的指针, 当前方指针指向的值刚好式样删除的值时, 直接将后指针指向其后一个节点.</p>\n<h3 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h3><ul>\n<li>首先判断头指针是否为 null 如果是则直接返回</li>\n<li>如果头指针的值即为要删除的值, 直接返回 head.next 即可</li>\n<li>初始化前指针 pre 和后指针 post, 两个指针紧挨着距离为 1</li>\n<li>前后两个指针一起遍历链表, 直到遍历到结尾或者遇到需要删除的节点则跳出</li>\n<li>遍历过程中如果遇到 pre.val &#x3D;&#x3D;&#x3D; val 则让 post.next &#x3D; pre.next 相当于删除了链表中的值</li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>时间复杂度: O(n)</li>\n<li>空间复杂度: O(1)</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createList</span> = (<span class=\"params\">eles</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(eles.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextVal</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextVal = eles.<span class=\"title function_\">shift</span>()) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Current timestamp <span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span> nextVal: `</span>, nextVal)</span><br><span class=\"line\">        cursor.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(nextVal)</span><br><span class=\"line\">        cursor = cursor.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> head = <span class=\"title function_\">createList</span>([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deleteNode</span> = (<span class=\"params\">head, val</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.<span class=\"property\">val</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.<span class=\"property\">val</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.<span class=\"property\">val</span> === val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = head.<span class=\"property\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> post = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (![<span class=\"literal\">null</span>, val].<span class=\"title function_\">includes</span>(pre.<span class=\"property\">val</span>)) &#123;</span><br><span class=\"line\">        post = pre</span><br><span class=\"line\">        pre = pre.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pre.<span class=\"property\">val</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        post.<span class=\"property\">next</span> = pre.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">deleteNode</span>(head, <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","链表"],"tags":["算法"]},{"title":"25. 合并两个排序的链表","url":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87-Offer/%E9%93%BE%E8%A1%A8/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer/%E9%93%BE%E8%A1%A8/25.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个递增排序的链表, 合并这两个链表并使新链表中的节点仍然是递增排序的 ~</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [1, 2, 4], [1, 3, 4]</span><br><span class=\"line\">输出: [1, 1, 2, 3, 4, 4]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解题方案\"><a href=\"#解题方案\" class=\"headerlink\" title=\"解题方案\"></a>解题方案</h2><ul>\n<li>本题可以利用递归实现, 返回的新的链表也不需要创建新的节点</li>\n<li>终止条件: 两个链表分别为 l1 和 l2, 当 l1 或 l2 为空的时候结束</li>\n<li>返回值: 每次调用都返回排序好的链表头</li>\n<li>本级递归内容: 如果 l1 的 val 更小, 则将 l1 的 next 与排序好的链表头相接, l2 同理</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createList</span> = (<span class=\"params\">eles</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(eles.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cursor = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextVal</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextVal = eles.<span class=\"title function_\">shift</span>()) &#123;</span><br><span class=\"line\">        cursor.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(nextVal)</span><br><span class=\"line\">        cursor = cursor.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> l1 = <span class=\"title function_\">createList</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = <span class=\"title function_\">createList</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mergeTwoLists</span> = (<span class=\"params\">l1, l2</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.<span class=\"property\">val</span> &lt; l2.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">        l1.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l1.<span class=\"property\">next</span>, l2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l1, l2.<span class=\"property\">next</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title function_\">mergeTwoLists</span>(l1, l2), <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["学习笔记","数据结构与算法","剑指 Offer","链表"],"tags":["算法"]}]